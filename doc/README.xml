<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="../../../docs/stylesheet/docbook_ab.css" type="text/css"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="en">
   <articleinfo>
      <title>Juggler Project Overview</title>
      <authorgroup>
         <author>
            <othername>The Juggler Team</othername>
         </author>
      </authorgroup>
      <pubdate>$Date$</pubdate>
   </articleinfo>
   <section>
      <title>Introduction</title>
      <para>Congratulations, you have downloaded the source code to the Juggler Project, open source software for virtual reality from the Virtual Reality Applications Center at Iowa State University. Within this document, you will find information about the new VR Juggler 2.0 directory structure including descriptions of all the component modules that make up the Juggler Project. Instructions for building the individual modules can be found within the specific module directories and on the VR Juggler website.</para>
   </section>
   <section>
      <title>Compiling</title>
      <para>In this section, we describe how to compile the Juggler project. As of this writing, the explanation focuses on VR Juggler itself.</para>
      <section>
         <title>Important Note Regarding Compiling</title>
         <para>Please note: you have downloaded <emphasis>developmental</emphasis> code. It may not be stable, and it may not even compile. Compiling Juggler itself can be a little complicated for anyone who does not have some background in Autoconf, C++, and make.</para>
      </section>
      <section>
         <title>Compiling the Juggler suite of tools</title>
         <para>This section explains how to get, configure, and compile all of the Juggler tools at once. Each tool compiles to its own library, and can be installed individually. (Refer to <xref linkend="modules-section"/> for more information about the specific modules.)</para>
         <para>Getting the source code takes a few steps. You have to first download or check out Juggler and some external packages such as GGT, Xerces, and possibly NSPR. Here are the steps:</para>
         <section>
            <title>How to get Juggler and external package dependencies</title>
            <orderedlist>
               <listitem>
                  <para>You can optionally get Juggler as a source code tarball from the website (www.vrjuggler.org) or...</para>
               </listitem>
               <listitem>
                  <para>Check out the 'juggler' module using CVS.</para>
                  <screen>cvs -d :pserver:anonymous@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler login
cvs -z3 -d :pserver:anonymous@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler co juggler</screen>
               </listitem>
               <listitem>
                  <para>Get external packages that Juggler depends on. Typically you will run cvs-gather.pl, found in the top-level <filename>juggler</filename> directory.</para>
                  <para>The syntax will be similar to the following (you may have to edit the file <filename>deps.esrc</filename>, see also <xref linkend="aquire"/>):</para>
                  <screen>./cvs-gather.pl --versbose --cfg=deps.esrc</screen>
                  <itemizedlist>
                     <listitem>
                        <para>See <xref linkend="aquire"/>, you can use <command>cvs-gather</command>, or read the file <filename>deps.esrc</filename> and then manually get the packages yourself.</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
            </orderedlist>
            <section id="aquire">
               <title>Aquire third party packages</title>
               <para><command>cvs-gather</command> is a utility we include in the root directory of Juggler to help you collect third party (external) source code that Juggler needs in order to build. In short, <command>cvs-gather</command> makes it easier to acquire the packages that Juggler needs.</para>
               <para>To get help on using this tool, use one of the following (the second version gives much more detailed output):</para>
               <screen>./cvs-gather.pl --help
./cvs-gather.pl --manual
</screen>
               <para>Use of <command>cvs-gather</command> is not required. You can skip <command>cvs-gather</command> if you already have the needed packages in your system or if you feel like getting these packages manually. <command>cvs-gather</command> is provided primarily for developer convenience.</para>
               <para>For a list of these package dependencies, you can look in the file <filename>deps.esrc</filename> to determine what packages you need to download manually.</para>
               <para>For <command>cvs-gather</command> to work, it uses a <filename>.gatherrc</filename> file. The <filename>.gatherrc</filename> file is used to specify the external project CVS locations. <command>cvs-gather</command> reads these CVS locations and then checks each one out locally for Juggler to build.</para>
               <para>The following shows how to run <command>cvs-gather</command> with a <filename>.gatherrc</filename> file. As of this writing, such a file is provide that allows anonymous-only CVS access. To use it, enter the following:</para>
               <screen>./cvs-gather.pl --versbose --cfg=deps.gatherrc</screen>
               <para>To simplify shared use of a single configuration file, the contents of the file may be overridden on the command line or using an <quote>overrides</quote> file. The following shows such a file that overrides the CVSROOT settings in <filename>deps.esrc</filename>:</para>
               <programlisting>      #JugglerBaseStuff.CVSROOT=patrickh@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler 
      Doozer.CVSROOT=patrickh@cvs.doozer.sourceforge.net:/cvsroot/doozer
      GMTL.*.CVSROOT=patrickh@cvs.ggt.sourceforge.net:/cvsroot/ggt                  </programlisting>
               <para>The current <filename>deps.esrc</filename> only allows anonymous CVS access. To override that, we suggest making per-user override files. To use the override file, just add the argument <option>--override=&lt;filename&gt;</option> when running <command>cvs-gather</command>.</para>
               <para>The following shows how to run <command>cvs-gather</command> with your own overrides file:</para>
               <screen>cvs-gather.pl --cfg=deps.gatherrc --override=anonuser.gatheroverride</screen>
               <para>If all goes well, you'll get everything you need to compile.</para>
            </section>
         </section>
         <section>
            <title>Configuring and compiling all Juggler tools at once</title>
            <para>Every time you have newly updated source code aquired from CVS or <command>cvs-gather</command>, it is recommended that you <command>autogen.sh</command>, found in the top-level <filename>juggler</filename> directory:</para>
            <screen>./autogen.sh</screen>
            <para>Also in this directory, we have a <quote>global</quote> configure script written in Perl rather than Autoconf. It is called <command>configure.pl</command>. To get options for this script, use one of the following (the second being much more detailed):</para>
            <screen>./configure.pl --script-help
./configure.pl --manual</screen>
            <para>To configure your system, you'll need to see what options all the Autoconf-based configure scripts in Juggler need. To get this text, enter:</para>
            <screen>./configure.pl --help</screen>
            <para><command>configure.pl</command> works in a different <quote>build</quote> directory or in the directory where it resides. Here is how we (the team) have been using it:</para>
            <orderedlist>
               <listitem>
                  <para>Make a directory for compiling. There are many good reasons to do this away from the main source tree.</para>
                  <screen>mkdir build.linux.posix</screen>
                  <para>This example using an ad hoc naming convention based on operating system and threading subsystem. Other examples could be <filename>build.irix.sproc</filename>, <filename>build.solaris.nspr</filename>, etc.</para>
               </listitem>
               <listitem>
                  <para>Enter the new build directory.</para>
                  <screen>cd build.linux.posix</screen>
               </listitem>
               <listitem>
                  <para>Configure all the Juggler modules. This is when you must tell the module configure scripts where all the package dependencies are.</para>
                  <screen>../configure.pl --cfg=../juggler.cfg --with-xercesroot=/home/users/allenb/Linux/xerces-c-src1_5_1 --with-xerceslib=xerces-c1_5_1 --with-gmtl-include=/var/tmp/patrick/juggler/modules/GMTL</screen>
               </listitem>
               <listitem>
                  <para>Compile the source tree using GNU make.</para>
                  <screen>gmake</screen>
               </listitem>
            </orderedlist>
            <para>Note that the path to GMTL must be the <emphasis>absolute</emphasis> path to the parent directory containing the <filename>gmtl</filename> directory. That is where the GMTL headers live. Do not set it to <filename>&lt;path&gt;/modules/GMTL/gmtl</filename>--instead you only need to set it to <filename>&lt;path&gt;/modules/GMTL</filename>.</para>
         </section>
         <section>
            <title>Compiling individual tools in the Juggler suite</title>
            <para>Sometimes you do not want to build everything in the Juggler suite. Here are steps for configuring/building each package individually.</para>
            <section>
               <title>JCCL (individual)</title>
               <para>JCCL requires VPR, and a third-party software package called Xerces C++. Xerces can be downloaded from <ulink url="http://xml.apache.org/xerces-c/index.html">the Apache XML site</ulink>. Once Xerces C++ is built and installed, the JCCL configure script can find it:</para>
               <orderedlist>
                  <listitem>
                     <para><command>cd modules/jackal</command></para>
                  </listitem>
                  <listitem>
                     <para><command>./configure --prefix=$HOME/vrjuggler-2.0 --with-xercesroot=&lt;Xerces C++ dir&gt;</command></para>
                  </listitem>
                  <listitem>
                     <para><command>gmake debug install</command></para>
                  </listitem>
                  <listitem>
                     <para><command>setenv JCCL_BASE_DIR $HOME/vrjuggler-2.0</command></para>
                  </listitem>
               </orderedlist>
               <para>Depending on the version of Xerces C++ available, an extra argument may be required to find the actual library. For example, if Xerces C++ 1.6.0 is installed, add <option>--with-xerceslib=xerces-c1_6_0</option> to the command line for running <command>configure</command>. Check the Xerces C++ <filename>lib</filename> directory for the exact name (without <filename>.so</filename> or <filename>.a</filename>).</para>
            </section>
            <section>
               <title>Gadgeteer (individual)</title>
               <para>Gadgeteer depends on JCCL, and VPR. Make sure these are compiled first. Gadgeteer uses <varname>JCCL_BASE_DIR</varname> and <varname>VPR_BASE_DIR</varname> environment variables to find these, so be sure you have them set.</para>
               <orderedlist>
                  <listitem>
                     <para><command>cd modules/gadgeteer</command></para>
                  </listitem>
                  <listitem>
                     <para><command>./configure --prefix=$HOME/vrjuggler-2.0</command></para>
                  </listitem>
                  <listitem>
                     <para><command>gmake debug install</command></para>
                  </listitem>
                  <listitem>
                     <para><command>setenv GADGET_BASE_DIR $HOME/vrjuggler-2.0</command></para>
                  </listitem>
               </orderedlist>
            </section>
            <section>
               <title>VR Juggler (individual)</title>
               <para>VR Juggler depends on JCCL, VPR, and Gadgeteer. It also needs the 3rd party math lib GMTL. VRJuggler uses <varname>JCCL_BASE_DIR</varname>, <varname>GADGET_BASE_DIR</varname>, and <varname>VPR_BASE_DIR</varname> env variables to find these, so be sure you have them set.</para>
               <orderedlist>
                  <listitem>
                     <para><command>cd modules/vrjuggler</command></para>
                  </listitem>
                  <listitem>
                     <para><command>./configure --prefix=$HOME/vrjuggler-2.0</command></para>
                  </listitem>
                  <listitem>
                     <para><command>gmake debug install</command></para>
                  </listitem>
                  <listitem>
                     <para><command>setenv VJ_BASE_DIR $HOME/vrjuggler-2.0</command></para>
                  </listitem>
               </orderedlist>
            </section>
         </section>
      </section>
   </section>
   <section id="modules-section">
      <title>Modules</title>
      <para>The Juggler Project is made up of several modules that have evolved from the original VR Juggler source tree. Within this section, we describe each of the modules, what they are used for, and, when possible, how they relate to VR Juggler 1.0.</para>
      <section>
         <title>VR Juggler</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/vrjuggler</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>VR Juggler is still VR Juggler. There are many new features in VR Juggler since the 1.0 series, but in essence, it is still the same familiar tool. Of the projects listed below, VR Juggler depends on VPR, JCCL, and Gadgeteer. Its individual components have simply been broken out into individually developed modules. More information about the latest version of VR Juggler is given in the following section.</para>
         </section>
      </section>
      <section>
         <title>VR Juggler Portable Runtime (VPR)</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/vapor</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>VPR is the foundation for all the Juggler modules. It provides an object-oriented, cross-platform abstraction layer to common operating system features such as threads, semaphores, and sockets. All the other modules depend on VPR so that they may be ported easily to other platforms. In VR Juggler 1.0, VPR was the collection of directories Threads, SharedMem, and Sync. Since then, that code collected into a single library and greatly extended into what is now VPR.</para>
            <para>VPR itself contains a great deal of platform-specific code. It categorizes this code into subsystems, and various subsystems may be chosen depending upon the target platform and target threading system. For example, on IRIX, there are three possible subsystems: SPROC, POSIX and Netscape Portable Runtime (NSPR). Win32, on the other hand, only uses the NSPR subsystem. The subsystems are:</para>
            <itemizedlist>
               <listitem>
                  <para>SPROC (IRIX only)</para>
               </listitem>
               <listitem>
                  <para>POSIX (UNIX-based platforms only)</para>
               </listitem>
               <listitem>
                  <para>NSPR (all platforms, required on Win32 and Mac OS X)</para>
               </listitem>
            </itemizedlist>
            <para>Because VPR is the foundation for all the other modules, it is important to choose the right subsystem.</para>
            <para>Choosing the correct subsystem depends on many factors. For example, which of the subsystems are supported on the desired target platform? Are there compatibility issues with software outside the Juggler Project? In most cases, however, the choice is straightforward. Indeed, IRIX is the only platform that presents any real issues. In particular, the use of OpenGL Performer from SGI raises important compatibility concerns. SPROC threads are the only threads that are stable with OpenGL Performer (on IRIX). POSIX threads will work, but applications may sometimes crash on startup. As of this writing, OpenGL Performer does not work at all with NSPR. Other software may pose similar problems, and it is important to know the needs of other tools when configuring VPR.</para>
            <para>On platforms other than IRIX, the choice is relatively simple. If NSPR is available, its use is recommended. If NSPR is not available, POSIX threads is the next logical choice--at least on UNIX-based platforms. On Win32 and Mac OS X, NSPR is required.</para>
            <para>As mentioned above, all the other modules depend on VPR, so it must be compiled before anything else. For more information on compiling VPR, refer to modules/vapor/INSTALL.txt.</para>
         </section>
      </section>
      <section>
         <title>Juggler Configuration and Control Library (JCCL)</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/jackal</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>JCCL provides the configuration layer for VR Juggler and other modules. The config chunks and configuration editor VjControl come from JCCL. In essence, JCCL is the VR Juggler 1.0 Config directory with many new features including XML-based config files.</para>
            <para>To build the JCCL C++ library, Xerces-C is required for parsing XML. As of this writing, version 1.5.1 has been used for testing. Newer versions may work. Xerces-C can be downloaded from <ulink url="http://xml.apache.org/xerces-c/">http://xml.apache.org/xerces-c/</ulink>.</para>
            <para>To build VjControl, the Java API for XML Parsing (JAXP) is required. JAXP is distributed with JDK 1.4, and it is available for earlier versions as a separately distributed library. More information and downloads can be found at <ulink url="http://java.sun.com/xml/jaxp/index.html">http://java.sun.com/xml/jaxp/index.html</ulink>.</para>
         </section>
      </section>
      <section>
         <title>Gadgeteer</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/gadgeteer</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>Gadgeteer is made up of the code that was formerly in the VR Juggler 1.0 Input directory. It contains all the drivers used for VR Juggler input devices, and it contains the high-level Input Manager. The goal with Gadgeteer is to mold it into the first dynamically loadable component within the VR Juggler microkernel. At this time, it must still be compiled in, but we hope to generalize the concepts of VR Juggler Managers to the point that the kernel knows nothing about them until they are loaded at run time.</para>
         </section>
      </section>
      <section>
         <title>Sonix</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/sonix</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>Sonix provides an interface useful to many simple VR and entertainment applications to trigger and position sounds in 3D. This library provides simple audio sound objects on top of several audio APIs. The interface to Sonix is kept very simple in order to get people up and running with sound as fast as possible.</para>
            <para>The interface to sonix is kept very simple in order to get people up and running with sound as fast as possible. Sonix is reconfigurable allowing audio APIs to be safely swapped out at runtime without the dependent systems noticing. Systems using this layer expect to be completely portable.</para>
         </section>
      </section>
      <section>
         <title>Plexus</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/plexus</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>Plexus is a network data routing library that operates at the application level on top of the TCP/IP stack. The focus of Plexus is to make low-latency data networks for use within virtual environments. It is not strictly limited to use with virtual reality (VR), but its design focuses on the needs of VR. Those needs include soft real-time responsiveness to enhance the users' suspension of disbelief.</para>
         </section>
      </section>
      <section>
         <title>Distributed Shared Objects (DSO)</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/dso</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>Distributed Shared Objects (DSO) are useful. It provides a simple intuitive interface to share data between applications. The DSO has been engineered with soft real-time requirements in mind and is suitable for collaborative virtual reality applications.</para>
         </section>
      </section>
      <section>
         <title>Tweek</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/tweek</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>Tweek is a cross-platform, cross-language library consisting of a C++ API and a Java API. Its purpose is to provide a convenient mechanism for a Java-based GUI to interact with a complex C++ library or application. The Tweek GUI can be run in virtual environments, external on a palm top, or on the desktop next to a running application. Each of these methods gives a familier 2D widget set that can control applications flexibly. To provide this capability, it uses CORBA.</para>
            <para>The Java code in Tweek includes the Tweek Java API and the Tweek JavaBean loader application. The Java API is provided to make the use of JavaBeans and CORBA simpler for programmers. The JavaBean loader application simply loads the Beans it finds and presents them to the user in some sort of structured manner (for example, a collection of icons with web-style navigation).</para>
         </section>
      </section>
   </section>
   <section>
      <title>VR Juggler 2.0</title>
      <para>TODO... (this is the version number of the next release of Juggler)</para>
   </section>
</article>
