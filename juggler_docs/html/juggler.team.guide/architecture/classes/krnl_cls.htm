<html>

<head>
<title>Kernel</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">


</head>

<body>

<h3>Overview</h3>

<p>See also: <a href="../../class_docs/vjKernel.html">vjKernel</a></p>

<p>Because this class controls all parts of the Juggler system, it must be instantiated
for every Juggler application.&nbsp;&nbsp; The code below demonstrates how the kernel is
used in a sample application.</p>

<blockquote>
  <p><small>&nbsp;&nbsp;&nbsp; // Get the kernel</small><br>
  <small>vjKernel* kernel = vjKernel::<strong>instance</strong>();<br>
  kernel-&gt;<strong>start</strong>();</small><br>
  <br>
  <small>&nbsp;&nbsp;&nbsp; // Declare an instance of the app<br>
  basicApp* application = new basicApp(<strong>kernel</strong>); </small><br>
  <small>kernel-&gt;<strong>setApplication</strong>(application); // Set application<br>
  </small></p>
</blockquote>

<h3>Interface</h3>

<blockquote>
  <h4>&nbsp;int start()</h4>
</blockquote>

<p>This function starts the main kernel loop running in a seperate thread.&nbsp; It should
only be called once in the main function.&nbsp; </p>

<blockquote>
  <h4>void setApplication(vjApp* app)</h4>
</blockquote>

<p>Sets the application that the kernel should run.</p>

<blockquote>
  <h4>vjInputManager* getInputManager()</h4>
</blockquote>

<p>Returns a pointer to the current input manager in the system.&nbsp; The user can then
use this pointer to interact with the input manager in order to get device data. </p>

<blockquote>
  <h4>vjConfigChunkDB* getChunkDB()</h4>
</blockquote>

<p>Returns a pointer to the current chunck database in memory.&nbsp; Users should only
call this to read chunk data specific to their application.</body>
</html>
