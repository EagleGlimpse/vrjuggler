<HTML>
<BODY >

<P></P><A HREF="JavaScript:parent.ItemClicked(1, 0)"> Learning VR Juggler </A><br><ul>
How to write a VR Juggler application.</ul></P>
<P>
<P></P><A HREF="JavaScript:parent.ItemClicked(2, 0)"> Overview </A><br><ul>
<li>Main VR Juggler classes
</ul><ul>
<li>Example Application
</ul><ul>
<li>
</ul><ul>
<li>
</ul><ul>
<li>See Webpage for more info
<ul>
www.icemt.iastate.edu/VRJuggler<BR></ul></ul></P>
<P>
<P></P><A HREF="JavaScript:parent.ItemClicked(3, 0)"> Main VR Juggler Classes </A><br><ul>
<li>vjKernel
<ul>
<li>Main controller in the system
</ul></ul><ul>
<li>
</ul><ul>
<li>vjApp
<ul>
<li>The user application object
</ul></ul><ul>
<li>
</ul><ul>
<li>Input
<ul>
<li>Retrieves input data from devices</ul></ul></P>
<P>
<P></P><A HREF="JavaScript:parent.ItemClicked(4, 0)"> vjKernel </A><br><ul>
<li>Only one instance
</ul><ul>
<li>Handed the application</ul></P>
<P><ul>
	// Get the kernel
</ul><ul>
vjKernel* kernel = vjKernel::instance(); 
</ul><ul>
    // Declare an instance of the app
</ul><ul>
basicApp* application = new basicApp(kernel); 
</ul><ul>
kernel-&#062setApplication(application); // Set application
</ul><ul>
kernel-&#062start();</ul></P>
<P>
<P></P><A HREF="JavaScript:parent.ItemClicked(5, 0)"> vjApp (example) </A><br><ul>
class cubesApp : public vjGlApp
</ul><ul>
{
</ul><ul>
public:
</ul><ul>
   cubesApp(vjKernel* kern) : vjGlApp(kern)
</ul><ul>
	{;}
</ul><ul>

</ul><ul>
   virtual void init();
</ul><ul>
   virtual void apiInit();
</ul><ul>

</ul><ul>
   virtual void contextInit();
</ul><ul>
	virtual void draw();
</ul><ul>

</ul><ul>
   virtual void preDraw();
</ul><ul>
   virtual void postDraw();
</ul><ul>
   virtual void postSync();
</ul><ul>

</ul><ul>
public:
</ul><ul>
   vjPosInterface       mWand;      // the Wand
</ul><ul>
};</ul></P>
<P>
<P></P><A HREF="JavaScript:parent.ItemClicked(6, 0)"> vjApp </A><br><ul>
<li>Is a true object
</ul><ul>
<li>Has function hooks</ul></P>
<P><ul>
app.init();
</ul><ul>
app.apiInit();
</ul><ul>

</ul><ul>
while (drawing)
</ul><ul>
{
</ul><ul>
     app.preDraw();
</ul><ul>
     draw();             // Draw the graphics
</ul><ul>
     app.postDraw();
</ul><ul>
     sync();              // Synchronize Juggler system
</ul><ul>
     app.postSync();
</ul><ul>

</ul><ul>
     UpdateTrackers();
</ul><ul>
}
</ul><ul>

</ul><ul>
app.exit();</ul></P>
<P>
<P></P><A HREF="JavaScript:parent.ItemClicked(7, 0)"> vjGlApp </A><br><ul>
<li>OpenGL extends
</ul><ul>
<li>Has new function hooks
<ul>
<li>void draw()
<li>void contextInit()
<li>void contextPreDraw()</ul></ul></P>
<P>
<P></P><A HREF="JavaScript:parent.ItemClicked(8, 0)"> Context Specific Data </A><br><ul>
<li>OpenGL has rendering contexts
</ul><ul>
<li>Contexts need unique copies of data
<ul>
<li>Display lists, texture objects, etc.
</ul></ul><ul>
<li>Use smart pointers to user data objects</ul></P>
<P><ul>
vjGlContextData&#060UserData&#062  mDlData;       // Data for display lists
</ul><ul>
mDlData-&#062dlNum = 5;
</ul><ul>
(*mDlData).dlNum = 7;</ul></P>
<P>
<P></P><A HREF="JavaScript:parent.ItemClicked(9, 0)"> vjInput </A><br><ul>
<li>Proxies
<ul>
<li>Placeholder for device
<li>Allows device to change at run-time
</ul></ul><ul>
<li>Device Interface
<ul>
<li>Smart pointer to a Proxy
<li>Allows easier interaction in program</ul></ul></P>
<P>
<P></P><A HREF="JavaScript:parent.ItemClicked(10, 0)"> vjInput (example) </A><br><ul>
class wandApp : public vjGlApp
</ul><ul>
{
</ul><ul>
public:
</ul><ul>
      virtual void init()
</ul><ul>
      {
</ul><ul>
           mWand.init("VJWand");
</ul><ul>
      }
</ul><ul>

</ul><ul>
      void myDraw()
</ul><ul>
      {
</ul><ul>
       ...
</ul><ul>
      vjMatrix* wandMatrix;
</ul><ul>
      wandMatrix = mWand-&#062GetData();
</ul><ul>
      ...
</ul><ul>
      }
</ul><ul>
  
</ul><ul>
public:
</ul><ul>
      vjPosInterface mWand; // the Wand
</ul><ul>
};</ul></P>
<P>
</BODY>
</HTML>