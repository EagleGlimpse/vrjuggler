                  Building and Installing the Juggler Project

  The Juggler Team

   $Date$

     ----------------------------------------------------------------------

   Table of Contents

   Introduction

                Important Note for IRIX Users

   Getting the Source Code

                How to get the Juggler Suite and external package
                dependencies

                Acquire third-party packages

   Compiling

                Important Note Regarding Compiling

                Compiling the Juggler Suite of tools

Introduction

   This document explains how to build the modules of the Juggler Project
   from the source code.

  Important Note for IRIX Users

   There are many Perl scripts used as part of getting, configuring, and
   building the Juggler Suite of tools. In particular, two scripts required
   for compiling need Perl 5.005 or newer. The version of Perl that ships
   with IRIX 6.5 is very old (circa 1997) and does not work with many Perl
   scripts we have written. SGI provides a much newer version of Perl (5.6.1)
   with their freeware tools (http://freeware.sgi.com/). It will be necessary
   to install that version for our scripts to work. This version is typically
   installed as /usr/freeware/bin/perl.

   Once you have a modern Perl installed, you can run various Perl scripts as
   follows:

 /usr/freeware/bin/perl <script-name>

   The above will be required any time a Perl script fails with an error
   similar to the following:

 Perl 5.005 required--this is only version 5.00404, stopped at ./configure.pl line 35.
 BEGIN failed--compilation aborted at ./configure.pl line 35.

Getting the Source Code

   This section is for those users who want to get the Juggler source code
   from the CVS repository on SourceForge. Those users who have downloaded a
   pre-packaged version of the source can skip ahead to the section called
   "Configuring and compiling VR Juggler".

   Getting the source code takes a few steps. You have to first download or
   check out Juggler and some external packages such as GMTL, CppDOM, Boost,
   and possibly NSPR. The steps are listed in the following sections. The
   current list of required software packages is as follows:

     o GMTL (http://ggt.sf.net/): A generic math library that makes use of
       C++ templates and STL paradigms

     o CppDOM (http://www.sf.net/projects/xml-cppdom/): A lightweight,
       easy-to-use XML parser written in C++

     o Boost (http://www.boost.org/): A C++ library providing many powerful
       tools

   The following lists semi-optional packages:

     o NSPR (http://www.mozilla.org/projects/nspr/): The Netscape Portable
       Runtime, which can be used by VPR for threading and sockets (required
       on Win32)

     o JDOM (http://www.jdom.org/): An XML parser for Java (required only for
       VjControl, the GUI for editing VR Juggler configuration files)

   The following describes how to get all of the above except JDOM. JDOM must
   be downloaded separately.

  How to get the Juggler Suite and external package dependencies

   You can optionally get Juggler as a source code tarball from the website
   (www.vrjuggler.org) or you can follow these steps to get the code from our
   CVS repository.

   1. Check out the 'juggler' module using CVS.

 cvs -d :pserver:anonymous@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler login
 cvs -z3 -d :pserver:anonymous@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler co juggler

   2. Get external packages that Juggler depends on. Typically you will run
       cvs-gather.pl, found in the top-level juggler directory.

       The syntax will be similar to the following (you may have to edit the
       file Gatherrc, see also the section called "Acquire third-party
       packages"):

 ./cvs-gather.pl --verbose

       You can use the cvs-gather tool, or you can read the file Gatherrc and
       get the packages manually. For more details about this, see the
       section called "Acquire third-party packages".

  Acquire third-party packages

   cvs-gather is a utility we include in the root directory of Juggler to
   help you collect third-party (external) source code that Juggler needs in
   order to build. In short, cvs-gather makes it easier to acquire the
   packages that Juggler needs.

   To get help on using this tool, use one of the following (the second
   version gives much more detailed output):

 ./cvs-gather.pl --help
 ./cvs-gather.pl --manual

   Use of cvs-gather is not required. You can skip cvs-gather if you already
   have the needed packages in your system or if you feel like getting these
   packages manually. cvs-gather is provided primarily for developer
   convenience.

   For a list of these package dependencies, you can look in the file
   Gatherrc to determine what packages you need to download manually.

   For cvs-gather to work, it uses a .gatherrc file. The .gatherrc file is
   used to specify the external project CVS locations. cvs-gather reads these
   CVS locations and then checks each one out locally for Juggler to build.

   The following shows how to run cvs-gather with a .gatherrc file. As of
   this writing, such a file is provide that allows anonymous-only CVS
   access. To use it, enter the following:

 ./cvs-gather.pl --verbose --cfg=deps.gatherrc

   To simplify shared use of a single configuration file, the contents of the
   file may be overridden on the command line or using an "overrides" file.
   The following shows such a file that overrides the CVSROOT settings in
   Gatherrc:

       #JugglerBaseStuff.CVSROOT=patrickh@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler
       Doozer.CVSROOT = patrickh@cvs.doozer.sourceforge.net:/cvsroot/doozer
       Doozer++.CVSROOT = patrickh@cvs.doozer.sourceforge.net:/cvsroot/doozer
       GMTL.CVSROOT = patrickh@cvs.ggt.sourceforge.net:/cvsroot/ggt                 

   The current Gatherrc only allows anonymous CVS access. To override that,
   we suggest making per-user override files. To use the override file, just
   add the argument --override=<filename> when running cvs-gather.

   The following shows how to run cvs-gather with your own overrides file
   (called my_gatheroverride):

 cvs-gather.pl --override=my_gatheroverride

   If all goes well, you'll get everything you need to compile.

Compiling

   In this section, we describe how to compile the Juggler project. As of
   this writing, the explanation focuses on VR Juggler as a whole.

  Important Note Regarding Compiling

   Please note: you have downloaded developmental code. It may not be stable,
   and it may not even compile. Compiling Juggler itself can be a little
   complicated for anyone who does not have some background in Autoconf, C++,
   and make.

  Compiling the Juggler Suite of tools

   This section explains how to get, configure, and compile all of the tools
   that make up VR Juggler at once. Each tool compiles to its own library and
   can be installed individually. (Refer to the README file in this directory
   for more information about the specific modules.)

    Configuring and compiling VR Juggler

   Every time you have newly updated source code acquired from CVS or
   cvs-gather, it is recommended that you run autogen.sh, found in the
   top-level juggler directory:

 ./autogen.sh

   Also in this directory, we have a "global" configure script written in
   Perl rather than Autoconf. It is called configure.pl. To get options for
   this script, use one of the following (the second being much more
   detailed):

 ./configure.pl --help
 ./configure.pl --manual

   To configure your system, you'll need to see what options all the
   Autoconf-based configure scripts in Juggler need. To get this text, enter:

 ./configure.pl --all-help

   configure.pl works in a different "build" directory or in the directory
   where it resides. Here is how we (the team) have been using it:

   1. Make a directory for compiling. There are many good reasons to do this
       away from the main source tree.

 mkdir build.linux.posix

       This example using an ad hoc naming convention based on operating
       system and threading subsystem. Other examples could be
       build.irix.sproc, build.solaris.nspr, etc.

   2. Enter the new build directory.

 cd build.linux.posix

   3. Configure all the modules making up VR Juggler. This is when you must
       tell the module configure scripts where all the package dependencies
       are found. For this description, we will use the term <JUGGLER PATH>
       to refer to the base of the Juggler Project source tree and <JDOMPATH>
       to refer to the JDOM installation. Assume that both of these are
       absolute paths (e.g., <JUGGLERPATH> = /home/user1/Source/juggler).

 ../configure.pl --prefix=$HOME/vrjuggler-2.0 --with-cppdom=<JUGGLERPATH>/external/cppdom --with-jdom="<JDOMPATH>/build/jdom.jar:<JDOMPATH>/lib/xerces.jar"

   4. Compile the source tree using GNU make.

 gmake build

   Once this completes, you will have a full build of VR Juggler. For those
   who are not interested in developing VR Juggler or its component modules,
   it is recommended that you install the software and use the installed
   version for application development. Do this as follows:

 gmake install

    Compiling individual tools in the Juggler Suite

   Sometimes you do not want to build everything in the Juggler Suite. Here
   are steps for configuring/building each package individually.

      VPR (individual)

   VPR can be configured a number of ways. Except when building on Win32, no
   external packages are required. For Win32, NSPR (www.mozilla.org) is
   required. To build VPR, do the following from the top-level juggler
   directory:

   1. mkdir build.vpr
 cd build.vpr

   2. ../configure.pl --module=VPR --prefix=$HOME/vpr-inst

   3. gmake debug install

   4. setenv VPR_BASE_DIR $HOME/vpr-inst

   If you want to use NSPR, make sure a binary version is installed. In step
   2, add the arguments --enable-subsystem=NSPR and --with-nspr=<path to
   NSPR>. Once that is done, proceed with steps 3 and 4 as normal.

      Sonix (individual)

   Sonix requires a third-party software package called GMTL (ggt.sf.net).
   Sonix wraps other audio subsystems such as OpenAL (www.openal.org) or
   AudioWorks (multigen.com). One of these subsystems are required in order
   to hear sound. Once you have all the necessary source code and third-party
   package installations, to the following from the top-level juggler
   directory:

   1. mkdir build.sonix
 cd build.sonix

   2. Choose one of the following depending on which subsystem (or both) you
       want to enable in sonix...

 ../configure.pl --module=Sonix --prefix=$HOME/sonix-inst --enable-openal --with-oalroot=/usr/local
 ../configure.pl --module=Sonix --prefix=$HOME/sonix-inst --enable-audioworks

   3. gmake debug install

   4. setenv SNX_BASE_DIR $HOME/sonix-inst

      JCCL (individual)

   JCCL requires VPR, CppDOM (http://www.sf.net/projects/xml-cppdom/), and
   JDOM B7 or newer (http://www.jdom.org/). To build JCCL, do the following
   from the top-level juggler directory:

   1. mkdir build.jccl
 cd build.jccl

   2. ../configure.pl --module=JCCL --prefix=$HOME/jccl-inst --with-cppdom=<JUGGLERPATH>/external/cppdom --with-jdom="<JDOMPATH>/build/jdom.jar:<JDOMPATH>/lib/xerces.jar"

   3. gmake debug install

   4. setenv JCCL_BASE_DIR $HOME/jccl-inst

      Gadgeteer (individual)

   Gadgeteer depends on JCCL and on VPR. It also needs the third-party math
   library GMTL (http://ggt.sf.net/). Assuming you have all the source code,
   do the following from the top-level juggler directory:

   1. mkdir build.gadgeteer
 cd build.gadgeteer

   2. ../configure.pl --module=Gadgeteer --prefix=$HOME/gadgeteer-inst --with-cppdom=<JUGGLERPATH>/external/cppdom --with-jdom="<JDOMPATH>/build/jdom.jar:<JDOM PATH>/lib/xerces.jar"

   3. gmake debug install

   4. setenv GADGET_BASE_DIR $HOME/gadgeteer-inst

      Tweek (individual)

   Tweek depends on VPR. It needs JDK 1.3.1, JDOM B7 or newer, and the
   third-party CORBA implementations omniORB 3.0.4 (C++) and OpenORB 1.2.0
   (Java). These packages can be downloaded from the following websites:

     o JDOM: http://www.jdom.org/

     o omniORB: http://www.omniorb.org/

     o OpenORB: http://www.openorb.org/

   For the following steps, assume that you have omniORB installed in
   <OMNIORBPATH>, OpenORB is installed in <OPENORBPATH>, and JDOM is
   installed in <JDOMPATH>.

   Assuming you have the external packages installed, do the following from
   the top-level juggler directory:

   1. mkdir build.tweek
 cd build.tweek

   2. ../configure.pl --module=Tweek --prefix=$HOME/tweek-inst --with-jdom=<JDOMPATH>/jdom.jar:<JDOMPATH>/xerces.jar --with-cxx-orb=omniORB3 --with-cxx-orb-root=<OMNIORBPATH> --with-java-orb=OpenORB --with-java-orb-jar=<OPENORBPATH>/lib/openorb-1.2.0.jar

   3. gmake debug install

   4. setenv TWEEK_BASE_DIR $HOME/tweek-inst

   If JDK 1.4.0 is used, you do not need OpenORB (or any other third-party
   CORBA implementation for Java). In that case, pass --with-java-orb=JDK to
   configure.pl.

   Depending on your omniORB installation, you may have to pass extra
   arguments to configure.pl so that the configuration process can find the
   omniidl binary and the omniORB libraries. For example, on RedHat Linux
   7.2, the following arguments must be specified in addition to the above:

 --with-cxx-orb-bin=<OMNIORBPATH>/bin/i586_linux_2.0_glibc --with-cxx-orb-lib=<OMNIORBPATH>/lib/i586_linux_2.0_glibc
