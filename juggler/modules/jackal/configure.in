# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998, 1999, 2000 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Base configure.in for Juggler App Control & Configuration Library (Jackal).
# -----------------------------------------------------------------------------
# This file is "compiled" by GNU autoconf to generate the configure script
# that is actually run.
# -----------------------------------------------------------------------------

AC_REVISION($Revision$)
AC_INIT(jccl/jcclConfig.h)
AC_CONFIG_HEADER(jccl/jcclDefines.h)
DPP_PREREQ(1.4)
DPP_INIT

# Generate the reconfig script first so that it's easy to run configure again
# if it fails later on.
DPP_GEN_RECONFIG

# -----------------------------------------------------------------------------
# Command-line arguments (--enable-option, --with-pkg=package_name).
# -----------------------------------------------------------------------------

# ------------------------------------------------------ #
# --enable-feature[=arg] and --disable-feature arguments #
# ------------------------------------------------------ #

DPP_STD_CPP(yes)


# Enable performance testing.  Values that enable it are as follows:
#
#      SGI: Enable SGI IPC performance testing.  This defines VJ_PERFORMANCE to
#           be VJ_PERF_SGI
#    POSIX: Enable POSIX threads performance testing.  This defines
#           VJ_PERFORMANCE to be VJ_PERF_POSIX
#
# Values that disable it are "no" or "NONE".  The default is "SGI".
AC_ARG_ENABLE(performance,
              [  --enable-performance=<SGI|POSIX|NONE>
                          enable performance testing      [default=SGI] ],
              [ if test "x$enableval" = "xyes" ; then
                    _enable_perf='SGI'
                elif test "x$enableval" = "xno" ; then
                    _enable_perf='NONE'
                else
                    _enable_perf="$enableval"
                fi
              ], _enable_perf='SGI')

# -------------------------------------------- #
# --with-pkg[=arg] and --without-pkg arguments #
# -------------------------------------------- #

# Force the use of GCC as the compiler.
# NOTE: This is not fully implemented yet for any platform, but it is partially
# usable on Windows.
DPP_WITH_GCC(no)

# Define the root directory for the Xerces-c installation.
AC_ARG_WITH(xercesroot,
            [  --with-xercesroot=<PATH>
                          Xerces-c installation directory [default=/usr]],
            XERCESROOT="$withval", XERCESROOT="/usr")

AC_ARG_WITH(xerceslib,
            [  --with-xerceslib=<NAME>
                          Xerces-c base library name      [default=xerces-c]],
            XERCES_LIB="$withval", XERCES_LIB='xerces-c')

# Define the binary format.
DPP_ABI_SETUP

# -----------------------------------------------------------------------------
# System-dependent stuff.
# -----------------------------------------------------------------------------
DPP_WIN32_SETUP

# We use AC_CANONICAL SYSTEM so that we can find out information about the
# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP

# These are used on all platforms.
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE, "$OS_REL_STR")
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MAJOR, $OS_REL_NUM_MAJOR)
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MINOR, $OS_REL_NUM_MINOR)

# Depending on the target operating system, set various command options and
# such.
case $target_os in
    # SGI running IRIX 6.*.
    irix6*)
        DBG_FLAGS="$DBG_FLAGS -gslim"

        AC_DEFINE(VJ_OS_IRIX,)
        AC_DEFINE(_BSD_TYPES,)
        ;;
    # HP PA-RISC machine running HP-UX 10.20.
    hpux10.20)
        AC_DEFINE(VJ_OS_HPUX,)
        AC_DEFINE(VJ_HPUX_VERSION, 10)
        AC_DEFINE(_INCLUDE_TERMIO,)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        ;;
    # HP PA-RISC machine running HP-UX 11.x.
    hpux11*)
        AC_DEFINE(VJ_OS_HPUX,)
        AC_DEFINE(VJ_HPUX_VERSION, 11)
        AC_DEFINE(_INCLUDE_TERMIO,)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        ;;
    # DEC Alpha running Digital UNIX 4.0.
    osf4.0)
        AC_DEFINE(VJ_OS_DUX,)
        ;;
    # A machine running FreeBSD.  Currently only i386 is known to compile.
    freebsd*)
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        AC_DEFINE(VJ_OS_FreeBSD,)
        ;;
    # A machine running Linux.  Currently only i386 is known to work.
    linux*)
        # CXXFLAGS="-fhonor-std -Wall -Werror-implicit-function-declaration $CXXFLAGS"
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        AC_DEFINE(VJ_OS_Linux,)
        ;;
    # A machine running Solaris (aka SunOS).  Currently only i386 is known to
    # work.
    solaris*)
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        AC_DEFINE(VJ_OS_Solaris,)
        ;;
    # IBM RS/6000 running AIX.
    aix*)
        AC_DEFINE(VJ_OS_AIX)
        ;;
    # i386-class machine running Windows {98,NT} with Cygnus GNU-Win32.
    cygwin)
        # There is no performance testing/monitoring code for Win32 (yet).
        if test "x${_enable_perf}" != "xNONE" ; then
            AC_MSG_WARN(*** Disabling performance testing on $host ***)
            _enable_perf='NONE'
        fi

        AC_DEFINE(VJ_OS_Win32,)
        ;;
    darwin1.*)
        AC_DEFINE(VJ_OS_Darwin,)
        AC_DEFINE(_BSD_TYPES,) 
        ;;
    # Unkown operating system (to config.guess).
    unknown)
        AC_DEFINE(VJ_OS_GENERIC,)
        ;;
esac

# --------------------------------------------------------------------
# Depending on host type and the value in ${_enable_perf}, define the
# settings for the performance code.
# --------------------------------------------------------------------
if test "$PLATFORM" != "IRIX" -a "${_enable_perf}" != "NONE" ; then
    _enable_perf='POSIX'
fi

# Define unique values for each type of performance testing option.
# Only one of these may be used for the value to which VJ_PERFORMANCE is set.
AC_DEFINE(VJ_PERF_NONE, 0)
AC_DEFINE(VJ_PERF_SGI, 1)
AC_DEFINE(VJ_PERF_POSIX, 2)

# Define VJ_PERFORMANCE based on ${_enable_perf}.  Default to VJ_PERF_SGI if
# ${_enable_perf} has some unknown value.
if test "x${_enable_perf}" = "xSGI" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
elif test "x${_enable_perf}" = "xPOSIX" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_POSIX)
elif test "x${_enable_perf}" = "xNONE" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_NONE)
else
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
fi

# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP

# Ensure that the C++ compiler we've found is capable of compiling the newer
# newer C++ features that we need.
DPP_CXX_NAMESPACE(AC_MSG_ERROR(*** The library requires C++ namesapce support ***))
DPP_CXX_HAVE_STD
DPP_CXX_INLINE(AC_MSG_ERROR(*** The library requires C++ inline support ***))
DPP_CXX_RTTI(AC_MSG_ERROR(*** The library requires C++ RTTI support ***))
DPP_CXX_STATIC_CAST(AC_MSG_ERROR(*** The library requires C++ static_cast<> ***))

# Check for the JDK.
DPP_PATH_JAVA

# If there is still no value in $JAVAC, then warn that the GUI will not be
# built.
if test "x$JAVAC" = "xno" ; then
    AC_MSG_WARN(*** VjControl requires javac -- it will not be built ***)
    BUILD_VJCONTROL='N'
else
    # Check for JAXP extensions to JDK
    DPP_CHECK_JAVA_STATIC_METHOD(javax.xml.parsers.DocumentBuilderFactory,
        newInstance(), ,
        BUILD_VJCONTROL='Y',
        [ BUILD_VJCONTROL='N' ;
          AC_MSG_WARN(*** VjControl requires JAXP extensions for java -- it will not be built ***) ])
fi

# Ensure that a version of Perl greater than or equal to 5.004 is available.
DPP_PERL_VER(5.004)

AC_CHECK_PROG(MTREE_CMD, mtree, mtree, \$(PERL) \$(scriptdir)/mtree.pl)

DPP_BASIC_PROGS($PLATFORM, $OS_TYPE)

# -----------------------------------------------------------------------------
# Checks for libraries.
# -----------------------------------------------------------------------------
VPR_PATH(0.4.0, , AC_MSG_ERROR(*** VPR required for Jackal***))
# need SUBSYSTEM for makever in Makefile.inc.in
vpr_subsystem=`$VPR_CONFIG --subsystem`
SUBSYSTEM="$vpr_subsystem"


# -----------
# Xerces-c
# -----------
_vjsave_CFLAGS="$CFLAGS"
_vjsave_CPPFLAGS="$CPPFLAGS"
_vjsave_INCLUDES="$INCLUDES"
_vjsave_LDFLAGS="$LDFLAGS"
_vjsave_LIBS="$LIBS"

# Ensure that /usr/include and /usr/lib are not included multiple times
# if XERCESROOT is "/usr".
if test "x$XERCESROOT" != "x/usr" ; then
    CPPFLAGS="-I$XERCESROOT/include $CPPFLAGS"
    INCLUDES="-I$XERCESROOT/include $INCLUDES"
    LDFLAGS="-L$XERCESROOT/lib$LIBBITSUF $LDFLAGS"
fi

CFLAGS="$CFLAGS $INCLUDES ${_EXTRA_FLAGS}"
LDFLAGS="$LDFLAGS $X_LDFLAGS"
LIBS="$LIBS -l$XERCES_LIB `$VPR_CONFIG --extra-libs`"

DPP_LANG_SAVE
DPP_LANG_CPLUSPLUS

AC_CHECK_HEADER(util/XercesDefs.hpp, ,
    AC_MSG_ERROR(*** Xerces-C headers not found ***))

# Extract the full Xerces version number and transform it into the form x.y.z.
changequote(<<, >>)
xerces_ver_str=`grep gXercesFullVersionStr $XERCESROOT/include/util/XercesDefs.hpp | sed -e 's/.*"\([1-9][0-9_]*\)".*/\1/' | sed -e 's/_/./g'`
changequote([, ])

DPP_VERSION_CHECK_MSG(Xerces C++, $xerces_ver_str, 1.5.1,
                      acp_cv_xerces_c_version_okay, ,
                      AC_MSG_ERROR(*** Xerces-C version too old ***))

# Finally, check that the library actually exists where we expect it to be.
AC_CACHE_CHECK(for XMLPlatformUtils::Initialize in $XERCES_LIB,
    ac_cv_initialize_in_xerces_c,
    AC_TRY_LINK([#include <util/PlatformUtils.hpp> ],
                [ XMLPlatformUtils::Initialize(); ],
                [ ac_cv_initialize_in_xerces_c='yes' ; rm -rf ./ii_files ],
                AC_MSG_ERROR(*** Xerces-C library not found ***)))

DPP_LANG_RESTORE

XERCES_INCLUDES="-I$XERCESROOT/include"

if test "x$OS_TYPE" = "xWin32" ; then
    XERCES_LDFLAGS="-libpath:$XERCESROOT/lib"
else
    XERCES_LDFLAGS="-L$XERCESROOT/lib$LIBBITSUF"
fi

CFLAGS="${_vjsave_CFLAGS}"
CPPFLAGS="${_vjsave_CPPFLAGS}"
INCLUDES="${_vjsave_INCLUDES}"
LDFLAGS="${_vjsave_LDFLAGS}"
LIBS="${_vjsave_LIBS}"

# -----------------------------------------------------------------------------
# Checks for header files.
# -----------------------------------------------------------------------------
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h sys/ioctl.h	\
                 sys/time.h termios.h unistd.h sys/z8530.h		\
                 sys/capability.h sys/stdsyms.h)

# -----------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
# -----------------------------------------------------------------------------
AC_TYPE_PID_T
AC_TYPE_SIZE_T

# The following checks for availability of the socklen_t type.  Since it is
# supposed to be defined in sys/socket.h, the usual AC_CHECK_TYPE method will
# not work.
AC_CACHE_CHECK(for socklen_t, ac_cv_has_socklen_t,
    AC_TRY_COMPILE([#include <sys/types.h>
                    #include<sys/socket.h> ],
                   [ socklen_t var; ],
                   ac_cv_has_socklen_t='yes',
                   ac_cv_has_socklen_t='no'))

if test "x$ac_cv_has_socklen_t" = "xno" ; then
    AC_DEFINE(socklen_t, int)
fi

DPP_CHECK_TYPE_POSIX

# -----------------------------------------------------------------------------
# Checks for library functions.
# -----------------------------------------------------------------------------
AC_CHECK_FUNCS(gettimeofday socket strcasecmp strdup strerror strtod strtok_r)

# All of the above function checks may not be necessary ...

_vjsave_LIBS="$LIBS"
AC_CHECK_FUNC(gethostbyname, SOCKET_LIB='',
    AC_CHECK_LIB(socket, gethostbyname, SOCKET_LIB='-lsocket'))
LIBS="${_vjsave_LIBS}"

# Ensure that we have sched_yield(3).  On Solaris, sched_yield(3) and its
# synchronization friends are in libposix4.
_vjsave_LIBS="$LIBS"
AC_CHECK_FUNC(sched_yield, AC_DEFINE(HAVE_SCHED_YIELD),
              AC_CHECK_LIB(posix4, sched_yield,
                  [ _sched_lib='-lposix4' ; AC_DEFINE(HAVE_SCHED_YIELD) ]))
LIBS="${_vjsave_LIBS}"

# In a Win32 environment with MS Visual C++ as the compiler, these math
# functions are not in any special library.  Test for them normally.
#if test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
#    AC_CHECK_FUNCS(sinf cosf sqrtf asinf acosf atan2f fabsf)
# Otherwise, they are in libmath if they are anywhere.
#else
#    AC_CHECK_LIB(m, sinf, AC_DEFINE(HAVE_SINF))
#    AC_CHECK_LIB(m, cosf, AC_DEFINE(HAVE_COSF))
#    AC_CHECK_LIB(m, sqrtf, AC_DEFINE(HAVE_SQRTF))
#    AC_CHECK_LIB(m, asinf, AC_DEFINE(HAVE_ASINF))
#    AC_CHECK_LIB(m, acosf, AC_DEFINE(HAVE_ACOSF))
#    AC_CHECK_LIB(m, atan2f, AC_DEFINE(HAVE_ATAN2F))
#    AC_CHECK_LIB(m, fabsf, AC_DEFINE(HAVE_FABSF))
#fi

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------

DPP_INSTALLER(vrjuggler, 0644, 0755, 0755)

# -----------------------------------------------------------------------------
# Do Makefile substitutions.
# -----------------------------------------------------------------------------
if test "x$XERCES_INCLUDES" != "x" ; then
    INCLUDES="$INCLUDES $XERCES_INCLUDES"
fi

CXXFLAGS="$CXXFLAGS $VPR_CXXFLAGS"
EXTRA_LINK_FLAGS="$STDFLAGS $EXTRA_LINK_FLAGS"

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" = "xno" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 3322 -w2"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -J4 -all"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    CXXFLAGS="$CXXFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS /nologo /incremental:no"
    DBG_FLAGS="$DBG_FLAGS /MTd"
    OPT_FLAGS="$OPT_FLAGS /MT"
fi

DPP_SYSTEM_SUBST

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

# $srcdir is the root directory of the juggler source tree.  To get a value for
# $VJROOT_ABS, we cd there and save the value of running pwd.  Then return to
# the directory where configure is being run ($topdir).
cd "$srcdir"
JCCLROOT_ABS=`pwd`
cd "$JCCLROOT_ABS/../.."
JUGGLERROOT_ABS=`pwd`
cd "$topdir"

# Define the base path to the source directory using $(JCCLROOT_ABS) as an
# alternative to using $(srcdir).
UNIX_JCCLROOT_ABS="$JCCLROOT_ABS"
UNIX_JUGGLERROOT_ABS="$JUGGLERROOT_ABS"

if test "x$OS_TYPE" = "xWin32" ; then
    APP_EXTRA_LIBS="$LDFLAGS $VPR_LIBS $LIBS $XERCES_LDFLAGS $XERCES_LIB.lib ws2_32.lib"
else
    APP_EXTRA_LIBS="$LDFLAGS $VPR_LIBS $XERCES_LDFLAGS -l$XERCES_LIB $LIBS $DTK_LDFLAGS -lm"
fi

# Variables set in Makefiles found in the application trees.  All variables
# listed are for use only in the Makefile.in's found in that tree unless
# otherwise noted.  They are used in the following way:
#
#     * APP_VJ_LIBS_UTILS: The VR Juggler general utilities library.

# Put together the basic information needed to compile Jackal applications.
VJ_APP_COMPILER($CC, $CFLAGS, $CXX, $CXXFLAGS, $DBG_FLAGS, $OPT_FLAGS,
                JCCL_BASE_DIR, $DEFS, $INCLUDES, ${_EXTRA_FLAGS})
VJ_APP_LINKER($CXX, $EXTRA_LINK_FLAGS, $LDOPTS_DBG, $LDOPTS_OPT, JCCL_BASE_DIR,
              jccl, $APP_EXTRA_LIBS)

APP_BASE_DIR='$(topdir)/instlinks'
APP_BASE_DIR_INST='$(JCCL_BASE_DIR)'

if test "$OS_TYPE" = "UNIX" ; then
    DYLIB_DEPS_JCCL="$APP_EXTRA_LIBS"
elif test "$OS_TYPE" = "Win32" ; then
    DYLIB_DEPS_BASIC="$APP_EXTRA_LIBS"
#    DYLIB_DEPS_JCCL="-libpath:\$(LIBDIR) jccl.lib $DYLIB_DEPS_BASIC"
     DYLIB_DEPS_JCCL="$DYLIB_DEPS_BASIC"
#    DYLIB_DEPS_UTILS="$DYLIB_DEPS_BASIC"
#    DYLIB_DEPS_GL="-libpath:\$(LIBDIR) Juggler.lib Juggler_utils.lib $DYLIB_DEPS_BASIC $OGL_LDFLAGS $LIBOPENGL"

fi


# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    JCCLROOT_ABS=`unix2dos -p "$JCCLROOT_ABS"`
    JUGGLERROOT_ABS=`unix2dos -p "$JUGGLERROOT_ABS"`

    DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    INCLUDES=`unix2dos "$INCLUDES"`
    LIBS=`unix2dos "$LIBS"`
    LN_S='cp'
    MTREE_CMD=`unix2dos "$MTREE_CMD"`
    JDK_HOME=`unix2dos -p "$JDK_HOME"`

    APP_EXTRA_LIBS=`unix2dos "$APP_EXTRA_LIBS"`
else
    JCCLROOT_ABS="$JCCLROOT_ABS"
    JUGGLERROOT_ABS="$JUGGLERROOT_ABS"
fi

# Set up some sed expressions that will help separate the share directory from
# the full installation prefix.
if test "x$prefix" = "xNONE" ; then
    _prefix_exp="s|^$ac_default_prefix/||"
else
    _prefix_exp="s|^$prefix/||"
fi

# Make a best-effort attempt to extract the actual share directory from the
# full installation prefix.  This is not foolproof, but it will work in almost
# all cases.  A person would have to be doing something malicious or foolish
# to make it break.
JCCL_SHARE_DIR=`echo "$datadir" | sed -e 's|^${prefix}/||'`
JCCL_SHARE_DIR=`echo "$JCCL_SHARE_DIR" | sed -e "${_prefix_exp}"`

# Information needed to generate juggler-config.
case $OS_TYPE in
    UNIX)
        if test "x$GXX" = "xyes" ; then
            static_begin="-Wl,-Bstatic"
            static_end="-Wl,-Bdynamic"
        else
            static_begin="-B static"
            static_end="-B dynamic"
        fi

        jccl_ldflags="-L\$prefix/lib$LIBBITSUF"
        jccl_libs='-ljccl'
        jccl_lib='-ljccl'

        ;;
    WIN32)
        jccl_ldflags="/link /libpath:\$prefix/lib/debug "
        jccl_libs='jccl.lib'
        jccl_lib='jccl.lib'

        ;;
esac

jccl_extra_ldflags="$APP_EXTRA_LIBS_BEGIN"
jccl_extra_libs="$APP_EXTRA_LIBS $APP_EXTRA_LIBS_END"

DPP_SUBST


AC_SUBST(topdir)
AC_SUBST(UNIX_JCCLROOT_ABS)
AC_SUBST(UNIX_JUGGLERROOT_ABS)
AC_SUBST(JCCLROOT_ABS)
AC_SUBST(JUGGLERROOT_ABS)
AC_SUBST(JCCL_SHARE_DIR)

AC_SUBST(EXTRA_LINK_FLAGS)

AC_SUBST(BUILD_VJCONTROL)

AC_SUBST(XERCESROOT)

AC_SUBST(APP_BASE_DIR)
AC_SUBST(APP_BASE_DIR_INST)

AC_SUBST(DYLIB_DEPS_JCCL)

AC_SUBST(APP_BASIC_LIBS)
AC_SUBST(APP_EXTRA_LIBS)

AC_SUBST(subsystem_cxxflags)
AC_SUBST(subsystem_libs)
AC_SUBST(static_begin)
AC_SUBST(static_end)
AC_SUBST(jccl_ldflags)
AC_SUBST(jccl_libs)
AC_SUBST(jccl_lib)
AC_SUBST(jccl_extra_ldflags)
AC_SUBST(jccl_extra_libs)

# -----------------------------------------------------------------------------
# Final file generation step.
# -----------------------------------------------------------------------------

VJ_MTREE_LIB_GEN(JCCL, mtree, $PLATFORM, $ISA)

AC_OUTPUT(Makefile
          Makefile.inc
          common.defs.mk
          make.defs.mk
          jccl/Makefile
          jccl/Config/Makefile
          jccl/XMLUtil/Makefile
          jccl/JackalServer/Makefile
          jccl/Plugins/Makefile
          jccl/Plugins/ConfigManager/Makefile
          jccl/Plugins/PerformanceMonitor/Makefile
          jccl/Util/Makefile
          VjControl/Makefile
          samples/Makefile
          samples/vjcontrol/Makefile
          samples/vjcontrol/AudioPlayer/Makefile
          samples/vjcontrol/DisplayWindowEditor/Makefile
          samples/vjcontrol/PlxViewComponent/Makefile
          samples/jccl/Makefile
          samples/jccl/serverdemo/Makefile
          mtree/JCCL.data.dist
          mtree/JCCL.include.dist
          mtree/JCCL.install.dist
          mtree/JCCL.samples.dist
          mtree/JCCL.test.dist
          mtree/JCCL.tools.dist
          VARS.pl)

cat <<BUILD_INFO

 Remember that you need to build Jackal with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the Jackal distribution.

BUILD_INFO
