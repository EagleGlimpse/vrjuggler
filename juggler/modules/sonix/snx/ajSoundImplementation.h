/* Generated by Together */

#ifndef AJSOUNDIMPLEMENTATION_H
#define AJSOUNDIMPLEMENTATION_H
#include "ajSoundInfo.h"

class ajSoundImplementation
{
public:
   /**
    * @semantics default constructor 
    */
   ajSoundImplementation() {}

   /**
    * copies current state of the system from one API to another.
    * @semantics copy constructor
    */
   ajSoundImplementation( const ajSoundImplementation& si )
   {
      this->copy( si );
   }

   /**
    * @semantics destructor 
    */
   virtual ~ajSoundImplementation()
   {
      // make sure the API has gracefully exited.
      this->killAPI();
   }

   /**
    * copies current state of the system from one API to another. 
    */
   void copy( const ajSoundImplementation & si )
   {
      mSounds = si.mSounds;
      this->reload();
   }

   /**
    * copies current state of the system from one API to another. 
    */
   ajSoundImplementation& operator=( ajSoundImplementation& si )
   {
      this->copy( si );
      return *this;
   }

public:

   /**
    * @input alias of the sound to trigger, and number of times to play
    * @preconditions alias does not have to be associated with a loaded sound.
    * @postconditions if it is, then the loaded sound is triggered.  if it isn't then nothing happens.
    * @semantics Triggers a sound
    */
   virtual void trigger( const std::string & alias, const unsigned int & repeat = -1 )
   {
      // todo: capture this in a soundinfo::play func
      this->lookup( alias ).isPlaying = true;
      this->lookup( alias ).repeat = repeat;
      this->lookup( alias ).repeat_countdown = repeat;
   }

   ajSoundInfo& lookup( const std::string& alias )
   {
      return mSounds[alias];
   }

   /**
    * @semantics stop the sound
    * @input alias of the sound to be stopped
    */
   virtual void stop(const std::string & name)
   {
      this->lookup( alias ).isPlaying = false;
      this->lookup( alias ).repeat_countdown = 0;
   }

   /**
    * @semantics call once per sound frame (doesn't have to be same as your graphics frame)
    * @input time elapsed since last frame
    */
   virtual void step(const float & timeElapsed) = 0;


   /**
    * associate a name (alias) to the description
    * @preconditions provide an alias and a SoundInfo which describes the sound
    * @postconditions alias will point to loaded sound data
    * @semantics associate an alias to sound data.  later this alias can be used to operate on this sound data.
    */
   virtual void associate( const std::string& alias, const ajSoundInfo& description )
   {
      mSounds[alias] = description;
      this->_bind( alias );
   }

   /**
    * remove alias->sounddata association 
    */
   virtual void remove( const std::string alias )
   {
      this->_unbind( alias );
      mSounds.remove( alias );
   }

   /**
    * set sound's 3D position 
    */
   virtual void setPosition( const std::string& alias, float x, float y, float z )
   {
      this->lookup( alias ).position[0] = x;
      this->lookup( alias ).position[1] = y;
      this->lookup( alias ).position[2] = z;
   }

   /**
    * get sound's 3D position
    * @input alias is a name that has been associate()d with some sound data
    * @output x,y,z are returned in OpenGL coordinates.
    */
   virtual void getPosition( const std::string& alias, float& x, float& y, float& z )
   {
      x = this->lookup( alias ).position[0];
      y = this->lookup( alias ).position[1];
      z = this->lookup( alias ).position[2];
   }

protected:
   /**
    * start the sound API, creating any contexts or other configurations at startup
    * @postconditions sound API is ready to go.
    * @semantics this function should be called before using the other functions in the class.
    */
   virtual void startAPI() = 0;

   /**
    * kill the sound API, deallocating any sounds, etc...
    * @postconditions sound API is ready to go.
    * @semantics this function could be called any time, the function could be called multiple times, so it should be smart.
    */
   virtual void shutdownAPI() = 0;

   /**
    * clear all associate()tions.
    * @semantics any existing aliases will be stubbed. aounds will be unbind()ed
    */
   virtual void clear() = 0;

private:
   
   /**
    * bind: load (or reload) all associate()d sounds
    * @postconditions all sound associations are buffered by the sound API
    */
   virtual void _bind() = 0;

   /**
    * unbind: unload/deallocate all associate()d sounds.
    * @postconditions all sound associations are unbuffered by the sound API
    */
   virtual void _unbind() = 0;

   /**
    * load/allocate the sound data this alias refers to the sound API
    * @postconditions the sound API has the sound buffered.
    */
   virtual void _bind( const std::string& alias ) = 0;

   /**
    * unload/deallocate the sound data this alias refers from the sound API
    * @postconditions the sound API no longer has the sound buffered.
    */
   virtual void _unbind( const std::string& alias ) = 0;

   std::map<std::string, SoundInfo> mSounds;

   /** This class uses a std::map of sound infos for alias lookup
    * @link aggregation
    * @clientCardinality 1
    * @supplierCardinality 0..**/
   ajSoundInfo lnkSoundInfo_not_used_see_one_above;
};
#endif //AJSOUNDIMPLEMENTATION_H