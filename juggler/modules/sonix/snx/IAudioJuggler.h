/* Generated by Together */

#ifndef IAUDIOJUGGLER_H
#define IAUDIOJUGGLER_H
#include "ajSoundFactory.h"
#include "ajSoundImplementation.h"
#include "ajSoundInfo.h"

/** @interface*/
class IAudioJuggler
{
public:

   IAudioJuggler() {}

   virtual ~IAudioJuggler() {}

   /**
    * @input alias of the sound to trigger, and number of times to play
    * @preconditions alias does not have to be associated with a loaded sound.
    * @postconditions if it is, then the loaded sound is triggered.  if it isn't then nothing happens.
    * @semantics Triggers a sound
    */
   virtual void trigger(const std::string & alias, const unsigned int & repeat = -1) = 0;

   /**
    * @semantics stop the sound
    * @input alias of the sound to be stopped
    */
   virtual void stop(const std::string & name) = 0;

   /**
    * @semantics call once per sound frame (doesn't have to be same as your graphics frame)
    * @input time elapsed since last frame
    */
   virtual void step( const float& timeElapsed ) = 0;

   /**
    * associate a name (alias) to the description
    * @preconditions provide an alias and a SoundInfo which describes the sound
    * @postconditions alias will point to loaded sound data
    * @semantics associate an alias to sound data.  later this alias can be used to operate on this sound data.
    */
   virtual void associate( const std::string& alias, const ajSoundInfo& description ) = 0;

   /**
    * remove alias->sounddata association 
    */
   virtual void remove(const std::string alias) = 0;

   /**
    * set sound's 3D position 
    * @input x,y,z are in OpenGL coordinates.  alias is a name that has been associate()d with some sound data
    */
   virtual void setPosition( const std::string& alias, const float& x, const float& y, const float& z ) = 0;

   /**
    * get sound's 3D position
    * @input alias is a name that has been associate()d with some sound data
    * @output x,y,z are returned in OpenGL coordinates.
    */
   virtual void getPosition( const std::string& alias, float& x, float& y, float& z ) = 0;

   // TODO: do i need observer?
   //virtual void setObserverPosition( float x, float y, float z ) = 0;

   virtual void changeAPI( const std::string& apiName, bool& result ) = 0;

public:

   /** @link dependency */
   /*#  ajSoundInfo lnkSoundInfo; */
};
#endif  //IAUDIOJUGGLER_H