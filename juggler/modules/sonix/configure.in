AC_INIT
AC_CONFIG_HEADER(simple_config.h)
DPP_INIT

dnl make the nice reconfig script.
DPP_GEN_RECONFIG


DPP_STD_CPP(yes)
# Define the binary format.
DPP_ABI_SETUP

DPP_BASIC_PROGS($PLATFORM, $OS_TYPE)

DPP_SYSTEM_SUBST
DPP_SUBST

dnl ===========================================================================
dnl Define macros useful when working in a Win32/DOS-based environment.
dnl ---------------------------------------------------------------------------
dnl Macros:
dnl     DPP_WIN32_SETUP - Define path conversion (DOS to UNIX and UNIX to DOS)
dnl                       subroutines.
dnl 
dnl Subroutines defined:
dnl     unix2dos - Convert a UNIX-style path into a DOS-style path.
dnl     dos2unix - Convert a DOS-style path into a UNIX-style path.
dnl ===========================================================================
DPP_WIN32_SETUP

# We use AC_CANONICAL SYSTEM so that we can find out information about the

# -------------------------------------------- #
# --with-pkg[=arg] and --without-pkg arguments #
# -------------------------------------------- #

# Override the C compiler that configure would otherwise find itself.
AC_ARG_WITH(cc, [  --with-cc=<PATH>        Alternate C compiler ],
            _alt_cc="$withval", _alt_cc='none')

# Override the C++ compiler that configure would otherwise find itself.
AC_ARG_WITH(cxx, [  --with-cxx=<PATH>       Alternate C++ compiler ],
            _alt_cxx="$withval", _alt_cxx='none')



# Force the use of GCC as the compiler.
# NOTE: This is not fully implemented yet for any platform, but it is
# partially usable on Windows.
DPP_WITH_GCC(no)




# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP


# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
CC_ERR=''
CXX_ERR=''

_plx_save_CFLAGS="$CFLAGS"
_plx_save_CXXFLAGS="$CXXFLAGS"

# If no alternate C compiler was specified, check to see if it is necessary
# to force the use of a specific compiler on a given platform.
if test "x${_alt_cc}" = "xnone" ; then
    CC_IRIX='cc'
    CC_PIC_IRIX='-KPIC'

    # On IRIX, we have to use cc (not gcc).
    if test "$PLATFORM" = "IRIX" ; then
        CC_ERR='*** The library requires the IRIX MIPSpro C compiler ***'
    fi
# Otherwise, force the use of the alternate C compiler.
else
    CC="${_alt_cc}"
fi

# If no alternate C++ compiler was specified, check to see if it is
# necessary to force the use of a specific compiler on a given platform.
if test "x${_alt_cxx}" = "xnone" ; then
    CXX_HP='aCC'
    CXX_IRIX='CC'
    CXX_PIC_IRIX='-KPIC'

    # On HP-UX, we have to use the aCC C++ compiler.
    if test "$PLATFORM" = "HP" ; then
        CXX_ERR='*** The library requires the HP-UX aCC C++ compiler ***'
    # On Windows, we have to use the Microsoft Visual C++ compiler CL.EXE.
    elif test "$OS_TYPE" = "Win32" -a "x$USE_GCC" != "xyes" ; then
        CXX='cl'
        CC="$CXX"
        CXX_ERR='*** The library requires the MS Visual C++ compiler ***'
    # On IRIX, we have to use CC (not g++).
    elif test "x$PLATFORM" = "xIRIX" ; then
        CXX_ERR='*** The library requires the IRIX MIPSpro C++ compiler ***'
    fi
# Otherwise, force the use of the alternate C++ compiler.
else
    CXX="${_alt_cxx}"
fi

DPP_PROG_CC($CC, , AC_MSG_ERROR($CC_ERR))
DPP_GET_EXT
DPP_PROG_CXX($CXX, , AC_MSG_ERROR($CXX_ERR))


# Ensure that the C++ compiler we've found is capable of compiling the newer
# newer C++ features that we need.
DPP_CXX_NAMESPACE(AC_MSG_ERROR(*** project requires C++ namespace support ***))
DPP_CXX_TEMPLATES(AC_MSG_ERROR(*** project requires C++ template support ***))
DPP_CXX_INLINE(AC_MSG_ERROR(*** project requires C++ inline support ***))

if test "x$GXX" = "xyes" ; then
    # If we are using GCC as the compiler, we need to be using at least
    # egcs 1.1.2.  A newer version (e.g., 2.95.2) is even better.
    DPP_GPLUSPLUS_MODERN(AC_MSG_ERROR(*** project requires a modern G++ ***))
fi

DPP_BASIC_PROGS($PLATFORM, $OS_TYPE)

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------

# Macros:
#     DPP_INSTALLER - Set up the installer configuration. 
# Variables defined:
#     OWNER_NAME - The owner of everything installed.
#     GROUP_NAME - The group of everything installed.
#     FILE_PERMS - The UNIX-style octal permissions of normal files.
#     EXEC_PERMS - The UNIX-style octal permissions of executable files.
#     DIR_PERMS  - The UNIX-style octal permissions of directories.
DPP_INSTALLER(plexus, 0644, 0755, 0755)

# For use in linking applications.
EXTRA_LINK_FLAGS=''

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 3322 -w2"
    EXTRA_LINK_FLAGS="-all"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS -W3 -GR -GX -EHc -QIfdiv -QI0f"
    CXXFLAGS="$CXXFLAGS -W3 -GR -GX -EHc -QIfdiv -QI0f"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -MTd"
fi

DPP_SYSTEM_SUBST

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" -a "x$USE_GCC" != "xyes" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    SAFE_PLXROOT_ABS=`unix2dos -p "$PLXROOT_ABS"`
    PLX_SRCDIR=`unix2dos "$PLX_SRCDIR"`

    if test "x$DEPEND_EXTRAS" != "x" ; then
        DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    fi

    if test "x$INCLUDES" != "x" ; then
        INCLUDES=`unix2dos "$INCLUDES"`
    fi

    if test "x$LIBS" != "x" ; then
        LIBS=`unix2dos "$LIBS"`
    fi

    MTREE_CMD=`unix2dos "$MTREE_CMD"`

    APP_EXTRA_LIBS_BASIC=`unix2dos "$APP_EXTRA_LIBS_BASIC"`
else
    SAFE_PLXROOT_ABS="$PLXROOT_ABS"
fi


DPP_HAVE_OPENAL( /usr/local, AC_MSG_RESULT(+ Found OpenAL), AC_MSG_ERROR(*** project requires openal, type configure --help for options***) )
DPP_HAVE_AUDIOWORKS( /usr, AC_MSG_RESULT(+ Found AudioWorks), AC_MSG_ERROR(*** project requires audioworks, type configure --help for options***) )
dnl DPP_HAVE_VRJUGGLER( /usr, AC_MSG_RESULT(+ Found VR Juggler), AC_MSG_ERROR(*** project requires vrjuggler, type configure --help for options***) )


dnl Define the root directory for the OpenAL installation.
dnl sound_subsystem_default="None"
dnl AC_ARG_WITH(sound_subsystem_default,
dnl                 [  --with-sound=<PATH>   link in sound subsystems  [OpenAL, AudioWorks, None. default=$1]],
dnl                 SOUND_SUBSYSTEMS="$withval", SOUND_SUBSYSTEMS=$1)

              
dnl does the user want openal?
AC_ARG_ENABLE(openal,
              [  --enable-openal   Make OpenAL subsystem available at runtime [default=$1]],
              OPENAL_ENABLED="$enableval", OPENAL_ENABLED=$1)
dnl append the openal stuff...
if test "x$OPENAL_ENABLED" = "xyes" ; then
   if test "x$OPENAL" = "xyes" ; then
      INCLUDES="$INCLUDES $AL_INCLUDES"
      LDFLAGS="$LDFLAGS $AL_LDFLAGS"
      LIBS="$LIBS $LIBOPENAL"
      echo "+ added OpenAL to the compile and link paths"
   else
      AC_MSG_ERROR(*** you've requested to use OpenAL as one of your audio subsystems, but it was not found ***)
   fi
fi

dnl does the user want AW?
AC_ARG_ENABLE(audioworks,
              [  --enable-audioworks   Make AudioWorks subsystem available at runtime [default=$1]],
              AUDIOWORKS_ENABLED="$enableval", AUDIOWORKS_ENABLED=$1)
dnl append the openal stuff...
if test "x$AUDIOWORKS_ENABLED" = "xyes" ; then
   if test "x$AUDIOWORKS" = "xyes" ; then
      INCLUDES="$INCLUDES $AW_INCLUDES"
      LDFLAGS="$LDFLAGS $AW_LDFLAGS"
      LIBS="$LIBS $LIBAUDIOWORKS"
      echo "+ added AudioWorks to the compile and link paths"
   else
      AC_MSG_ERROR(*** you've requested to use AudioWorks as one of your audio subsystems, but it was not found ***)
   fi
fi

dnl -------------------------------------------------------------
dnl project specific stuff....
dnl -------------------------------------------------------------
aj_includes=$INCLUDES
aj_ldflags=$LDFLAGS
aj_libs=$LIBS
AC_SUBST(aj_includes)
AC_SUBST(aj_ldflags)
AC_SUBST(aj_libs)

dnl debugging output...
dnl echo "+ setting aj_includes == $aj_includes"
dnl echo "+ setting aj_ldflags == $aj_ldflags"
dnl echo "+ setting aj_libs == $aj_libs"
dnl -------------------------------------------------------------

DPP_SUBST
DPP_GET_PROJECTDIR

# Export variables defined above.
AC_SUBST(topdir)
AC_SUBST(EXTRA_LINK_FLAGS)


AC_OUTPUT(vj/Makefile 
          aj/Makefile
          samples/Makefile
          TestSuite/Makefile
          Makefile 
          make.defs.mk
          audiojuggler-config)

cat <<BUILD_INFO

 Remember that you need to build with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the distribution.

BUILD_INFO
