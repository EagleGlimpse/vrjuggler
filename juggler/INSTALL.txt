                  Building and Installing the Juggler Project

  The Juggler Team

   $Date$

     ----------------------------------------------------------------------

   Table of Contents

   Introduction

   Compiling

                Important Note Regarding Compiling

                Important Note for IRIX Users

                Compiling the Juggler suite of tools

Introduction

   This document explains how to build the modules of the Juggler project
   from the source code.

Compiling

   In this section, we describe how to compile the Juggler project. As of
   this writing, the explanation focuses on VR Juggler itself.

  Important Note Regarding Compiling

   Please note: you have downloaded developmental code. It may not be stable,
   and it may not even compile. Compiling Juggler itself can be a little
   complicated for anyone who does not have some background in Autoconf, C++,
   and make.

  Important Note for IRIX Users

   There are many Perl scripts used as part of getting, configuring, and
   building the Juggler tools. The version of Perl that ships with IRIX 6.5
   is very old (circa 1997) and does not work with many Perl scripts we have
   written. SGI provides a much newer version of Perl (5.6.1) with their
   freeware tools (http://freeware.sgi.com/). It will be necessary to install
   that version for our scripts to work. This version is typically installed
   as /usr/freeware/bin/perl.

   Once you have a modern Perl installed, you can run various Perl scripts as
   follows:

 /usr/freeware/bin/perl <script-name>

   The above will be required any time a Perl script fails with an error
   similar to the following:

 Perl 5.005 required--this is only version 5.00404, stopped at ./configure.pl line 35.
 BEGIN failed--compilation aborted at ./configure.pl line 35.

  Compiling the Juggler suite of tools

   This section explains how to get, configure, and compile all of the
   Juggler tools at once. Each tool compiles to its own library, and can be
   installed individually. (Refer to the README file in this directory for
   more information about the specific modules.)

   Getting the source code takes a few steps. You have to first download or
   check out Juggler and some external packages such as GGT, Xerces, and
   possibly NSPR. The steps are listed in the following sections.

    How to get Juggler and external package dependencies

   This section is for those users who want to get the Juggler source code
   from the CVS repository on SourceForge. Those users who have downloaded a
   pre-packaged version of the source can skip ahead to the section called
   "Configuring and compiling all Juggler tools at once".

   1. You can optionally get Juggler as a source code tarball from the
       website (www.vrjuggler.org) or...

   2. Check out the 'juggler' module using CVS.

 cvs -d :pserver:anonymous@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler login
 cvs -z3 -d :pserver:anonymous@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler co juggler

   3. Get external packages that Juggler depends on. Typically you will run
       cvs-gather.pl, found in the top-level juggler directory.

       The syntax will be similar to the following (you may have to edit the
       file deps.esrc, see also the section called "Aquire third party
       packages"):

 ./cvs-gather.pl --verbose --cfg=deps.esrc

          o See the section called "Aquire third party packages", you can use
            cvs-gather, or read the file deps.esrc and then manually get the
            packages yourself.

      Aquire third party packages

   cvs-gather is a utility we include in the root directory of Juggler to
   help you collect third party (external) source code that Juggler needs in
   order to build. In short, cvs-gather makes it easier to acquire the
   packages that Juggler needs.

   To get help on using this tool, use one of the following (the second
   version gives much more detailed output):

 ./cvs-gather.pl --help
 ./cvs-gather.pl --manual

   Use of cvs-gather is not required. You can skip cvs-gather if you already
   have the needed packages in your system or if you feel like getting these
   packages manually. cvs-gather is provided primarily for developer
   convenience.

   For a list of these package dependencies, you can look in the file
   deps.esrc to determine what packages you need to download manually.

   For cvs-gather to work, it uses a .gatherrc file. The .gatherrc file is
   used to specify the external project CVS locations. cvs-gather reads these
   CVS locations and then checks each one out locally for Juggler to build.

   The following shows how to run cvs-gather with a .gatherrc file. As of
   this writing, such a file is provide that allows anonymous-only CVS
   access. To use it, enter the following:

 ./cvs-gather.pl --verbose --cfg=deps.gatherrc

   To simplify shared use of a single configuration file, the contents of the
   file may be overridden on the command line or using an "overrides" file.
   The following shows such a file that overrides the CVSROOT settings in
   deps.esrc:

       #JugglerBaseStuff.CVSROOT=patrickh@cvs.vrjuggler.sourceforge.net:/cvsroot/vrjuggler
       Doozer.CVSROOT=patrickh@cvs.doozer.sourceforge.net:/cvsroot/doozer
       GMTL.*.CVSROOT=patrickh@cvs.ggt.sourceforge.net:/cvsroot/ggt                 

   The current deps.esrc only allows anonymous CVS access. To override that,
   we suggest making per-user override files. To use the override file, just
   add the argument --override=<filename> when running cvs-gather.

   The following shows how to run cvs-gather with your own overrides file:

 cvs-gather.pl --cfg=deps.gatherrc --override=anonuser.gatheroverride

   If all goes well, you'll get everything you need to compile.

    Configuring and compiling all Juggler tools at once

   Every time you have newly updated source code acquired from CVS or
   cvs-gather, it is recommended that you run autogen.sh, found in the
   top-level juggler directory:

 ./autogen.sh

   Also in this directory, we have a "global" configure script written in
   Perl rather than Autoconf. It is called configure.pl. To get options for
   this script, use one of the following (the second being much more
   detailed):

 ./configure.pl --script-help
 ./configure.pl --manual

   To configure your system, you'll need to see what options all the
   Autoconf-based configure scripts in Juggler need. To get this text, enter:

 ./configure.pl --help

   configure.pl works in a different "build" directory or in the directory
   where it resides. Here is how we (the team) have been using it:

   1. Make a directory for compiling. There are many good reasons to do this
       away from the main source tree.

 mkdir build.linux.posix

       This example using an ad hoc naming convention based on operating
       system and threading subsystem. Other examples could be
       build.irix.sproc, build.solaris.nspr, etc.

   2. Enter the new build directory.

 cd build.linux.posix

   3. Configure all the Juggler modules. This is when you must tell the
       module configure scripts where all the package dependencies are.

 ../configure.pl --cfg=../juggler.cfg --with-xercesroot=/home/users/allenb/Linux/xerces-c-src1_5_1 --with-xerceslib=xerces-c1_5_1 --with-gmtl-include=/var/tmp/patrick/juggler/modules/GMTL

   4. Compile the source tree using GNU make.

 gmake

   Note that the path to GMTL must be the absolute path to the parent
   directory containing the gmtl directory. That is where the GMTL headers
   live. Do not set it to <path>/modules/GMTL/gmtl--instead you only need to
   set it to <path>/modules/GMTL.

    Compiling individual tools in the Juggler suite

   Sometimes you do not want to build everything in the Juggler suite. Here
   are steps for configuring/building each package individually.

      Sonix (individual)

   Sonix requires a third-party software package called GMTL (ggt.sf.net).
   Sonix wraps other audio subsystems such as OpenAL (www.openal.org) or
   AudioWorks (multigen.com). One of these subsystems are required in order
   to hear sound. Here is how you build sonix:

   1. cd modules/sonix

   2. Choose one of the following depending on which subsystem (or both) you
       want to enable in sonix...

       ./configure --prefix=$HOME/vrjuggler-2.0
       --with-gmtl-include=/yourhomedir/juggler/modules/GMTL --enable-openal
       --with-oalroot=/usr/local

       ./configure --prefix=$HOME/vrjuggler-2.0
       --with-gmtl-include=/yourhomedir/juggler/modules/GMTL
       --enable-audioworks

   3. gmake debug install

   4. setenv SNX_BASE_DIR $HOME/vrjuggler-2.0

      JCCL (individual)

   JCCL requires VPR, and a third-party software package called Xerces C++.
   Xerces can be downloaded from the Apache XML site. Once Xerces C++ is
   built and installed, the JCCL configure script can find it:

   1. cd modules/jackal

   2. ./configure --prefix=$HOME/vrjuggler-2.0 --with-xercesroot=<Xerces C++
       dir>

   3. gmake debug install

   4. setenv JCCL_BASE_DIR $HOME/vrjuggler-2.0

   Depending on the version of Xerces C++ available, an extra argument may be
   required to find the actual library. For example, if Xerces C++ 1.6.0 is
   installed, add --with-xerceslib=xerces-c1_6_0 to the command line for
   running configure. Check the Xerces C++ lib directory for the exact name
   (without .so or .a).

      Gadgeteer (individual)

   Gadgeteer depends on JCCL, and VPR. Make sure these are compiled first.
   Gadgeteer uses JCCL_BASE_DIR and VPR_BASE_DIR environment variables to
   find these, so be sure you have them set.

   1. cd modules/gadgeteer

   2. ./configure --prefix=$HOME/vrjuggler-2.0

   3. gmake debug install

   4. setenv GADGET_BASE_DIR $HOME/vrjuggler-2.0

      VR Juggler (individual)

   VR Juggler depends on JCCL, VPR, and Gadgeteer. It also needs the 3rd
   party math lib GMTL. VR Juggler uses JCCL_BASE_DIR, GADGET_BASE_DIR, and
   VPR_BASE_DIR environment variables to find these, so be sure you have them
   set.

   1. cd modules/vrjuggler

   2. ./configure --prefix=$HOME/vrjuggler-2.0

   3. gmake debug install

   4. setenv VJ_BASE_DIR $HOME/vrjuggler-2.0
