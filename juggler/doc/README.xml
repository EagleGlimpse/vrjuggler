<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="../../../docs/stylesheet/docbook_ab.css" type="text/css"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="en">
   <articleinfo>
      <title>Juggler Project Overview</title>
      <authorgroup>
         <author>
            <othername>The Juggler Team</othername>
         </author>
      </authorgroup>
      <pubdate>$Date$</pubdate>
   </articleinfo>
   <section>
      <title>Introduction</title>
      <para>Congratulations, you have downloaded the source code to the Juggler Project, open source software for virtual reality from the Virtual Reality Applications Center at Iowa State University. Within this document, you will find information about the new VR Juggler 2.0 directory structure including descriptions of all the component modules that make up the Juggler Project. Instructions for building the individual modules can be found within the specific module directories and on the VR Juggler website.</para>
   </section>
   <section>
      <title>Compiling</title>
      <para>In this section, we describe how to compile the Juggler project. As of this writing, the explanation focuses on VR Juggler itself.</para>
      <section>
         <title>Important Note Regarding Compiling</title>
         <para>Please note that you have downloaded <emphasis>developmental</emphasis> code. It may not be stable, and it may not even compile. As of this writing, compiling VR Juggler itself is very complicated and is not recommended for anyone who does not have some background in Autoconf, C++, and make.</para>
      </section>
      <section>
         <title>Compiling VR Juggler</title>
         <para>As of this writing, VR Juggler is difficult to compile due to circular dependencies in the various modules making up the Juggler Project. More specifically, VR Juggler depends on Gadgeteer, and Gadgeteer depends on VR Juggler. (Refer to <xref linkend="modules-section"/> for more information about the specific modules.) As a result, the steps to build VR Juggler are a little strange. Rest assured that this will be resolved soon. With that in mind, the steps to build VR Juggler follow.</para>
         <section>
            <title>Generate <command>configure</command> Scripts</title>
            <para>Before any code can be built, the project <command>configure</command> scripts must be generated. In the top-level <filename>juggler</filename> directory, run <command>autogen.sh</command>. This will generate all the <command>configure</command> scripts in the Juggler Project source tree.</para>
         </section>
         <section>
            <title>Configure and Compile VPR</title>
            <para>First, VPR must be configured and compiled. All other projects depend on it.</para>
            <orderedlist>
               <listitem>
                  <para><command>cd modules/vapor</command></para>
               </listitem>
               <listitem>
                  <para><command>./configure --prefix=$HOME/vrjuggler-2.0</command></para>
               </listitem>
               <listitem>
                  <para><command>gmake debug install</command></para>
               </listitem>
               <listitem>
                  <para><command>setenv VPR_BASE_DIR $HOME/vrjuggler-2.0</command></para>
               </listitem>
            </orderedlist>
         </section>
         <section>
            <title>Configure and Compile JCCL</title>
            <para>Next, JCCL must be configured and compiled. JCCL requires a third-party software package called Xerces C++. It can be downloaded from <ulink url="http://xml.apache.org/xerces-c/index.html">the Apache XML site</ulink>. Once Xerces C++ is built and installed, the JCCL configure script can find it.</para>
            <orderedlist>
               <listitem>
                  <para><command>cd modules/jackal</command></para>
               </listitem>
               <listitem>
                  <para><command>./configure --prefix=$HOME/vrjuggler-2.0 --with-xercesroot=&lt;Xerces C++ dir&gt;</command></para>
               </listitem>
               <listitem>
                  <para><command>gmake debug install</command></para>
               </listitem>
               <listitem>
                  <para><command>setenv JCCL_BASE_DIR $HOME/vrjuggler-2.0</command></para>
               </listitem>
            </orderedlist>
            <para>Depending on the version of Xerces C++ available, an extra argument may be required to find the actual library. For example, if Xerces C++ 1.6.0 is installed, add <parameter>--with-xerceslib=libxerces-c1_6_0</parameter> to the command line for running <command>configure</command>. Check the Xerces C++ <filename>lib</filename> directory for the exact name (without <filename>.so</filename> or <filename>.a</filename>).</para>
         </section>
         <section>
            <title>Configure VR Juggler</title>
            <para>To deal with the circular dependency, VR Juggler must be configured but not built. In addition, a "pseudo-installation" must be created that the Gadgeteer configure script can find.</para>
            <orderedlist>
               <listitem>
                  <para><command>cd modules/vrjuggler</command></para>
               </listitem>
               <listitem>
                  <para><command>./configure --prefix=$HOME/vrjuggler-2.0</command></para>
               </listitem>
               <listitem>
                  <para><command>gmake links</command></para>
               </listitem>
               <listitem>
                  <para><command>setenv VJ_BASE_DIR `pwd`/instlinks</command></para>
               </listitem>
            </orderedlist>
         </section>
         <section>
            <title>Configure and Compile Gadgeteer</title>
            <para>Next, Gadgeteer can be configured and compiled. With the VR Juggler pseudo-installation, this is pretty easy.</para>
            <orderedlist>
               <listitem>
                  <para><command>cd modules/gadgeteer</command></para>
               </listitem>
               <listitem>
                  <para><command>./configure --prefix=$HOME/vrjuggler-2.0</command></para>
               </listitem>
               <listitem>
                  <para><command>gmake debug install</command></para>
               </listitem>
               <listitem>
                  <para><command>setenv GADGET_BASE_DIR $HOME/vrjuggler-2.0</command></para>
               </listitem>
            </orderedlist>
         </section>
         <section>
            <title>Re-Configure and Compile VR Juggler</title>
            <para>Finally, with all of the previous steps taken, VR Juggler can be compiled.</para>
            <orderedlist>
               <listitem>
                  <para><command>cd modules/vrjuggler</command></para>
               </listitem>
               <listitem>
                  <para><command>./reconfig</command></para>
               </listitem>
               <listitem>
                  <para><command>gmake debug install</command></para>
               </listitem>
               <listitem>
                  <para><command>setenv VJ_BASE_DIR $HOME/vrjuggler-2.0</command></para>
               </listitem>
            </orderedlist>
         </section>
      </section>
   </section>
   <section id="modules-section">
      <title>Modules</title>
      <para>The Juggler Project is made up of several modules that have evolved from the original VR Juggler source tree. Within this section, we describe each of the modules, what they are used for, and, when possible, how they relate to VR Juggler 1.0.</para>
      <section>
         <title>VR Juggler Portable Runtime (VPR)</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/vapor</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>VPR is the foundation for all the Juggler modules. It provides an object-oriented, cross-platform abstraction layer to common operating system features such as threads, semaphores, and sockets. All the other modules depend on VPR so that they may be ported easily to other platforms. In VR Juggler 1.0, VPR was the collection of directories Threads, SharedMem, and Sync. Since then, that code collected into a single library and greatly extended into what is now VPR.</para>
            <para>VPR itself contains a great deal of platform-specific code. It categorizes this code into subsystems, and various subsystems may be chosen depending upon the target platform and target threading system. For example, on IRIX, there are three possible subsystems: SPROC, POSIX and Netscape Portable Runtime (NSPR). Win32, on the other hand, only uses the NSPR subsystem. The subsystems are:</para>
            <itemizedlist>
               <listitem>
                  <para>SPROC (IRIX only)</para>
               </listitem>
               <listitem>
                  <para>POSIX (UNIX-based platforms only)</para>
               </listitem>
               <listitem>
                  <para>NSPR (all platforms, required on Win32 and Mac OS X)</para>
               </listitem>
            </itemizedlist>
            <para>Because VPR is the foundation for all the other modules, it is important to choose the right subsystem.</para>
            <para>Choosing the correct subsystem depends on many factors. For example, which of the subsystems are supported on the desired target platform? Are there compatibility issues with software outside the Juggler Project? In most cases, however, the choice is straightforward. Indeed, IRIX is the only platform that presents any real issues. In particular, the use of OpenGL Performer from SGI raises important compatibility concerns. SPROC threads are the only threads that are stable with OpenGL Performer (on IRIX). POSIX threads will work, but applications may sometimes crash on startup. As of this writing, OpenGL Performer does not work at all with NSPR. Other software may pose similar problems, and it is important to know the needs of other tools when configuring VPR.</para>
            <para>On platforms other than IRIX, the choice is relatively simple. If NSPR is available, its use is recommended. If NSPR is not available, POSIX threads is the next logical choice--at least on UNIX-based platforms. On Win32 and Mac OS X, NSPR is required.</para>
            <para>As mentioned above, all the other modules depend on VPR, so it must be compiled before anything else. For more information on compiling VPR, refer to modules/vapor/INSTALL.txt.</para>
         </section>
      </section>
      <section>
         <title>Juggler Configuration and Control Library (JCCL)</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/jackal</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>JCCL provides the configuration layer for VR Juggler and other modules. The config chunks and configuration editor VjControl come from JCCL. In essence, JCCL is the VR Juggler 1.0 Config directory with many new features including XML-based config files.</para>
            <para>To build the JCCL C++ library, Xerces-C is required for parsing XML. As of this writing, version 1.5.1 has been used for testing. Newer versions may work. Xerces-C can be downloaded from http://xml.apache.org/xerces-c/.</para>
            <para>To build VjControl, the Java API for XML Parsing (JAXP) is required. JAXP is distributed with JDK 1.4, and it is available for earlier versions as a separately distributed library. More information and downloads can be found at <ulink url="http://java.sun.com/xml/jaxp/index.html">http://java.sun.com/xml/jaxp/index.html</ulink>.</para>
         </section>
      </section>
      <section>
         <title>Gadgeteer</title>
         <section>
            <title>Directory</title>
            <para>juggler/modules/gadgeteer</para>
         </section>
         <section>
            <title>Description</title>
            <para>Gadgeteer is made up of the code that was formerly in the VR Juggler 1.0 Input directory. It contains all the drivers used for VR Juggler input devices, and it contains the high-level Input Manager. The goal with Gadgeteer is to mold it into the first dynamically loadable component within the VR Juggler microkernel. At this time, it must still be compiled in, but we hope to generalize the concepts of VR Juggler Managers to the point that the kernel knows nothing about them until they are loaded at run time.</para>
         </section>
      </section>
      <section>
         <title>Sonix</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/sonix</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para></para>
         </section>
      </section>
      <section>
         <title>Plexus</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/plexus</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para></para>
         </section>
      </section>
      <section>
         <title>Distributed Shared Objects (DSO)</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/dso</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para></para>
         </section>
      </section>
      <section>
         <title>Tweek</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/tweek</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>Tweek is a cross-platform, cross-language library consisting of a C++ API and a Java API. Its purpose is to provide a convenient mechanism for a Java-based GUI to interact with a complex C++ library or application. To provide this capability, it uses CORBA.</para>
            <para>The Java code in Tweek includes the Tweek Java API and the Tweek JavaBean Loader application. The Java API is provided to make the use of JavaBeans and CORBA simpler for programmers who want to write JavaBeans that can communicate with a C++ application. The JavaBean Loader application is a generalized application used to display and manage those Beans. It simply loads the Beans it finds and presents them to the user in some sort of structured manner (for example, a collection of icons with web-style navigation).</para>
         </section>
      </section>
      <section>
         <title>VR Juggler</title>
         <section>
            <title>Directory</title>
            <para><filename>juggler/modules/vrjuggler</filename></para>
         </section>
         <section>
            <title>Description</title>
            <para>VR Juggler is still VR Juggler. There are many new features in VR Juggler since the 1.0 series, but in essence, it is still the same familiar tool. Of the above projects, VR Juggler depends on VPR, JCCL, and Gadgeteer. Its individual components have simply been broken out into individually developed modules. More information about the latest version of VR Juggler is given in the following section.</para>
         </section>
      </section>
   </section>
   <section>
      <title>VR Juggler 2.0</title>
      <para></para>
   </section>
</article>
