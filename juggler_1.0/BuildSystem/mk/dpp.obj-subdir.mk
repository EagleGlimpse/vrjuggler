# =============================================================================
# dpp.obj-subdir.mk,v 1.8 2000/12/30 18:10:11 patrick Exp
#
# This file <dpp.obj-subdir.mk> is intended to be used by makefiles that need
# to build object files AND to recurse into subdirectories.  It defines
# variables and targets that are common to all such makefiles.  It also
# includes other .mk files that are typically necessary for this process.
# -----------------------------------------------------------------------------
# The makefile including this file must define the following variables:
#
# srcdir        - The directory containing the source files to compile.
# OBJEXT        - The suffix used for object files (usually .o or .obj).
# SRCS          - The C++ sources to be compiled.
# JAVA_SRCS     - The Java sources to be compiled.
# MKINSTALLDIRS - Path to shell script for making directories.
# MKPATH        - The path to the .mk files.
#
# Optionally, it can define the following variables for added functionality:
#
# EXTRA_SRCS_PATH - Directories besides $(srcdir) where source files may be
#                   found.
# OBJDIR          - The directory where the object files will go.  This
#                   defaults to the current directory.
# BEFOREBUILD     - The target to build before the object/class files.
# AFTERBUILD      - The target to build after the object/class files.
# TARGETS         - Extra target(s) to build after the object files but before
#                   $(AFTERBUILD).
# JAVA_TARGETS    - Extra target(s) to build after the class files but before
#                   $(AFTERBUILD).
# IDL_CPP_SRCS    - The C++ source files generated by the IDL compiler that
#                   need to be compiled with the other sources.
# IDL_JAVA_SRCS   - The Java source files generated by the Java IDL compiler
#                   that need to be compiled with the other sources.
# -----------------------------------------------------------------------------
# The targets defined here are as follows:
#
# all         - Build everything
# dbg         - Build debugging object files for a static library
# ddso        - Build debugging object files for a dynamic library
# opt         - Build optimized object files for a static library
# dso         - Build optimized object files for a dynamic library
# java        - Build the Java class files
# clean       - Recursive clean-up
# cleandepend - Recursive dependency clean-up
# =============================================================================

include $(MKPATH)/dpp.obj-common.mk

# -----------------------------------------------------------------------------
# Library targets.
# -----------------------------------------------------------------------------
all: dbg opt dso ddso obj java

dbg opt dso ddso obj: do-beforebuild $(BEFOREBUILD)
	@$(MAKE) do-build
	@$(MAKE) RECTARGET="$@" OPTIMIZER="$(OPTIMIZER)"	\
            BASE_OBJDIR="$(BASE_OBJDIR)" recursive
ifdef AFTERBUILD
	@$(MAKE) $(AFTERBUILD)
endif
ifdef LIB_NAME
	$(AR) $(ARFLAGS) $(LIB_NAME) $(OBJECTS)
endif

java: do-beforebuild $(BEFOREBUILD)
	@$(MAKE) do-java-build
	@$(MAKE) RECTARGET="$@" OPTIMIZER="$(OPTIMIZER)"	\
            BASE_OBJDIR="$(BASE_OBJDIR)" recursive
ifdef AFTERBUILD
	@$(MAKE) $(AFTERBUILD)
endif

# Define $(_LOCAL_IDL) and $(_LOCAL_JIDL) to inform the shared 'idl' and 'jidl'
# targets that there are local '_idl' targets to be run (respectively) besides
# the standard targets.
_LOCAL_IDL	= 1
_LOCAL_JIDL	= 1

_idl:
	@$(MAKE) RECTARGET="idl" recursive

_jidl:
	@$(MAKE) RECTARGET="jidl" recursive

include $(MKPATH)/dpp.compile.mk
include $(MKPATH)/dpp.dep.mk
include $(MKPATH)/dpp.idl.mk
include $(MKPATH)/dpp.subdir.mk
include $(MKPATH)/dpp.install.mk

# -----------------------------------------------------------------------------
# Clean-up.
# -----------------------------------------------------------------------------

# Define $(_LOCAL_CLEAN), $(_LOCAL_CLEANDEP), and $(_LOCAL_CLOBBER) to inform
# the shared 'clean', 'cleandepend', and 'clobber' targets that there are
# local '_clean' and '_cleandepend' targets to be run besides the standard
# targets.
_LOCAL_CLEAN	= 1
_LOCAL_CLEANDEP	= 1
_LOCAL_CLOBBER	= 1

_clean:
	@$(MAKE) RECTARGET="clean" OPTIMIZER="$(OPTIMIZER)"	\
            DIRPRFX="$(DIRPRFX)" BASE_OBJDIR="$(BASE_OBJDIR)" recursive

_cleandepend:
	@$(MAKE) DO_CLEANDEPEND=1 RECTARGET="cleandepend" recursive

_clobber:
	@$(MAKE) RECTARGET="clobber" OPTIMIZER="$(OPTIMIZER)"	\
            DIRPRFX="$(DIRPRFX)" BASE_OBJDIR="$(BASE_OBJDIR)" recursive

include $(MKPATH)/dpp.clean.mk
