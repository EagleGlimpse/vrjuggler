dnl # ************ <auto-copyright.pl BEGIN do not edit this line> ************
dnl #
dnl # VR Juggler is (C) Copyright 1998, 1999, 2000 by Iowa State University
dnl #
dnl # Original Authors:
dnl #   Allen Bierbaum, Christopher Just,
dnl #   Patrick Hartling, Kevin Meinert,
dnl #   Carolina Cruz-Neira, Albert Baker
dnl #
dnl # This library is free software; you can redistribute it and/or
dnl # modify it under the terms of the GNU Library General Public
dnl # License as published by the Free Software Foundation; either
dnl # version 2 of the License, or (at your option) any later version.
dnl #
dnl # This library is distributed in the hope that it will be useful,
dnl # but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl # Library General Public License for more details.
dnl #
dnl # You should have received a copy of the GNU Library General Public
dnl # License along with this library; if not, write to the
dnl # Free Software Foundation, Inc., 59 Temple Place - Suite 330,
dnl # Boston, MA 02111-1307, USA.
dnl #
dnl # -----------------------------------------------------------------
dnl # File:          $RCSfile$
dnl # Date modified: $Date$
dnl # Version:       $Revision$
dnl # -----------------------------------------------------------------
dnl #
dnl # ************* <auto-copyright.pl END do not edit this line> *************

dnl # -------------------------------------------------------------------------
dnl # Base configure.in for VR Juggler.
dnl # -------------------------------------------------------------------------
dnl # This file is "compiled" by GNU autoconf to generate the configure script
dnl # that is actually run.
dnl # -------------------------------------------------------------------------

AC_REVISION($Revision$)
AC_INIT(vjConfig.h)
AC_CONFIG_HEADER(vjDefines.h)
DPP_PREREQ(1.2)
DPP_INIT

dnl # -------------------------------------------------------------------------
dnl # Command-line arguments (--enable-option, --with-pkg=package_name).
dnl # -------------------------------------------------------------------------

dnl # ------------------------------------------------------ #
dnl # --enable-feature[=arg] and --disable-feature arguments #
dnl # ------------------------------------------------------ #

DPP_STD_CPP(yes)

dnl # Define which threading model to use.  Possible values are "SPROC",
dnl # "POSIX", "WIN32", or "NSPR".
dnl # The default is "SPROC".
AC_ARG_ENABLE(subsystem,
              [  --enable-subsystem=<SPROC|POSIX|WIN32|NSPR>
                          Define OS abstraction subsystem],
              SUBSYSTEM="$enableval", SUBSYSTEM='none')

dnl # Enable compilation of the OpenGL API.  Possible values are "yes" or
dnl # "no".  "yes" is set with --enable-gl-api and "no" is set with
dnl # --disable-gl-api.
dnl # The default is "yes".
AC_ARG_ENABLE(gl-api,
              [  --enable-gl-api         use OpenGL API                  [default=yes]],
              _enable_gl_api="$enableval", _enable_gl_api='yes')

dnl # Enable compilation of the Performer API.  Possible values are "yes" or
dnl # "no".  "yes" is set with --enable-pf-api and "no" is set with
dnl # --disable-pf-api.
dnl # The default is "yes".
AC_ARG_ENABLE(pf-api,
              [  --enable-pf-api         use Perfromer API               [default=yes]],
              _enable_pf_api="$enableval", _enable_pf_api='yes')

dnl # Enable performance testing.  Values that enable it are as follows:
dnl #
dnl #      SGI: Enable SGI IPC performance testing.  This defines
dnl #           VJ_PERFORMANCE to be VJ_PERF_SGI
dnl #    POSIX: Enable POSIX threads performance testing.  This defines
dnl #           VJ_PERFORMANCE to be VJ_PERF_POSIX
dnl #
dnl # Values that disable it are "no" or "NONE".  The default is "SGI".
AC_ARG_ENABLE(performance,
              [  --enable-performance=<SGI|POSIX|NONE>
                          enable performance testing      [default=SGI] ],
              [ if test "x$enableval" = "xyes" ; then
                    _enable_perf='SGI'
                elif test "x$enableval" = "xno" ; then
                    _enable_perf='NONE'
                else
                    _enable_perf="$enableval"
                fi
              ], _enable_perf='SGI')

dnl # 
DPP_ENABLE_NSPR_THREADS(no)

dnl # -------------------------------------------- #
dnl # --with-pkg[=arg] and --without-pkg arguments #
dnl # -------------------------------------------- #

dnl # Override the C compiler that configure would otherwise find itself.
AC_ARG_WITH(cc, [  --with-cc=<PATH>        Alternate C compiler ],
            _alt_cc="$withval", _alt_cc='none')

dnl # Override the C++ compiler that configure would otherwise find itself.
AC_ARG_WITH(cxx, [  --with-cxx=<PATH>       Alternate C++ compiler ],
            _alt_cxx="$withval", _alt_cxx='none')

dnl # Force the use of GCC as the compiler.
dnl # NOTE: This is not fully implemented yet for any platform, but it is
dnl # partially usable on Windows.
DPP_WITH_GCC(no)

dnl # Build the DTK wrapper using the DTK installation found at the given
dnl # path.  There is default path.
AC_ARG_WITH(dtk,
            [  --with-dtk=<PATH>       DTK installation],
            _with_dtk="$withval", _with_dtk='no')

dnl # Use AudioWorks (which can be found at the given path) in the sound
dnl # wrapper.
dnl # The default is to use it with the path being /usr.
AC_ARG_WITH(audioworks,
            [  --with-audioworks=<PATH>
                          AudioWorks installation         [default=/usr]],
            _with_aw="$withval", _with_aw='/usr')

dnl # Use SL (which can be found at the given path) in the sound wrapper.
dnl # The default is to use it with the path being /usr.
AC_ARG_WITH(sl,
            [  --with-sl=<PATH>        SL installation                 [default=/usr]],
            _with_sl="$withval", _with_sl='/usr')

AC_ARG_WITH(version,
            [  --with-version=<major>.<minor>.<micro>
                          VR Juggler version number       [default=none]],
            _vj_version="$withval", _vj_version='none')

dnl # Define the binary format.
DPP_ABI_SETUP

dnl # -------------------------------------------------------------------------
dnl # System-dependent stuff.
dnl # -------------------------------------------------------------------------
DPP_WIN32_SETUP

dnl # We use AC_CANONICAL SYSTEM so that we can find out information about
dnl # the build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM

_vjsave_CC="$CC"

dnl # On Win32, force the use of CL.EXE as the C compiler in DPP_SYSTEM_SETUP.
dnl # This ensures that $OBJEXT and $EXEEXT are set properly.
if test "x$target_os" = "xcygwin" -a "x$USE_GCC" != "xyes" ; then
    CC='cl'
fi

dnl # For now, we have to set the optimization level to 1 until we verify
dnl # that the GL Draw Manager is working with level 2.
OPT_LEVEL='1'

DPP_SYSTEM_SETUP

CC="${_vjsave_CC}"

dnl # These are used on all platforms.
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE, "$OS_REL_STR")
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MAJOR, $OS_REL_NUM_MAJOR)
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MINOR, $OS_REL_NUM_MINOR)

dnl # Depending on the target operating system, set various command options and
dnl # such.
case $target_os in
    dnl # SGI running IRIX 6.*.
    irix6*)
        DBG_FLAGS="$DBG_FLAGS -gslim"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of SPROC subsystem ***)
            SUBSYSTEM='SPROC'
        fi

        AC_DEFINE(VJ_OS_IRIX,)
        AC_DEFINE(_BSD_TYPES,)
        ;;
    dnl # HP PA-RISC machine running HP-UX 10.20.
    hpux10.20)
        dnl # We have to use the NSPR subsystem on HP-UX 10.20.
        if test "x$SUBSYSTEM" != "xNSPR" ; then
            AC_MSG_WARN(*** Forcing the use of NSPR subsystem ***)
            SUBSYSTEM='NSPR'
        fi

        AC_DEFINE(VJ_OS_HPUX,)
        AC_DEFINE(_INCLUDE_TERMIO,)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        ;;
    dnl # DEC Alpha running Digital UNIX 4.0.
    osf4.0)
        AC_DEFINE(VJ_OS_DUX,)
        ;;
    dnl # A machine running FreeBSD.  Currently only i386 is known to compile.
    freebsd*)
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VJ_OS_FreeBSD,)
        ;;
    dnl # A machine running Linux.  Currently only i386 is known to work.
    linux*)
        dnl # CXXFLAGS="-fhonor-std -Wall -Werror-implicit-function-declaration $CXXFLAGS"
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VJ_OS_Linux,)
        ;;
    dnl # A machine running Solaris (aka SunOS).  Currently only i386 is
    dnl # known to work.
    solaris*)
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VJ_OS_Solaris,)
        ;;
    dnl # IBM RS/6000 running AIX.
    aix*)
        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VJ_OS_AIX)
        ;;
    dnl # i386-class machine running Windows {98,NT} with Cygnus GNU-Win32.
    cygwin)
        dnl # There is no performance testing/monitoring code for Win32 (yet).
        if test "x${_enable_perf}" != "xNONE" ; then
            AC_MSG_WARN(*** Disabling performance testing on $host ***)
            _enable_perf='NONE'
        fi

        dnl # We have to use Win32 subsystem on Win32.
        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of WIN32 subsystem ***)
            SUBSYSTEM='WIN32'
        fi

        AC_DEFINE(VJ_OS_Win32,)
        ;;
    dnl # Unkown operating system (to config.guess).
    unknown)
        AC_DEFINE(VJ_OS_GENERIC,)
        ;;
esac

dnl # --------------------------------------------------------------------
dnl # Depending on host type and the value in ${_enable_perf}, define the
dnl # settings for the performance code.
dnl # --------------------------------------------------------------------
if test "$PLATFORM" != "IRIX" -a "${_enable_perf}" != "NONE" ; then
    _enable_perf='POSIX'
fi

dnl # Define unique values for each type of performance testing option.
dnl # Only one of these may be used for the value to which VJ_PERFORMANCE
dnl # is set.
AC_DEFINE(VJ_PERF_NONE, 0)
AC_DEFINE(VJ_PERF_SGI, 1)
AC_DEFINE(VJ_PERF_POSIX, 2)

dnl # Define VJ_PERFORMANCE based on ${_enable_perf}.  Default to
dnl # VJ_PERF_SGI if ${_enable_perf} has some unknown value.
if test "x${_enable_perf}" = "xSGI" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
elif test "x${_enable_perf}" = "xPOSIX" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_POSIX)
elif test "x${_enable_perf}" = "xNONE" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_NONE)
else
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
fi

dnl # -------------------------------------------------------------------------
dnl # Checks for programs.
dnl # -------------------------------------------------------------------------
CC_ERR=''
CXX_ERR=''

_vjsave_CFLAGS="$CFLAGS"
_vjsave_CXXFLAGS="$CXXFLAGS"

dnl # If no alternate C compiler was specified, check to see if it is
dnl # necessary to force the use of a specific compiler on a given platform.
if test "x${_alt_cc}" = "xnone" ; then
    dnl # On IRIX, we have to use cc (not gcc).
    if test "$PLATFORM" = "IRIX" ; then
        CC='cc'
        CC_ERR='*** The library requires the IRIX MIPSpro C compiler ***'
    fi
dnl # Otherwise, force the use of the alternate C compiler.
else
    CC="${_alt_cc}"
fi

dnl # If no alternate C++ compiler was specified, check to see if it is
dnl # necessary to force the use of a specific compiler on a given platform.
if test "x${_alt_cxx}" = "xnone" ; then
    dnl # On HP-UX, we have to use the aCC C++ compiler.
    if test "$PLATFORM" = "HP" ; then
        CXX='aCC'
        CXX_ERR='*** The library requires the HP-UX aCC C++ compiler ***'
    dnl # On Windows, we have to use the Microsoft Visual C++ compiler CL.EXE.
    elif test "$OS_TYPE" = "Win32" -a "x$USE_GCC" != "xyes" ; then
        CXX='cl'
        CC="$CXX"
        CXX_ERR='*** The library requires the MS Visual C++ compiler ***'
    dnl # On IRIX, we have to use CC (not g++).
    elif test "x$PLATFORM" = "xIRIX" ; then
        CXX='CC'
        CXX_ERR='*** The library requires the IRIX MIPSpro C++ compiler ***'
    fi
dnl # Otherwise, force the use of the alternate C++ compiler.
else
    CXX="${_alt_cxx}"
fi

DPP_PROG_CC($CC, , $CC_ERR)
DPP_PROG_CXX($CXX, , $CXX_ERR)

if test "x$GXX" = "xyes" ; then
    dnl # If we are using GCC as the compiler, we need to be using at least
    dnl # egcs 1.1.2.  A newer version (e.g., 2.95.2) is even better.  If the
    dnl # $CXX binary is not egcs 1.1.2 or newer, check for egcc and eg++.  If
    dnl # it exists, we will assume that it is new enough.
    DPP_GPLUSPLUS_VER(2.91,
        AC_CHECK_PROG(CC, egcc, egcc,
            AC_MSG_ERROR(*** The library requires the egcc C compiler ***))
        AC_CHECK_PROG(CXX, eg++, eg++,
            AC_MSG_ERROR(*** The library requires the eg++ C++ compiler ***)))
fi

dnl # Now check to see if the compiler accepts the -pthread option.
if test "x$SUBSYSTEM" != "xSPROC" -a "x$SUBSYSTEM" != "WIN32" -a \
        "x$NSPR_THREADS_ENABLED" = "xno"
then
    DPP_CC_PTHREAD_ARG

    if test "x$CC_ACCEPTS_PTHREAD" = "xno" ; then
        DPP_CC_PTHREADS_ARG
    fi
fi

dnl # Ensure that the C++ compiler we've found is capable of compiling the
dnl # newer C++ features that we need.
DPP_CXX_TEMPLATES(AC_MSG_ERROR(*** The library requires C++ template support ***))

dnl # Check for the JDK.
DPP_PATH_JAVA

dnl # If there is still no value in $JAVAC, then warn that the GUI will not be
dnl # built.
if test "x$JAVAC" = "xno" ; then
    AC_MSG_WARN(*** The GUI requires javac -- it will not be built ***)
    BUILD_GUI='N'
else
    BUILD_GUI='Y'
fi

dnl # Ensure that a version of Perl greater than or equal to 5.004 is
dnl # available.
DPP_PERL_VER(5.004)

AC_CHECK_PROG(MTREE_CMD, mtree, mtree, \$(PERL) \$(scriptdir)/mtree.pl)

DPP_BASIC_PROGS($PLATFORM, $OS_TYPE)

dnl # -------------------------------------------------------------------------
dnl # Checks for libraries.
dnl # -------------------------------------------------------------------------

dnl # Shared memory and synchronization primitives.
SEMAPHORE_SYS=''		# POSIX, SPROC, WIN32, NSPR
MUTEX_SYS=''			# POSIX, SPROC, WIN32, NSPR
SHMEM_SYS=''			# POSIX, SPROC, WIN32, NSPR
THREAD_SYS=''			# POSIX, SPROC, WIN32, NSPR

dnl # Test for libpthread or for libcma if libpthread is not present.
dnl # If the library is found, check for pthread_kill().  If it is present,
dnl # Draft 10 (the "final" draft) of the POSIX threads standard is in place.
dnl # If not, Draft 4 is available.
if test "x$SUBSYSTEM" = "xPOSIX" ; then
    DPP_GET_PTHREAD_LIB

    dnl # If $PTHREAD_LIB has a value at this point, then the pthread
    dnl # libraries needed are in $LIBS, so now we make a check for the draft
    dnl # revision being used.  This is done by determining if pthread_kill()
    dnl # is in the library.  If it is, Draft 10 is in use.  Otherwise, assume
    dnl # it is Draft 4.
    if test "$xPTHREAD_LIB" != "x" ; then
        DPP_GET_PTHREAD_VER($PLATFORM, VJ_POSIX_C_SOURCE)

        dnl # Define the default thread scope depending on the platform.  On
        dnl # IRIX, only process scope is avaiable without special
        dnl # configuration options.  Other systems may support system scope.
        if test "$PLATFORM" = "IRIX" ; then
            AC_DEFINE(VJ_THREAD_SCOPE, PTHREAD_SCOPE_PROCESS)
        else
            AC_DEFINE(VJ_THREAD_SCOPE, PTHREAD_SCOPE_SYSTEM)
        fi

        USE_PTHREADS='yes'
        DPP_GET_POSIX_SEMAPHORE_LIB( ,
            AC_MSG_ERROR(*** POSIX semaphores are required for POSIX subsystem ***))
    else
        AC_MSG_WARN(*** POSIX threads will not be used (no library found) ***)
    fi

    dnl # Do not define _POSIX_C_SOURCE here because it will cause problems
    dnl # when compiling on IRIX.  Instead, define that in the source files
    dnl # where appropriate.
    AC_DEFINE(VJ_USE_PTHREADS,)
    AC_DEFINE(VJ_POSIX_SEMAPHORES,)
    AC_DEFINE(RWSTD_MULTI_THREAD,)
    AC_DEFINE(RW_MULTI_THREAD,)
    AC_DEFINE(_THREAD_SAFE,)

    dnl # On Linux, defining _THREAD_SAFE is the same as defining _REENTRANT,
    dnl # so we will not define both.
    if test "x$PLATFORM" != "xLinux" ; then
        AC_DEFINE(_REENTRANT,)
    fi

    dnl # Use POSIX threading, mutexes and shared memory.
    MUTEX_SYS='POSIX'
    SHMEM_SYS='POSIX'
    THREAD_SYS='POSIX'
    SEMPANORE_SYS='POSIX'
dnl # We are using WIN32 threads.
elif test "x$SUBSYSTEM" = "xWIN32" ; then
    dnl # Set to Win32 threading, synchronization and shared memory.
    SEMPANORE_SYS='WIN32'
    THREAD_SYS='WIN32'
    MUTEX_SYS='WIN32'
    SHMEM_SYS='WIN32'
dnl # If we are not using POSIX threads, we must be using the IRIX sproc(2)
dnl # model, but we test $SUBSYSTEM just to be sure it is set right.
elif test "x$SUBSYSTEM" = "xSPROC" ; then
    AC_CHECK_HEADERS(sys/prctl.h, ,
        AC_MSG_ERROR(*** IRIX sproc(2) threading will not be used (no headers found) ***))

    AC_DEFINE(VJ_IRIX_SPROC,)

    dnl # Set to IRIX sproc threading, synchronization and shared memory.
    THREAD_SYS='SPROC'
    SEMAPHORE_SYS='SPROC'
    SHMEM_SYS='SPROC'
    MUTEX_SYS='SPROC'
dnl # NSPR subsystem.
else
    if test "x$NSPR_THREADS_ENABLED" = "xno" -a "x$OS_TYPE" = "xUNIX" ; then
        DPP_GET_PTHREAD_LIB
        DPP_GET_POSIX_SEMAPHORE_LIB( ,
            AC_MSG_ERROR(*** POSIX semaphores are required for NSPR subsystem ***))
        USE_PTHREADS='yes'
    else
        USE_PTHREADS='no'
    fi

    DPP_HAVE_NSPR(4.0, "$USE_PTHREADS",
        AC_MSG_ERROR(*** NSPR requried for compiling ***))

    AC_DEFINE(VJ_USE_NSPR,)

    dnl # Set to NSPR threading, synchronization and shared memory.
    SEMPANORE_SYS='NSPR'
    THREAD_SYS='NSPR'
    MUTEX_SYS='NSPR'
    SHMEM_SYS='NSPR'

    NSPR_INCLUDES="-I$NSPR_ROOT/include"
    NSPR_LIBS="-L$NSPR_ROOT/lib -lnspr$NSPR_VER $UCB_LIB"
fi

dnl # Get the path to the X-Window libraries and header files.  We will need
dnl # these for all UNIX applications.
AC_PATH_X

dnl # ------------
dnl # OpenGL API.
dnl # ------------
OPENGL_API=''			dnl # 'Y' then we are using OpenGL

dnl # Test for the OpenGL library if the OpenGL API was enabled.
if test "x${_enable_gl_api}" = "xyes" ; then
    DPP_HAVE_OPENGL(/usr, no,
        [ OPENGL_API='Y' ;
          AC_DEFINE(VJ_API_OPENGL,) ],
        AC_MSG_ERROR(*** OpenGL API will not be used (GL files not found) ***))
fi

dnl # --------------------
dnl # IRIS Performer API.
dnl # --------------------
PERFORMER_API=''		dnl # 'Y' then we are using Performer

dnl # Test for the Performer library if the Performer API was enabled.
if test "x${_enable_pf_api}" = "xyes" ; then
    DPP_HAVE_PERFORMER(/usr, 2.4,
        [ PERFORMER_API='Y' ;
          AC_DEFINE(VJ_API_PERFORMER,) ],
        AC_MSG_WARN(*** Performer API will not be used (files not found) ***))
fi

dnl # ----
dnl # DTK
dnl # ----
try_dtk='no'

dnl # We can use DTK in one of the following two situations:
dnl #     1) If the NSPR subsystem is enabled, the target platform is
dnl #        UNIX-based, and NSPR threads are not being used.
dnl #     2) If the POSIX subsystem is enabled.
case $SUBSYSTEM in
    NSPR)
        if test "x$OS_TYPE" = "xUNIX" -a "x$NSPR_THREADS_ENABLED" != "xyes"
        then
            try_dtk='yes'
        fi
        ;;
    POSIX)
        try_dtk='yes'
        ;;
esac

dnl # The user requested that the DTK wrapper be built, and the subsystem
dnl # configuration is right for use with DTK.
if test "x${_with_dtk}" != "xno" -a "x$try_dtk" = "xyes" ; then
    dnl # Try to find dtk-config unless the user has already set a value for
    dnl # $DTK_CONFIG in their environment.
    if test "x$DTK_CONFIG" = "x" ; then
        AC_PATH_PROG(DTK_CONFIG, dtk-config, no, "${_with_dtk}/bin")
    fi

    dnl $ If dtk-config was not found, we cannot proceed with the DTK checks.
    if test "x$DTK_CONFIG" = "xno" ; then
        AC_MSG_WARN(*** Cannot build DTK wrapper without dtk-config ***)
    dnl $ If dtk-config was found, $DTK_CONFIG has the path to it, so we can
    dnl # set things up to compile with DTK.
    else
        AC_LANG_SAVE
        AC_LANG_CPLUSPLUS

        _vjsave_CXXFLAGS="$CXXFLAGS"
        _vjsave_CPPFLAGS="$CPPFLAGS"
        _vjsave_LDFLAGS="$LDFLAGS"
        _vjsave_LIBS="$LIBS"

        dnl # Based on the default ABI, tell $DTK_CONFIG 
        if test "x$ABI" = "xN32" ; then
            bits='n32'
        elif test "x$ABI" = "x64" ; then
            bits='64'
        fi

        DTK_ROOT=`$DTK_CONFIG --root`
        CXXFLAGS="$CXXFLAGS `$DTK_CONFIG --cflags $bits`"
        CPPFLAGS="$CPPFLAGS `$DTK_CONFIG --include`"
        LDFLAGS="$LDFLAGS -L`$DTK_CONFIG --lib-dir $bits`"
        LIBS="$LIBS -ldtk"

        HAVE_DTK='N'

        dnl # Determine if the installed DTK library is usable.
        AC_CACHE_CHECK(for dtkMath_matrixPrint in -ldtk,
            ac_cv_dtkMath_matrixPrint_in_dtk,
            AC_TRY_LINK([
#include <dtk.h>
void dtkMath_matrixPrint(FILE *file, dtkMath_matrix* m); ],
                        [ dtkMath_matrixPrint(0, 0); ],
                        [ ac_cv_dtkMath_matrixPrint_in_dtk='yes'
                          rm -rf ./ii_files ],
                        ac_cv_dtkMath_matrixPrint_in_dtk='no'))

        if test "x$ac_cv_dtkMath_matrixPrint_in_dtk" = "xyes" ; then
            HAVE_DTK='Y'
            AC_DEFINE(VJ_HAVE_DTK)
            DTK_INCLUDES=`$DTK_CONFIG --include`
            DTK_LDFLAGS=`$DTK_CONFIG --libs $bits`
        else
            AC_MSG_WARN(*** Cannot find DTK ***)
        fi

        CXXFLAGS="${_vjsave_CXXFLAGS}"
        CPPFLAGS="${_vjsave_CPPFLAGS}"
        LDFLAGS="${_vjsave_LDFLAGS}"
        LIBS="${_vjsave_LIBS}"

        AC_LANG_RESTORE
    fi
dnl # If the user wanted to compile the DTK wrapper but this script
dnl # determined that the subsystem configuation would not allow its use,
dnl # warn the user.
elif test "x${_with_dtk}" != "xno" -a "x$try_dtk" = "xno" ; then
    AC_MSG_WARN(*** DTK cannot be used with this subsystem ***)
fi

dnl # -----------
dnl # AudioWorks
dnl # -----------
AUDIO_WORKS='N'
AW_INC=''
AW_LIB=''

if test "x${_with_aw}" != "xno" ; then
    AC_LANG_SAVE
    AC_LANG_CPLUSPLUS

    _vjsave_CPPFLAGS="$CPPFLAGS"
    _vjsave_LDFLAGS="$LDFLAGS"
    _vjsave_LIBS="$LIBS"

    CPPFLAGS="$CPPFLAGS -I${_with_aw}/include/PSI"
    LDFLAGS="$LDFLAGS -L${_with_aw}/lib$LIBBITSUF/PSI"

    AC_CHECK_LIB(aw, awInitSys,
        AC_CHECK_HEADER(aw.h,
            AUDIO_WORKS='Y',
            AC_MSG_WARN(*** AudioWorks will not be used (aw.h not found) ***)),
        AC_MSG_WARN(*** AudioWorks will not be used (library not found) ***),
        -lawhwi -lpsi -laudiofile -lm)

    CPPFLAGS="${_vjsave_CPPFLAGS}"
    LDFLAGS="${_vjsave_LDFLAGS}"
    LIBS="${_vjsave_LIBS}"

    if test "x$AUDIO_WORKS" = "xY" ; then
        AW_INC="-I${_with_aw}/include/PSI"
        AW_LIB="-L${_with_aw}/lib${LIBBITSUF}/PSI"

        dnl # This will be used later in test and sample application
        dnl # substitutions.
        _aw_libs='-law -lawhwi -lpsi -laudiofile'
    fi

    AC_LANG_RESTORE
fi

dnl # -----------
dnl # SL Library
dnl # -----------
SL='N'
SL_INC=''
SL_LIB=''

if test "x${_with_sl}" != "xno" ; then
    dnl # Default to 'Y' for this value since this will not actually be
    dnl # required by SL on all platforms.
    _have_audio='Y'

    dnl # If we are on IRIX, we need to check for the SGI Audio Library if
    dnl # we want to use SL.  If it is not found, ${_have_audio} is set to
    dnl # 'N', and the check for SL is not performed.
    if test "x$PLATFORM" = "xIRIX" ; then
        _vjsave_LIBS="$LIBS"

        AC_CHECK_LIB(audio, alNewConfig,
            AC_CHECK_HEADER(audio.h,
                _have_audio='Y',
                [ _have_audio='N' ;
                  AC_MSG_WARN(*** SGI Audio headers required for SL ***) ]),
            AC_MSG_WARN(*** SGI Audio library required for SL ***))

        LIBS="${_vjsave_LIBS}"
    fi

    dnl # Do not bother to check for SL unless ${_have_audio} is 'Y'.
    if test "x${_have_audio}" = "xY" ; then
        AC_LANG_SAVE
        AC_LANG_CPLUSPLUS

        _vjsave_CPPFLAGS="$CPPFLAGS"
        _vjsave_LDFLAGS="$LDFLAGS"
        _vjsave_LIBS="$LIBS"

        CPPFLAGS="$CPPFLAGS -I${_with_sl}/include/sl"
        LDFLAGS="$LDFLAGS -L${_with_sl}/lib"
        LIBS="$LIBS -lsl -laudio -lm"

        AC_CACHE_CHECK(for slScheduler::getCurrent in -lsl,
            ac_cv_getCurrent_in_sl,
            AC_TRY_LINK([#include <sl.h> ],
                        [ slScheduler::getCurrent(); ],
                        [ ac_cv_getCurrent_in_sl='yes' ; rm -rf ./ii_files ;
                          SL='Y' ],
                        ac_cv_getCurrent_in_sl='no'))

        CPPFLAGS="${_vjsave_CPPFLAGS}"
        LDFLAGS="${_vjsave_LDFLAGS}"
        LIBS="${_vjsave_LIBS}"

        if test "x$SL" = "xY" ; then
            SL_INC="-I${_with_sl}/include/sl"
            SL_LIB="-L${_with_sl}/lib"

            dnl # This will be used later in test and sample application
            dnl # substitutions.
            _sl_libs="-lsl"

            if test "x$PLATFORM" = "xIRIX" ; then
                _sl_libs="${_sl_libs} -laudio"
            fi
        else
            AC_MSG_WARN(*** SL library will not be used ***)
        fi

        AC_LANG_RESTORE
    fi
fi

dnl # -------------------------------------------------------------------------
dnl # Checks for header files.
dnl # -------------------------------------------------------------------------
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h sys/ioctl.h	\
                 sys/time.h termios.h unistd.h sys/z8530.h		\
                 sys/capability.h sys/stdsyms.h)

dnl # All of the above header file checks may not be necessary ...

dnl # -------------------------------------------------------------------------
dnl # Checks for typedefs, structures, and compiler characteristics.
dnl # -------------------------------------------------------------------------
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL

dnl # The following checks for availability of the socklen_t type.  Since it
dnl # is supposed to be defined in sys/socket.h, the usual AC_CHECK_TYPE
dnl # method will not work.
AC_CACHE_CHECK(for socklen_t, ac_cv_has_socklen_t,
    AC_TRY_COMPILE([#include <sys/types.h>
                    #include<sys/socket.h> ],
                   [ socklen_t var; ],
                   ac_cv_has_socklen_t='yes',
                   ac_cv_has_socklen_t='no'))

if test "x$ac_cv_has_socklen_t" = "xno" ; then
    AC_DEFINE(socklen_t, int)
fi

DPP_CHECK_TYPE_POSIX

dnl # -------------------------------------------------------------------------
dnl # Checks for library functions.
dnl # -------------------------------------------------------------------------
AC_CHECK_FUNCS(gettimeofday socket strcasecmp strdup strerror strtod)

_vjsave_LIBS="$LIBS"
AC_CHECK_FUNC(gethostbyname, SOCKET_LIB='',
    AC_CHECK_LIB(socket, gethostbyname, SOCKET_LIB='-lsocket'))
LIBS="${_vjsave_LIBS}"

dnl # Ensure that we have sched_yield(3).  On Solaris, sched_yield(3) and its
dnl # synchronization friends are in libposix4.
_vjsave_LIBS="$LIBS"
AC_CHECK_FUNC(sched_yield, AC_DEFINE(HAVE_SCHED_YIELD),
              AC_CHECK_LIB(posix4, sched_yield,
                  [ _sched_lib='-lposix4' ; AC_DEFINE(HAVE_SCHED_YIELD) ]))
LIBS="${_vjsave_LIBS}"

dnl # In a Win32 environment with MS Visual C++ as the compiler, these math
dnl # functions are not in any special library.  Test for them normally.
if test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    AC_CHECK_FUNCS(sinf cosf sqrtf asinf acosf atan2f fabsf)
dnl # Otherwise, they are in libmath if they are anywhere.
else
    AC_CHECK_LIB(m, sinf, AC_DEFINE(HAVE_SINF))
    AC_CHECK_LIB(m, cosf, AC_DEFINE(HAVE_COSF))
    AC_CHECK_LIB(m, sqrtf, AC_DEFINE(HAVE_SQRTF))
    AC_CHECK_LIB(m, asinf, AC_DEFINE(HAVE_ASINF))
    AC_CHECK_LIB(m, acosf, AC_DEFINE(HAVE_ACOSF))
    AC_CHECK_LIB(m, atan2f, AC_DEFINE(HAVE_ATAN2F))
    AC_CHECK_LIB(m, fabsf, AC_DEFINE(HAVE_FABSF))
fi

dnl # All of the above function checks may not be necessary ...

dnl # -------------------------------------------------------------------------
dnl # Miscellaneous checks.
dnl # -------------------------------------------------------------------------

DPP_INSTALLER(vrjuggler, 0644, 0755, 0755)

dnl # Construct the VR Juggler version using the getversion Perl script (if
dnl # Perl is available).  This is never cached because the version number
dnl # can change on a daily basis.  Thus, every time configure is run, there
dnl # exists the potential for a new version number to be generated.
dnl # XXX: Get this to work without Perl!
if test "x${_vj_version}" != "xno" ; then
    if test "x$PERL" != "xno" ; then
        _recversion="$PERL $srcdir/release/scripts/record-version.pl"
        _param_h_args="-i $srcdir/vjParam.h.in -o vjParam.h -s -NSPR"

        dnl # If no version number is given, try to extract the current
        dnl # value from $srcdir/VERSION.
        if test "x${_vj_version}" = "xnone" ; then
            ${_recversion} -f "$srcdir/VERSION" ${_param_h_args}
        dnl # Otherwise, use the given version number.
        else
            ${_recversion} -v "${_vj_version}" ${_param_h_args}
        fi
    else
        AC_MSG_WARN(Cannot construct VR Juggler version without Perl)
        cp "$srcdir/vjParam.h.in" vjParam.h
    fi
else
    cp "$srcdir/vjParam.h.in" vjParam.h
fi

dnl # -------------------------------------------------------------------------
dnl # Do Makefile substitutions.
dnl # -------------------------------------------------------------------------
if test "x$X_INCLUDES" != "x" ; then
    INCLUDES="$INCLUDES $X_INCLUDES"
fi

if test "x$OGL_INCLUDES" != "x" ; then
    INCLUDES="$INCLUDES $OGL_INCLUDES"
fi

if test "x$PF_INCLUDES" != "x" ; then
    INCLUDES="$INCLUDES $PF_INCLUDES"
fi

if test "x$DTK_INCLUDES" != "x" ; then
    INCLUDES="$INCLUDES $DTK_INCLUDES"
fi

dnl # For use in linking applications.
EXTRA_LINK_FLAGS=''

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" = "xno" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 3322 -w2"
    EXTRA_LINK_FLAGS="-all"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS -W3 -GR -GX -EHc -QIfdiv -QI0f"
    CXXFLAGS="$CXXFLAGS -W3 -GR -GX -EHc -QIfdiv -QI0f"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -MTd"
fi

DPP_SYSTEM_SUBST

dnl # If we are using pthreads, add the library containing the pthread calls to
dnl # $LIBS.  This must be done here because the $APP_VJ_LIBS* stuff below
dnl # uses $LIBS.
if test "x$USE_PTHREADS" = "xyes" ; then
    DPP_PTHREAD_FINISH
fi

INCLUDES="$INCLUDES $NSPR_INCLUDES"

dnl # For makedepend(1) to work properly on HP-UX with aCC, we have to
dnl # include these extra paths.
if test "x$PLATFORM" = "xHP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

dnl # $srcdir is the root directory of the juggler source tree.  To get a
dnl # value for $VJROOT_ABS, we cd there and save the value of running pwd.
dnl # Then return to the directory where configure is being run ($topdir).
cd "$srcdir"
VJROOT_ABS=`pwd`
cd "$topdir"

dnl # Define the base path to the source directory using ${VJROOT_ABS} as an
dnl # alternative to using ${srcdir}.
VJ_SRCDIR='$(VJROOT_ABS)'
UNIX_VJROOT_ABS="$VJROOT_ABS"

dnl # Variables set in Makefiles found in the application trees.  All variables
dnl # listed are for use only in the Makefile.in's found in that tree unless
dnl # otherwise noted.  They are used in the following way:
dnl #
dnl #     * APP_EXTRA_FLAGS: Extra flags for the compiler and linker.
dnl #     * APP_EXTRA_FLAGS_PF: Extra flags for the compiler and linker when
dnl #       building Performer applications.
dnl #     * APP_VJ_INC_AW: The include path for the AudioWorks header files.
dnl #     * APP_VJ_INC_SL: The include path for hte SL header files.
dnl #     * APP_VJ_LIBS_BASIC: The basic VR Juggler library.
dnl #     * APP_VJ_LIBS_BASIC_INST: Same as the above but is for installed
dnl #       Makefiles.
dnl #     * APP_VJ_LIBS_GL: The VR Juggler OpenGL API library.
dnl #     * APP_VJ_LIBS_PF: The VR Juggler Performer API library.
dnl #     * APP_VJ_LIBS_AW: The VR Juggler AudioWorks API library.
dnl #     * APP_VJ_LIBS_SL: The VR Juggler SL API library.
dnl #     * APP_VJ_LIBS_UTILS: The VR Juggler general utilities library.
dnl #     * APP_LIBS_BASIC: The _most basic_ basic libraries needed for
dnl #       compiling (e.g., -lm).
dnl #     * APP_EXTRA_LIBS_BEGIN: Options used at the beginning of the list
dnl #       of extra libraries.
dnl #     * APP_EXTRA_LIBS_END: Options used at the end of the list of extra
dnl #       libraries.
dnl #     * APP_EXTRA_LIBS_BASIC: A basic set of extra libraries and linker
dnl #       flags needed for compiling.  These are put after those listed in
dnl #       the previous variables in the compile line.
dnl #     * APP_EXTRA_LIBS_GL: The OpenGL libraries needed for compiling with
dnl #       the OpenGL API.
dnl #     * APP_EXTRA_LIBS_PF: The Performer libraries needed for compiling
dnl #       with the Performer API.
dnl #     * APP_EXTRA_LIBS_AW: The AudioWorks libraries needed for compiling
dnl #       with the AudioWorks sound system.
dnl #     * APP_EXTRA_LIBS_SL: The SL libraries needed for compiling with the
dnl #       SL sound libraries.
dnl #
APP_EXTRA_FLAGS="${_EXTRA_FLAGS} $X_INCLUDES"

dnl # If we have AudioWorks, make it available in the application makefiles.
if test "$AUDIO_WORKS" = "Y" ; then
    if test "$OS_TYPE" = "Win32" ; then
        APP_VJ_LIBS_AW='Juggler_aw.lib'
    else
        APP_VJ_LIBS_AW='-lJuggler_aw'
    fi

    APP_EXTRA_INC_AW="$AW_INC"
    APP_EXTRA_LIBS_AW="$AW_LIB ${_aw_libs}"
fi

dnl # If we have SL, make it available in the application makefiles.
if test "$SL" = "Y" ; then
    if test "$OS_TYPE" = "Win32" ; then
        APP_VJ_LIBS_SL='Juggler_sl.lib'
    else
        APP_VJ_LIBS_SL='-lJuggler_sl'
    fi

    APP_EXTRA_INC_SL="$SL_INC"
    APP_EXTRA_LIBS_SL="$SL_LIB ${_sl_libs}"
fi

if test "$OS_TYPE" = "UNIX" ; then
    if test "$PLATFORM" = "IRIX" ; then
        APP_VJ_LIBS_BEGIN="-B static -L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END='-lJuggler_utils'
        APP_VJ_LIBS_BASIC='-lJuggler'

        APP_VJ_LIBS_BEGIN_INST="-B dynamic -L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END_INST="-lJuggler_utils -Wl,-rpath,\$(VJ_BASE_DIR)/lib$LIBBITSUF"
        APP_VJ_LIBS_BASIC_INST='-lJuggler'

        APP_EXTRA_LIBS_BEGIN='-B dynamic'
        APP_EXTRA_LIBS_END="$NSPR_LIBS $PTHREAD_LIB $SEM_LIB $SOCKET_LIB -lm"
    elif test "x$GXX" = "xyes" ; then
        dnl # For now, we are disabling static linking for the sample
        dnl # applications when compiled in a developer's build tree.  This
        dnl # is only the case on non-IRIX platforms.
        APP_VJ_LIBS_BEGIN="-Wl,-Bstatic -L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END='-lJuggler_utils'
        APP_VJ_LIBS_BASIC='-lJuggler'

        APP_VJ_LIBS_BEGIN_INST="-Wl,-Bdynamic -L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END_INST="-lJuggler_utils -Wl,-rpath,\$(VJ_BASE_DIR)/lib$LIBBITSUF"
        APP_VJ_LIBS_BASIC_INST="$APP_VJ_LIBS_BASIC"

        APP_EXTRA_LIBS_BEGIN='-Wl,-Bdynamic'
        APP_EXTRA_LIBS_END="$NSPR_LIBS $PTHREAD_LIB $SEM_LIB $SOCKET_LIB -lm"
    else
        dnl # For now, we are disabling static linking for the sample
        dnl # applications when compiled in a developer's build tree.  This
        dnl # is only the case on non-IRIX platforms.
        APP_VJ_LIBS_BEGIN="-L\$(VJ_BASE_DIR)/lib${LIBBITSUF}"
        APP_VJ_LIBS_END='-lJuggler_utils'
        APP_VJ_LIBS_BASIC='-lJuggler'

        APP_VJ_LIBS_BEGIN_INST="$APP_VJ_LIBS_BEGIN"
        APP_VJ_LIBS_END_INST="$APP_VJ_LIBS_END"
        APP_VJ_LIBS_BASIC_INST="$APP_VJ_LIBS_BASIC"

        APP_EXTRA_LIBS_END="$NSPR_LIBS $PTHREAD_LIB $SEM_LIB $SOCKET_LIB -lm"
    fi

    dnl # FreeBSD needs to use libcompat for linking.
    if test "x$PLATFORM" = "xFreeBSD" ; then
        APP_EXTRA_LIBS_END="$APP_EXTRA_LIBS_END -lcompat"
    fi

    APP_VJ_LIBS_GL="-lJuggler_ogl"
    APP_VJ_LIBS_PF="-lJuggler_pf"
    APP_VJ_LIBS_UTILS="-lJuggler_utils"
    APP_EXTRA_LIBS_BASIC="$LDFLAGS $PTHREAD_ARG $LIBS $DTK_LDFLAGS"

    if test "x$OGL_LDFLAGS" != "x" ; then
        APP_EXTRA_LIBS_GL="-L$OGLROOT/lib$LIBBITSUF $LIBOPENGL"
    else
        APP_EXTRA_LIBS_GL="$LIBOPENGL"
    fi

    if test "x$PF_LDFLAGS" != "x" ; then
        APP_EXTRA_LIBS_PF="-L$PFROOT/lib$LIBBITSUF $LIBPERFORMER"
    else
        APP_EXTRA_LIBS_PF="$LIBPERFORMER"
    fi

    if test "x$PLATFORM" = "xLinux" ; then
        APP_EXTRA_FLAGS_PF="-O $APP_EXTRA_FLAGS_PF"
    fi
elif test "$OS_TYPE" = "Win32" ; then
    APP_VJ_LIBS_BEGIN="-link -libpath:\$(VJ_BASE_DIR)/lib/debug"
    APP_VJ_LIBS_END='Juggler_utils.lib'
    APP_VJ_LIBS_BASIC='Juggler.lib'
    APP_VJ_LIBS_BEGIN_INST="$APP_VJ_LIBS_BEGIN"
    APP_VJ_LIBS_END_INST="$APP_VJ_LIBS_END"
    APP_VJ_LIBS_BASIC_INST="$APP_VJ_LIBS_BASIC"
    APP_LIBS_BASIC='comctl32.lib user32.lib gdi32.lib ws2_32.lib'
    APP_VJ_LIBS_GL='Juggler_ogl.lib'
    APP_VJ_LIBS_PF='Juggler_pf.lib'
    APP_VJ_LIBS_UTILS='Juggler_utils.lib'
    APP_EXTRA_LIBS_BASIC="$LDFLAGS $LIBS"
    APP_EXTRA_LIBS_GL="$OGL_LDFLAGS $LIBOPENGL"
    APP_EXTRA_LIBS_PF="$PF_LDFLAGS $LIBPERFORMER"
fi

dnl # Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    SAFE_VJROOT_ABS=`unix2dos -p "$VJROOT_ABS"`
    VJ_SRCDIR=`unix2dos "$VJ_SRCDIR"`

    DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    INCLUDES=`unix2dos "$INCLUDES"`
    LIBS=`unix2dos "$LIBS"`
    MTREE_CMD=`unix2dos "$MTREE_CMD"`

    JDK_HOME=`unix2dos -p "$JDK_HOME"`

    APP_EXTRA_LIBS_BASIC=`unix2dos "$APP_EXTRA_LIBS_BASIC"`
    APP_EXTRA_LIBS_GL=`unix2dos "$APP_EXTRA_LIBS_GL"`
    APP_EXTRA_LIBS_PF=`unix2dos "$APP_EXTRA_LIBS_PF"`
    APP_EXTRA_LIBS_AW=`unix2dos "$APP_EXTRA_LIBS_AW"`
    APP_EXTRA_LIBS_SL=`unix2dos "$APP_EXTRA_LIBS_SL"`
else
    SAFE_VJROOT_ABS="$VJROOT_ABS"
fi

dnl # Set up some sed expressions that will help separate the share directory
dnl # from the full installation prefix.
_prefix_var_exp='s|^${prefix}/||'

if test "x$prefix" = "xNONE" ; then
    _prefix_exp="s|^$ac_default_prefix/||"
else
    _prefix_exp="s|^$prefix/||"
fi

dnl # Make a best-effort attempt to extract the actual share directory from
dnl # the full installation prefix.  This is not foolproof, but it will work
dnl # in almost all cases.  A person would have to be doing something
dnl # malicious or foolish to make it break.
VJ_SHARE_DIR=`echo "$datadir" | sed -e "${_prefix_var_exp}"`
VJ_SHARE_DIR=`echo "$VJ_SHARE_DIR" | sed -e "${_prefix_exp}"`

DPP_SUBST

AC_SUBST(topdir)
AC_SUBST(UNIX_VJROOT_ABS)
AC_SUBST(SAFE_VJROOT_ABS)
AC_SUBST(VJ_SRCDIR)
AC_SUBST(VJ_SHARE_DIR)

AC_SUBST(EXTRA_LINK_FLAGS)

AC_SUBST(BUILD_GUI)

AC_SUBST(OPENGL_API)
AC_SUBST(PERFORMER_API)
AC_SUBST(DTK_CONFIG)
AC_SUBST(HAVE_DTK)

AC_SUBST(SUBSYSTEM)
AC_SUBST(SEMAPHORE_SYS)
AC_SUBST(SHMEM_SYS)
AC_SUBST(MUTEX_SYS)
AC_SUBST(THREAD_SYS)

AC_SUBST(AUDIO_WORKS)
AC_SUBST(AW_INC)
AC_SUBST(AW_LIB)
AC_SUBST(SL)
AC_SUBST(SL_INC)
AC_SUBST(SL_LIB)

AC_SUBST(APP_EXTRA_FLAGS)
AC_SUBST(APP_EXTRA_FLAGS_PF)
AC_SUBST(APP_EXTRA_INC_AW)
AC_SUBST(APP_EXTRA_INC_SL)
AC_SUBST(APP_VJ_LIBS_BEGIN)
AC_SUBST(APP_VJ_LIBS_END)
AC_SUBST(APP_VJ_LIBS_BASIC)
AC_SUBST(APP_VJ_LIBS_BEGIN_INST)
AC_SUBST(APP_VJ_LIBS_END_INST)
AC_SUBST(APP_VJ_LIBS_BASIC_INST)
AC_SUBST(APP_VJ_LIBS_GL)
AC_SUBST(APP_VJ_LIBS_PF)
AC_SUBST(APP_VJ_LIBS_AW)
AC_SUBST(APP_VJ_LIBS_SL)
AC_SUBST(APP_VJ_LIBS_UTILS)
AC_SUBST(APP_LIBS_BASIC)
AC_SUBST(APP_EXTRA_LIBS_BEGIN)
AC_SUBST(APP_EXTRA_LIBS_END)
AC_SUBST(APP_EXTRA_LIBS_BASIC)
AC_SUBST(APP_EXTRA_LIBS_GL)
AC_SUBST(APP_EXTRA_LIBS_PF)
AC_SUBST(APP_EXTRA_LIBS_AW)
AC_SUBST(APP_EXTRA_LIBS_SL)

dnl # -------------------------------------------------------------------------
dnl # Final file generation step.
dnl # -------------------------------------------------------------------------

dnl # Ensure that the release directory exists since configure would not
dnl # create it otherwise.
if test ! -d release ; then
    mkdir release
    mkdir release/mtree
fi

dnl # Create the VJ.lib.dist file in release/mtree.  This is generated from
dnl # scratch since it cannot be generalized into a template using our
dnl # library directory scheme.  The only time this file needs to be generated
dnl # is when configure is run, so it is not set up to be one of the commands
dnl # that config.status can execute.
_lib_file='release/mtree/VJ.lib.dist'
_set_line="/set type=dir mode=$DIR_PERMS uname=$OWNER_NAME gname=$GROUP_NAME"

dnl # Ensure that the file exists and has zero length.  Then write out the
dnl # /set line which is going to be there no matter what.
echo "creating ${_lib_file}"
echo >${_lib_file}
echo "${_set_line}" >>${_lib_file}
echo "" >>${_lib_file}

dnl # On IRIX, it's easy to compile for different ABI/ISA combinations, so
dnl # we just make cases for all -n32/-64/-mips3/-mips4 settings.
if test "x$PLATFORM" = "xIRIX" ; then
    cat >>${_lib_file} <<END_IRIX_DIST
.
    lib32
	mips3
	    debug
	    ..
	    opt
	    ..
	..
	mips4
	    debug
	    ..
	    opt
	    ..
	..
    ..
    lib64
	mips3
	    debug
	    ..
	    opt
	    ..
	..
	mips4
	    debug
	    ..
	    opt
	    ..
	..
    ..
..
END_IRIX_DIST
dnl # If a value for $ISA has been set (which is the case for some platforms),
dnl # create a subdirectory in lib for that value.
elif test "x$ISA" != "x" ; then
    cat >>${_lib_file} <<END_ISA_DIST
.
    lib
	$ISA
	    debug
	    ..
	    opt
	    ..
	..
    ..
..
END_ISA_DIST
dnl # In all other cases, just make a simple directory tree for debugging and
dnl # optimized libraries.
else
    cat >>${_lib_file} <<END_DIST
.
    lib
	debug
	..
	opt
	..
    ..
..
END_DIST
fi

AC_OUTPUT(Makefile
          Makefile.inc
          common.defs.mk
          make.defs.mk
          Config/Makefile
          Environment/Makefile
          GUI/Makefile
          Input/Makefile
          Input/Filter/Makefile
          Input/InputManager/Makefile
          Input/Multi/Makefile
          Input/ibox/Makefile
          Input/vjDTK/Makefile
          Input/vjGesture/Makefile
          Input/vjGlove/Makefile
          Input/vjInput/Makefile
          Input/vjKeyboard/Makefile
          Input/vjPosition/Makefile
          Input/vjSim/Makefile
	  Input/intersense/Makefile
          Kernel/Makefile
          Kernel/GL/Makefile
          Kernel/Pf/Makefile
          Math/Makefile
          Performance/Makefile
          SharedMem/Makefile
          Sound/Makefile
          Sound/aw/Makefile
          Sound/sl/Makefile
          Sound/pf/Makefile
          Sync/Makefile
          Threads/Makefile
          Utils/Makefile
          Utils/Port/Makefile
          Utils/Socket/Makefile
          VPR/Makefile
          VPR/SharedMem/Makefile
          VPR/Sync/Makefile
          VPR/Threads/Makefile
          VPR/md/Makefile
          VPR/md/NSPR/Makefile
          VPR/md/POSIX/Makefile
          VPR/md/SPROC/Makefile
          VPR/md/WIN32/Makefile
          samples/Makefile
          samples/ogl/Makefile
          samples/ogl/combo/Makefile
          samples/ogl/cones/Makefile
          samples/ogl/cubes/Makefile
          samples/ogl/glove/Makefile
          samples/ogl/digitalGlove/Makefile
          samples/ogl/simpleGlove/Makefile
          samples/ogl/torus/Makefile
          samples/ogl/texture/Makefile
          samples/ogl/wand/Makefile
          samples/pf/Makefile
          samples/pf/pfConfigNav/Makefile
          samples/pf/pfNav/Makefile
          samples/tutorials/Makefile
          samples/tutorials/simpleInput/Makefile
          samples/tutorials/simplePf/Makefile
          test/Makefile 
          test/TestSuite/Makefile
          test/CfgTest/Makefile
          test/GLWindow/Makefile
          test/Math/Makefile
          test/Matrix/Makefile
          test/Performance/Makefile
          test/Performance/analyzer/Makefile
          test/Performance/perfdatabuffer-test/Makefile
          test/Quat/Makefile
          test/SerialPort/Makefile 
          test/Socket/Makefile 
          test/Sync/Makefile 
          test/input/Makefile
          test/testDynamicCastSTL/Makefile
          test/threads/Makefile
          tools/Makefile
          Doc/Makefile
          release/mtree/VJ.data.dist
          release/mtree/VJ.include.dist
          release/mtree/VJ.install.dist
          release/mtree/VJ.samples.dist
          release/mtree/VJ.test.dist
          release/mtree/VJ.tools.dist
          VARS.pl)

dnl # Create a script for handy reconfiguration of a build tree.  It removes
dnl # configure's cache and status files and then runs configure with the
dnl # same arguments.
: ${RECONFIG=./reconfig}

echo "creating $RECONFIG"
rm -f $RECONFIG
cat > $RECONFIG <<RECONFIG_SCRIPT
rm -f config.status config.cache config.log
$0 $ac_configure_args
RECONFIG_SCRIPT
chmod 755 $RECONFIG

cat <<BUILD_INFO

 Remember that you need to build Juggler with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the Juggler distribution.

BUILD_INFO
