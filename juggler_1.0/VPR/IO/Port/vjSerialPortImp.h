/*************** <auto-copyright.pl BEGIN do not edit this line> **************
 *
 * VR Juggler is (C) Copyright 1998, 1999, 2000 by Iowa State University
 *
 * Original Authors:
 *   Allen Bierbaum, Christopher Just,
 *   Patrick Hartling, Kevin Meinert,
 *   Carolina Cruz-Neira, Albert Baker
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * -----------------------------------------------------------------
 * File:          $RCSfile$
 * Date modified: $Date$
 * Version:       $Revision$
 * -----------------------------------------------------------------
 *
 *************** <auto-copyright.pl END do not edit this line> ***************/

#ifndef _VJ_SERIAL_PORT_IMP_H_
#define _VJ_SERIAL_PORT_IMP_H_

#include <VPR/IO/Port/vjPortImp.h>
#include <VPR/IO/Port/vjSerialTypes.h>


// ----------------------------------------------------------------------------
//: Serial port implementation interface.
// ----------------------------------------------------------------------------
//!PUBLIC_API:
class vjSerialPortImp : public vjPortImp {
public:
    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int drainOutput(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int controlFlow(vjSerialTypes::FlowActionOption opt) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int flushQueue(vjSerialTypes::FlushQueueOption opt) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int sendBreak(const int duration) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual vjSerialTypes::UpdateActionOption getUpdateAction(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual void setUpdateAction(vjSerialTypes::UpdateActionOption action) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual unsigned char getBufferSize(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int setBufferSize(const unsigned char size) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual unsigned char getTimeout(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int setTimeout(const unsigned char size) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual unsigned short getCharacterSize(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int setCharacterSize(const unsigned short bpb) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual void setControlCharacter(const unsigned int index,
                                     const unsigned char value) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual unsigned char getControlCharacter(const unsigned int index) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual unsigned short getStopBits(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int setStopBits(const unsigned short num_bits) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int getParity(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int setOddParity(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int setEvenParity(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int getInputBaudRate(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int setInputBaudRate(const int baud) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int getOutputBaudRate(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int setOutputBaudRate(const int baud) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getLocalAttachState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableLocalAttach(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableLocalAttach(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getReadState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableRead(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableRead(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getInputEchoState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableInputEcho(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableInputEcho(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getEraseEchoState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableEraseEcho(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableEraseEcho(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getKillEchoState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableKillEcho(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableKillEcho(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getNewlineEchoState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableNewlineEcho(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableNewlineEcho(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getCanonicalState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableCanonicalInput(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableCanonicalInput(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getCRTranslateState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableCRTranslation(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableCRTranslation(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getExtendedHandlingState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableExtendedHandling(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableExtendedHandling(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getCRIgnoreState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableCRIgnore(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableCRIgnore(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getBadByteIgnoreState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableBadByteIgnore(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableBadByteIgnore(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getParityCheckState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableParityCheck(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableParityCheck(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getSignalGenerateState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableSignalGeneration(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableSignalGeneration(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getBitStripState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableBitStripping(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableBitStripping(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getStartStopInputState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableStartStopInput(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableStartStopInput(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getStartStopOutputState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableStartStopOutput(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableStartStopOutput(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getNoFlushState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableNoFlush(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableNoFlush(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getParityGenerationState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableParityGeneration(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableParityGeneration(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual bool getParityErrorMarkingState(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int enableParityErrorMarking(void) = 0;

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    virtual int disableParityErrorMarking(void) = 0;

protected:
    // ------------------------------------------------------------------------
    //: Constructor.
    // ------------------------------------------------------------------------
    vjSerialPortImp (const std::string& port_name)
        : vjPortImp(port_name)
    {
        /* Do nothing. */ ;
    }
};


#endif	/* _VJ_SERIAL_PORT_H_ */
