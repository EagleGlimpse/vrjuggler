/***************** <Tweek heading BEGIN do not edit this line> ****************
 * Tweek
 *
 * -----------------------------------------------------------------
 * File:          $RCSfile$
 * Date modified: $Date$
 * Version:       $Revision$
 * -----------------------------------------------------------------
 ***************** <Tweek heading END do not edit this line> *****************/

/*************** <auto-copyright.pl BEGIN do not edit this line> **************
 *
 * VR Juggler is (C) Copyright 1998, 1999, 2000, 2001 by Iowa State University
 *
 * Original Authors:
 *   Allen Bierbaum, Christopher Just,
 *   Patrick Hartling, Kevin Meinert,
 *   Carolina Cruz-Neira, Albert Baker
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 *************** <auto-copyright.pl END do not edit this line> ***************/

package org.vrjuggler.tweek;

import java.awt.*;
import java.beans.Beans;
import java.util.Vector;
import javax.swing.*;
import javax.swing.tree.TreeModel;
import org.vrjuggler.tweek.beans.*;
import org.vrjuggler.tweek.event.*;
import org.vrjuggler.tweek.net.CommunicationEvent;
import org.vrjuggler.tweek.net.CommunicationListener;
import org.vrjuggler.tweek.net.corba.*;


/**
 * The main GUI pane used in PlxView.  It is used as a container for the
 * JavaBeans loaded at runtime.  Thus, its main purpose is to lay those Swing
 * components out nicely.  This code was initially generated by JBuilder,
 * though little of the original generated code remains.  The Beans themselves
 * are organized in a specialized BeanTree object.
 *
 * @version $Revision$
 */
public class BeanContainer extends JScrollPane
                           implements BeanInstantiationListener
{
   // ========================================================================
   // Public methods.
   // ========================================================================

   public BeanContainer ()
   {
      BeanInstantiationCommunicator.instance().addBeanInstantiationListener(this);

      try
      {
         jbInit();
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }

   public void replaceViewer (org.vrjuggler.tweek.beans.BeanModelViewer v)
   {
      this.getViewport().removeAll();
      this.getViewport().add(v.getViewer(), null);
      this.repaint();
   }

   public synchronized void addUserLevelChangeListener (UserLevelChangeListener listener)
   {
      m_level_listeners.add(listener);
   }

   public synchronized void removeUserLevelChangeListener (UserLevelChangeListener listener)
   {
      m_level_listeners.removeElement(listener);
   }

   public void fireUserLevelChange (int old_level, int new_level)
   {
      UserLevelChangeEvent e = new UserLevelChangeEvent(this, old_level,
                                                        new_level);

      UserLevelChangeListener l = null;
      Vector listeners;

      synchronized (this)
      {
         listeners = (Vector) m_level_listeners.clone();
      }

      for ( int i = 0; i < listeners.size(); i++ )
      {
         l = (UserLevelChangeListener) listeners.elementAt(i);
         l.userLevelChange(e);
      }
   }

   public synchronized void addCommunicationListener (CommunicationListener listener)
   {
      m_comm_listeners.add(listener);
   }

   public synchronized void removeCommunicationListener (CommunicationListener listener)
   {
      m_comm_listeners.removeElement(listener);
   }

   public void fireConnectionEvent (CorbaService corba_if)
   {
      CommunicationEvent e =
         new CommunicationEvent(this, CommunicationEvent.CONNECT, corba_if);

      CommunicationListener l = null;
      Vector listeners;

      synchronized (this)
      {
         listeners = (Vector) m_comm_listeners.clone();
      }

      for ( int i = 0; i < listeners.size(); i++ )
      {
         l = (CommunicationListener) listeners.elementAt(i);
         l.connectionStateChanged(e);
      }
   }

   public void fireDisconnectionEvent (CorbaService corba_if)
   {
      CommunicationEvent e = new CommunicationEvent(this,
                                                    CommunicationEvent.DISCONNECT,
                                                    corba_if);

      CommunicationListener l = null;
      Vector listeners;

      synchronized (this)
      {
         listeners = (Vector) m_comm_listeners.clone();
      }

      for ( int i = 0; i < listeners.size(); i++ )
      {
         l = (CommunicationListener) listeners.elementAt(i);
         l.connectionStateChanged(e);
      }
   }

   /**
    * Implementation of BeanInstantiationListener.beanInstantiation().  Upon
    * instantiation of a JavaBean by the BeanTree, the Bean is inspected to
    * determine if it implements the CommunicationListener interface.
    * If it is so determined, the Bean is automatically added to the
    * collection of listeners for CommunicationEvents.
    */
   public void beanInstantiation (BeanInstantiationEvent event)
   {
      Object bean = event.getBean();

      try
      {
         if ( Beans.isInstanceOf(bean, Class.forName("org.vrjuggler.tweek.net.CommunicationListener")) )
         {
            System.out.println("Adding new CommunicationListener");
            addCommunicationListener((CommunicationListener) bean);
         }

         if ( Beans.isInstanceOf(bean, Class.forName("org.vrjuggler.tweek.beans.UserLevelChangeListener")) )
         {
            System.out.println("Adding new UserLevelChangeListener");
            addUserLevelChangeListener((UserLevelChangeListener) bean);
         }
      }
      // This better not happen (i.e., org.vrjuggler.tweek.net.* and
      // org.vrjuggler.tweek.beans.* had better be there) ...
      catch (ClassNotFoundException e)
      {
         e.printStackTrace();
      }
   }

   private void jbInit() throws Exception
   {
   }

   // ========================================================================
   // Private data members.
   // ========================================================================

   private Vector m_comm_listeners  = new Vector();
   private Vector m_level_listeners = new Vector();

   private TreeModel m_data_model = null;
}
