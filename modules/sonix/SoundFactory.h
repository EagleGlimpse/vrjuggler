/* Generated by Together */

#ifndef SOUNDFACTORY_H
#define SOUNDFACTORY_H
#include "SoundImplementation.h"
#include "OpenALSoundImplementation.h"
#include "AudioWorksSoundImplementation.h"
class SoundFactory : public vpr::Singleton
{
public:

   /**
    * @input name of api to create
    * @output an implementation is returned for you to use
    * @postconditions if apiName is not known, then a stub implementation is returned
    * @semantics factory function used to create an implementation of a sound API 
    */
   void createImplementation( const std::string& apiName,
                              SoundImplementation* &mImplementation )
   {
      if (apiName == "OpenAL")
      {
         mImplementation = new OpenALSoundImplementation;
      }
      else if (apiName == "Audioworks")
      {
         mImplementation = new AudioWorksSoundImplementation;
      }
      else
      {
         mImplementation = new StubSoundImplementation;
      }
   }

private:

   /**
    * @clientCardinality 1
    * @supplierCardinality 0..*
    */
   SoundImplementation lnkSoundImplementation;
};
#endif //SOUNDFACTORY_H