# ***************** <SNX heading BEGIN do not edit this line> *****************
#
# sonix
#
# Original Authors:
#   Kevin Meinert, Carolina Cruz-Neira
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# ****************** <SNX heading END do not edit this line> ******************



# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998, 1999, 2000, 2001 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# *************** <auto-copyright.pl END do not edit this line> ***************




###############################################################################$
# builder for test suite.  uses kevin's build system in @srcdir@/mk
###############################################################################$

# project name...
PROJECT_NAME = runner

default: echo_info $(PROJECT_NAME)

srcdir		= @srcdir@
topdir		= @topdir@
#top_srcdir	= @top_srcdir@
CPP_UNIT	?= $(srcdir)/../../../external/cppunit

CXX		= @CXX@
CFLAGS		= @CFLAGS@ $(OPTIMIZER) $(EXTRA_FLAGS)
CPPFLAGS	= @CPPFLAGS@
CXXFLAGS	= @CXXFLAGS@ $(OPTIMIZER) $(EXTRA_FLAGS)
DEFS		= @DEFS@
DEP_GEN_FLAG	= @DEP_GEN_FLAG@
DEPEND_FLAGS	= @DEPEND_FLAGS@ $(INCLUDES)
DEPEND_EXTRAS	= @DEPEND_EXTRAS@ $(DEFS)
EXTRA_FLAGS	= 
INCLUDES	= @INCLUDES@ -I$(topdir) \
                 -I$(srcdir) -I$(srcdir)/TestCases			\
                 -I$(CPP_UNIT)/include
OPTIMIZER	= @DBG_FLAGS@ -D_DEBUG
LD		= @LD@
LDFLAGS		= @LDFLAGS@ -L/usr/lib$(LIBBITSUF)
LIBBITSUF	= @LIBBITSUF@
LIBS		= @LIBS@ -L$(SNX_BASE_DIR)/lib$(LIBBITSUF) -lsonix
MAKEDEPEND	= @MAKEDEPEND@
OBJEXT		= @OBJEXT@
OBJ_NAME_FLAG	= @OBJ_NAME_FLAG@
OS_TYPE		= @OS_TYPE@

USE_MAKEDEPEND	= @USE_MAKEDEPEND@

LINK		= $(CXX) $(CPPFLAGS) $(CXXFLAGS) @EXTRA_LINK_FLAGS@	\
                  $(EXTRA_FLAGS) 

EXTRA_LIBS	= 

# -----------------------------------------------------------------------------
# Compiler command lines.
# -----------------------------------------------------------------------------
C_COMPILE	= $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
CXX_COMPILE	= $(CXX) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS)

# objects to be included in the project....
# SRC Files
TEST_SRCS = 
CPPUNIT_TEXTUI_SRCS = TextTestRunner.cpp TextTestResult.cpp
CPPUNIT_SRCS	= Exception.cpp		\
                  NotEqualException.cpp	\
                  TestAssert.cpp	\
                  TestCase.cpp		\
                  TestResult.cpp	\
                  TestFailure.cpp	\
                  TestSuite.cpp

RUNNER_SRCS	= main.cpp
SRCS		= $(TEST_SRCS)			\
                  $(CPPUNIT_TEXTUI_SRCS)	\
                  $(CPPUNIT_SRCS)		\
                  $(RUNNER_SRCS)

OBJDIR = .
DEPDIR = 

INCLUDE_PATHS = 
PATH_TO_SRCS = $(srcdir) $(srcdir)/TestCases 				\
               $(CPP_UNIT)/src/cppunit
MK_DIR = $(srcdir)/mk

include ${MK_DIR}/mk.objs

# Compile then Link
$(PROJECT_NAME): $(OBJS)
	@echo ""
	@echo "-------------------------------------------"
	@echo "Linking... (.$(OBJEXT)'s --> executable)"
	@echo "-------------------------------------------"
	$(LINK) -o $@ $(OBJS) $(LDFLAGS) $(LIBS) $(EXTRA_LIBS)
	@echo ""
	@echo "-------------------------------------------"
	@echo "$(PROJECT_NAME) done"
	@echo "-------------------------------------------"

echo_info:
	@echo ""
	@echo "Building $(PROJECT_NAME)"
	@echo "Using SNX_BASE_DIR: $(SNX_BASE_DIR)"
	@echo ""

# Remove the compiled stuff from the system
clean:
	@echo ""
	@echo "-------------------------------------------"
	@echo "Removing compiled stuff from the system	 "
	@echo "-------------------------------------------"
	rm -fr $(OBJS) $(PROJECT_NAME) *.ncb *.opt *.plg *.ilk *.idb	\
          *.pdb *.pch Debug/ Release/ ii_files/ *core

clobber: clean
	rm -f *.d

include ${MK_DIR}/mk.depend

