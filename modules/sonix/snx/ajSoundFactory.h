/* Generated by Together */

#ifndef AJSOUNDFACTORY_H
#define AJSOUNDFACTORY_H
#include "ajSoundImplementation.h"
#include "ajOpenALSoundImplementation.h"
#include "ajAudioWorksSoundImplementation.h"
#include "ajStubSoundImplementation.h"
#include "ajSoundImplementation.h"

class ajSoundFactory : public vpr::Singleton
{
public:

   /**
    * @input name of api to create
    * @output an implementation is returned for you to use
    * @postconditions if apiName is not known, then a stub implementation is returned
    * @semantics factory function used to create an implementation of a sound API 
    */
   void createImplementation( const std::string& apiName,
                              ajSoundImplementation* &mImplementation )
   {
      if (apiName == "OpenAL")
      {
         mImplementation = new OpenALSoundImplementation;
      }
      else if (apiName == "Audioworks")
      {
         mImplementation = new AudioWorksSoundImplementation;
      }
      else
      {
         mImplementation = new StubSoundImplementation;
      }
   }
private:  

   /** @link dependency */
   /*#  ajSoundImplementation lnkSoundImplementation; */

   /** @link dependency */
   /*#  ajStubSoundImplementation lnkajStubSoundImplementation; */

   /** @link dependency */
   /*#  ajAudioWorksSoundImplementation lnkajAudioWorksSoundImplementation; */

   /** @link dependency */
   /*#  ajOpenALSoundImplementation lnkajOpenALSoundImplementation; */
};
#endif //AJSOUNDFACTORY_H