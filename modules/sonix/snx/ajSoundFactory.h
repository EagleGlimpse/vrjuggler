/* Generated by Together */

#ifndef AJSOUNDFACTORY_H
#define AJSOUNDFACTORY_H
#include <iostream>
#include <string>
#include "aj/ajSingleton.h"
#include "aj/ajSoundImplementation.h"

class ajSoundFactory : public aj::Singleton<ajSoundFactory>
{
public:

   /**
    * @input name of api to create
    * @output an implementation is returned for you to use
    * @postconditions if apiName is not known, then a stub implementation is returned
    * @semantics factory function used to create an implementation of a sound API 
    */
   void createImplementation( const std::string& apiName,
                              ajSoundImplementation* &mImplementation );

   // pass NULL to unregister/delete an API...
   void reg( const std::string& apiName, ajSoundImplementation* impl )
   {
      std::cout<<"loading plugin: "<<apiName<<"\n"<<std::flush;
      mRegisteredImplementations[apiName] = impl;
   }
   
   std::map< std::string, ajSoundImplementation* > mRegisteredImplementations;
private:  
   /** @link dependency */
   /*#  ajSoundImplementation lnkSoundImplementation; */

   /** @link dependency */
   /*#  ajStubSoundImplementation lnkajStubSoundImplementation; */

   /** @link dependency */
   /*#  ajAudioWorksSoundImplementation lnkajAudioWorksSoundImplementation; */

   /** @link dependency */
   /*#  ajOpenALSoundImplementation lnkajOpenALSoundImplementation; */
};

template <class _type>
class ajSoundFactoryReg
{
public:
   _type mSoundAPI;
   std::string mNameOfAPI;
   ajSoundFactoryReg( const std::string& apiName ) : mNameOfAPI( apiName ), mSoundAPI()
   {
      ajSoundFactory::instance().reg( mNameOfAPI, &mSoundAPI );
   }
   virtual ~ajSoundFactoryReg()
   {
      ajSoundFactory::instance().reg( mNameOfAPI, NULL );
   }   
};

#endif //AJSOUNDFACTORY_H
