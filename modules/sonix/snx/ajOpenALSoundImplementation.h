/* Generated by Together */

#ifndef AJOPENALSOUNDIMPLEMENTATION_H
#define AJOPENALSOUNDIMPLEMENTATION_H

#include <string>
#include "ajSoundImplementation.h"
#include "ajSoundInfo.h"

class ajOpenALSoundImplementation : public ajSoundImplementation
{
public:
   /**
    * @input alias of the sound to trigger, and number of times to play
    * @preconditions alias does not have to be associated with a loaded sound.
    * @postconditions if it is, then the loaded sound is triggered.  if it isn't then nothing happens.
    * @semantics Triggers a sound
    */
   virtual void trigger(const std::string & alias, const unsigned int & looping = 0)
   {
      ajSoundImplementation::trigger( alias, looping );

      int id = this->_allookup( alias );
      if (id >= 0)
      {
         alSourcePlay( id );
      }
   }

   /**
    * @semantics stop the sound
    * @input alias of the sound to be stopped
    */
   virtual void stop(const std::string & name)
   {
      ajSoundImplementation::stop( name );
      int id = this->_allookup( alias );
      if (id >= 0)
      {
         alSourceStop( id );
      }
   }

   /**
    * take a time step of [timeElapsed] seconds.
    * @semantics call once per sound frame (doesn't have to be same as your graphics frame)
    * @input time elapsed since last frame
    */
   virtual void step( const float & timeElapsed )
   {
      ajSoundImplementation::step( timeElapsed );
      
      static ALfloat position[] = { 10.0, 0.0, 4.0 };
           static ALfloat movefactor = 4.5;
           static time_t then = 0;
           time_t now;
           ALint size;

           now = time( NULL );

           /* Switch between left and right stereo sample every two seconds. */
           if( now - then > 2 ) {
                   then = now;

                   movefactor *= -1.0;
           }

           position[0] += movefactor;
           alSourcefv( moving_source, AL_POSITION, position );

      micro_sleep( 500000 );

           ALint byteloki;
           alGetSourceiv( moving_source, AL_BYTE_LOKI, &byteloki );
           alGetBufferi( resourceID,     AL_SIZE,      &size );

           //fprintf(stderr, "byteloki = %d size = %d\n", byteloki, size);

           return;
   }


  /**
    * associate a name (alias) to the description
    * @preconditions provide an alias and a SoundInfo which describes the sound
    * @postconditions alias will point to loaded sound data
    * @semantics associate an alias to sound data.  later this alias can be used to operate on this sound data.
    */
   virtual void associate( const std::string& alias, const ajSoundInfo& description )
   {
      ajSoundImplementation::associate( alias, description );
      // do nothing
   }

   /**
    * remove alias->sounddata association 
    */
   virtual void remove( const std::string alias )
   {
      ajSoundImplementation::remove( alias );
      // do nothing
   }

   /**
    * set sound's 3D position 
    */
   virtual void setPosition( const std::string& alias, float x, float y, float z )
   {
      ajSoundImplementation::setPosition( alias, x, y, z );

      float pos[3];
      pos[0] = x; pos[1] = y; pos[2] = z;

      int id = this->_allookup( alias );
      if (id >= 0)
      {
         alSourcefv( id, AL_POSITION, pos );
      }
   }

   /**
    * get sound's 3D position
    * @input alias is a name that has been associate()d with some sound data
    * @output x,y,z are returned in OpenGL coordinates.
    */
   virtual void getPosition( const std::string& alias, float& x, float& y, float& z )
   {
      ajSoundImplementation::getPosition( alias, x, y, z );
   }
   
   /**
    * set the position of the listener
    */
   virtual void setListenerPosition( const float& x, const float& y, const float& z )
   {
      ajSoundImplementation::setListenerPosition( x, y, z );

//      #define ALMAXDISTANCE 60.0f
//      clamp( x, -ALMAXDISTANCE, ALMAXDISTANCE );
//      clamp( y, -ALMAXDISTANCE, ALMAXDISTANCE );
//      clamp( z, -ALMAXDISTANCE, ALMAXDISTANCE );

      ALfloat lispos[] = { x, y, z };
      alListenerfv( AL_POSITION, lispos );
   }

   /**
    * get the position of the listener
    */
   virtual void getListenerPosition( float& x, float& y, float& z )
   {
      ajSoundImplementation::getListenerPosition( x, y, z );
   }
protected:
   /**
    * start the sound API, creating any contexts or other configurations at startup
    * @postconditions sound API is ready to go.
    * @semantics this function should be called before using the other functions in the class.
    */
   virtual void startAPI()
   {
   }

   /**
    * kill the sound API, deallocating any sounds, etc...
    * @postconditions sound API is ready to go.
    * @semantics this function could be called any time, the function could be called multiple times, so it should be smart.
    */
   virtual void shutdownAPI()
   {
   }   

   /**
    * clear all associate()tions.
    * @semantics any existing aliases will be stubbed. aounds will be unbind()ed
    */
   virtual void clear()
   {
   }   
   
   /**
    * bind: load (or reload) all associate()d sounds
    * @postconditions all sound associations are buffered by the sound API
    */
   virtual void _bindAll()
   {
   }   

   /**
    * unbind: unload/deallocate all associate()d sounds.
    * @postconditions all sound associations are unbuffered by the sound API
    */
   virtual void _unbindAll()
   {
   }

   /**
    * load/allocate the sound data this alias refers to the sound API
    * @postconditions the sound API has the sound buffered.
    */
   virtual void _bind( const std::string& alias )
   {
   }   

   /**
    * unload/deallocate the sound data this alias refers from the sound API
    * @postconditions the sound API no longer has the sound buffered.
    */
   virtual void _unbind( const std::string& alias )
   {
   }
   
private:
    /** @link dependency */
    /*#  ajSoundInfo lnkSoundInfo; */
};
#endif //AJOPENALSOUNDIMPLEMENTATION_H
