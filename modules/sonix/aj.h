/* Generated by Together */

#ifndef AJ_H
#define AJ_H
#include "ISoundInterface.h"
class aj : public ISoundInterface
{
public:

   aj() : ISoundInterface()
   {
   }

   virtual ~aj()
   {
   }

   /**
    * @input alias of the sound to trigger, and number of times to play
    * @preconditions alias does not have to be associated with a loaded sound.
    * @postconditions if it is, then the loaded sound is triggered.  if it isn't then nothing happens.
    * @semantics Triggers a sound
    */
   virtual void trigger( const std::string & alias, const unsigned int & repeat = -1 )
   {
      this->impl().trigger( alias, looping );
   }

   /**
    * @semantics stop the sound
    * @input alias of the sound to be stopped
    */
   virtual void stop(const std::string & name)
   {
      this->impl().stop( name );
   }

   /**
    * @semantics call once per sound frame (doesn't have to be same as your graphics frame)
    * @input time elapsed since last frame
    */
   virtual void step(const float & timeElapsed)
   {
      this->impl().step( timeElapsed );
   }


   /**
    * associate a name (alias) to the description
    * @preconditions provide an alias and a SoundInfo which describes the sound
    * @postconditions alias will point to loaded sound data
    * @semantics associate an alias to sound data.  later this alias can be used to operate on this sound data.
    */
   virtual void associate( const std::string& alias, const SoundInfo& description )
   {
      this->impl().associate( alias, description );
   }


   /**
    * remove alias->sounddata association 
    */
   virtual void remove(const std::string alias)
   {
      this->impl().remove( alias );
   }

   /**
    * set sound's 3D position 
    * @input x,y,z are in OpenGL coordinates.  alias is a name that has been associate()d with some sound data
    */
   virtual void setPosition( const std::string& alias, float x, float y, float z )
   {
      this->impl().setPosition( alias, x, y, z );
   }

   /**
    * get sound's 3D position
    * @input alias is a name that has been associate()d with some sound data
    * @output x,y,z are returned in OpenGL coordinates.
    */
   virtual void getPosition( const std::string& alias, float& x, float& y, float& z )
   {
      this->impl().setPosition( alias, x, y, z );
   }

   /**
    * change the underlying sound API to something else.
    * @input usually a name of a valid registered sound API implementation
    * @preconditions sound implementation should be registered
    * @postconditions underlying API is changed to the requested API name.   if apiName's implementation is not registered, then underlying API is changed to the stub version.
    * @semantics function is safe: always returns a valid implementation.
    * @time O(1)
    * @output a valid sound API.  if apiName is invalid, then a stub implementation is returned.
    */
   virtual void changeAPI( const std::string& apiName )
   {
      SoundImplementation* oldImpl = mImplementation;
      SoundFactory::instance()->createImplementation( apiName, mImplementation );

      mImplementation->copy( oldImpl );

      if (oldImpl != NULL)
      {
         delete oldImpl;
         oldImpl = NULL;
      }
   }

protected:
   SoundImplementation& impl()
   {
      if (mImplementation == NULL)
      {
         SoundFactory::instance()->createImplementation( "stub", mImplementation, result );
         assert( result != false && "couldn't create dummy impl" );
      }
      return *mImplementation;
   }
private:
   /** @link dependency */
   /*#  SoundFactory lnkSoundFactory; */

   /** @link aggregation 
    * @clientCardinality 1
    * @supplierCardinality 1*/
   SoundImplementation* mImplementation;
};
#endif //AJ_H
