package org.vrjuggler.jccl.editors;

import java.awt.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;

import org.vrjuggler.jccl.config.*;

public class ConfigContextEditor
   extends JPanel
{
   public ConfigContextEditor()
   {
      // Init the GUI
      try
      {
         jbInit();
      }
      catch (Exception e)
      {
         e.printStackTrace();
      }

      // Set up the tree
      mContextModel = new ConfigContextModel();
      mElementTree.setModel(mContextModel);
      mElementTree.setCellRenderer(new ConfigContextCellRenderer());
      mElementTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

      // Setup a listener for the tree so that when an element is selected, the
      // appropriate element is displayed in the property sheet.
      mElementTree.addTreeSelectionListener(new TreeSelectionListener()
      {
         public void valueChanged(TreeSelectionEvent evt)
         {
            DefaultMutableTreeNode node =
               (DefaultMutableTreeNode)mElementTree.getLastSelectedPathComponent();
            Object value = node.getUserObject();
            if (value == null || !(value instanceof ConfigElement))
            {
               return;
            }

            ConfigElement elt = (ConfigElement)value;
            mElementPropSheet.setElement(elt);
         }
      });
   }

   /**
    * Sets the configuration context this editor should be editing.
    *
    * @param context      the context to edit
    */
   public void setContext(ConfigContext context)
   {
      mContextModel.setContext(context);
      java.util.List elts = getBroker().getElements(context);
      if (elts.size() > 0)
      {
         ConfigElement elt = (ConfigElement)elts.get(0);
         mElementPropSheet.setElement(elt);
      }

      mElementTree.expandPath(new TreePath(mContextModel.getRoot()));
   }

   /**
    * Gets the configuration context this editor is editing.
    *
    * @return  the context being edited
    */
   public ConfigContext getContext()
   {
      return mContextModel.getContext();
   }

   /**
    * Gets a handle to the configuration broker.
    */
   protected ConfigBroker getBroker()
   {
      if (mBroker == null)
      {
         synchronized (this)
         {
            if (mBroker == null)
            {
               mBroker = new ConfigBrokerProxy();
            }
         }
      }
      return mBroker;
   }

   /**
    * Initializes the GUI. Auto-generated by JBuilder.
    */
   private void jbInit()
      throws Exception
   {
      this.setLayout(mBaseLayout);
      mElementTreeScrollPane.setMinimumSize(new Dimension(0, 0));
      mElementTree.setRootVisible(false);
      mElementTree.setShowsRootHandles(true);
      mBaseSplitPane.setOneTouchExpandable(true);
      this.add(mBaseSplitPane, BorderLayout.CENTER);
      mBaseSplitPane.add(mElementTreeScrollPane, JSplitPane.LEFT);
      mBaseSplitPane.add(mElementPropSheetScrollPane, JSplitPane.RIGHT);
      mElementPropSheetScrollPane.getViewport().add(mElementPropSheet, null);
      mElementTreeScrollPane.getViewport().add(mElementTree, null);
   }

   private BorderLayout mBaseLayout = new BorderLayout();
   private JSplitPane mBaseSplitPane = new JSplitPane();
   private JScrollPane mElementTreeScrollPane = new JScrollPane();
   private JTree mElementTree = new JTree();
   private JScrollPane mElementPropSheetScrollPane = new JScrollPane();
   private ConfigElementPropertySheet mElementPropSheet = new ConfigElementPropertySheet();

   /** The data model used to represent the context. */
   private ConfigContextModel mContextModel;

   /** The handle to the configuration broker. */
   private ConfigBroker mBroker;
}

class ConfigContextCellRenderer
   extends DefaultTreeCellRenderer
{
   public ConfigContextCellRenderer()
   {
      ClassLoader loader = getClass().getClassLoader();
      try
      {
         // Get all the icons we'll ever need now so we can reuse them later
         mElementIcon = new ImageIcon(loader.getResource(
            "org/vrjuggler/jccl/editors/images/configchunk.gif"));
         mPropertyIcon = new ImageIcon(loader.getResource(
            "org/vrjuggler/jccl/editors/images/property.gif"));
         mCategoryIcon = new ImageIcon(loader.getResource(
            "org/vrjuggler/jccl/editors/images/category.gif"));
      }
      catch (NullPointerException npe)
      {
         // Images aren't available ... oh well
      }
   }

   public Component getTreeCellRendererComponent(
                        JTree tree, Object node, boolean selected,
                        boolean expanded, boolean leaf, int row,
                        boolean focused)
   {
      // Get the default settings from the UI LAF
      super.getTreeCellRendererComponent(tree, node, selected,
                                         expanded, leaf, row, focused);

      Object value = ((DefaultMutableTreeNode)node).getUserObject();

      // Display the name of configuration elements
      if (value instanceof ConfigElement)
      {
         setText(((ConfigElement)value).getName());
         setFont(null);
         setIcon(mElementIcon);
      }
      // Display the name of properties
      else if (value instanceof PropertyDefinition)
      {
         setText(((PropertyDefinition)value).getName());
         setFont(tree.getFont().deriveFont(Font.ITALIC));
         setIcon(mPropertyIcon);
      }
      // Display the name of categories
      else if (value instanceof Category)
      {
         setText(((Category)value).getName());
         setFont(tree.getFont().deriveFont(Font.BOLD));
         setIcon(null);
      }

      return this;
   }

   private Icon mElementIcon;
   private Icon mPropertyIcon;
   private Icon mCategoryIcon;
}
