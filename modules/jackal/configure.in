# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998, 1999, 2000 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Base configure.in for Juggler App Control & Configuration Library (Jackal).
# -----------------------------------------------------------------------------
# This file is "compiled" by GNU autoconf to generate the configure script
# that is actually run.
# -----------------------------------------------------------------------------

AC_REVISION($Revision$)
AC_INIT(vjConfig.h)
AC_CONFIG_HEADER(vjDefines.h)
DPP_PREREQ(1.4)
DPP_INIT

# Generate the reconfig script first so that it's easy to run configure again
# if it fails later on.
DPP_GEN_RECONFIG

# -----------------------------------------------------------------------------
# Command-line arguments (--enable-option, --with-pkg=package_name).
# -----------------------------------------------------------------------------

# ------------------------------------------------------ #
# --enable-feature[=arg] and --disable-feature arguments #
# ------------------------------------------------------ #

DPP_STD_CPP(yes)

# Define which threading model to use.  Possible values are "SPROC", "POSIX",
# "WIN32", or "NSPR".
# The default is "SPROC".
#AC_ARG_ENABLE(subsystem,
#              [  --enable-subsystem=<SPROC|POSIX|WIN32|NSPR>
#                          Define OS abstraction subsystem],
#              SUBSYSTEM="$enableval", SUBSYSTEM='none')

#AC_ARG_ENABLE(sound,
#              [  --enable-sound          Enable AudioJuggler sound       [default=no]],
#              AJSOUNDMANAGER="$enableval", AJSOUNDMANAGER='no')

#if test "$AJSOUNDMANAGER" = "yes" ; then
#   USE_AUDIOJUGGLER='Y'
#else
#   USE_AUDIOJUGGLER='N'
#fi
#AC_SUBST(USE_AUDIOJUGGLER)



# Enable performance testing.  Values that enable it are as follows:
#
#      SGI: Enable SGI IPC performance testing.  This defines VJ_PERFORMANCE to
#           be VJ_PERF_SGI
#    POSIX: Enable POSIX threads performance testing.  This defines
#           VJ_PERFORMANCE to be VJ_PERF_POSIX
#
# Values that disable it are "no" or "NONE".  The default is "SGI".
AC_ARG_ENABLE(performance,
              [  --enable-performance=<SGI|POSIX|NONE>
                          enable performance testing      [default=SGI] ],
              [ if test "x$enableval" = "xyes" ; then
                    _enable_perf='SGI'
                elif test "x$enableval" = "xno" ; then
                    _enable_perf='NONE'
                else
                    _enable_perf="$enableval"
                fi
              ], _enable_perf='SGI')

# This enables the use of so-called "NSPR threads".  By default, NSPR is not
# compiled to use NSPR threads, so we do not want to use them by default
# either.
DPP_ENABLE_NSPR_THREADS(no)

# -------------------------------------------- #
# --with-pkg[=arg] and --without-pkg arguments #
# -------------------------------------------- #

# Force the use of GCC as the compiler.
# NOTE: This is not fully implemented yet for any platform, but it is partially
# usable on Windows.
DPP_WITH_GCC(no)

# Define the root directory for the Xerces-c installation.
AC_ARG_WITH(xercesroot,
            [  --with-xercesroot=<PATH>
                          Xerces-c installation directory [default=/usr]],
            XERCESROOT="$withval", XERCESROOT="/usr")

AC_ARG_WITH(xerceslib,
            [  --with-xerceslib=<NAME>
                          Xerces-c base library name      [default=xerces-c]],
            XERCES_LIB="$withval", XERCES_LIB='xerces-c')

# Define the binary format.
DPP_ABI_SETUP

# -----------------------------------------------------------------------------
# System-dependent stuff.
# -----------------------------------------------------------------------------
DPP_WIN32_SETUP

# We use AC_CANONICAL SYSTEM so that we can find out information about the
# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP

# These are used on all platforms.
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE, "$OS_REL_STR")
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MAJOR, $OS_REL_NUM_MAJOR)
AC_DEFINE_UNQUOTED(VJ_OS_RELEASE_MINOR, $OS_REL_NUM_MINOR)

# Depending on the target operating system, set various command options and
# such.
case $target_os in
    # SGI running IRIX 6.*.
    irix6*)
        DBG_FLAGS="$DBG_FLAGS -gslim"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of SPROC subsystem ***)
            SUBSYSTEM='SPROC'
        fi

        AC_DEFINE(VJ_OS_IRIX,)
        AC_DEFINE(_BSD_TYPES,)
        ;;
    # HP PA-RISC machine running HP-UX 10.20.
    hpux10.20)
        # We have to use the NSPR subsystem on HP-UX 10.20.
        if test "x$SUBSYSTEM" != "xNSPR" ; then
            AC_MSG_WARN(*** Forcing the use of NSPR subsystem ***)
            SUBSYSTEM='NSPR'
        fi

        AC_DEFINE(VJ_OS_HPUX,)
        AC_DEFINE(VJ_HPUX_VERSION, 10)
        AC_DEFINE(_INCLUDE_TERMIO,)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        ;;
    # HP PA-RISC machine running HP-UX 11.x.
    hpux11*)
        AC_DEFINE(VJ_OS_HPUX,)
        AC_DEFINE(VJ_HPUX_VERSION, 11)
        AC_DEFINE(_INCLUDE_TERMIO,)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        ;;
    # DEC Alpha running Digital UNIX 4.0.
    osf4.0)
        AC_DEFINE(VJ_OS_DUX,)
        ;;
    # A machine running FreeBSD.  Currently only i386 is known to compile.
    freebsd*)
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VJ_OS_FreeBSD,)
        ;;
    # A machine running Linux.  Currently only i386 is known to work.
    linux*)
        # CXXFLAGS="-fhonor-std -Wall -Werror-implicit-function-declaration $CXXFLAGS"
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VJ_OS_Linux,)
        ;;
    # A machine running Solaris (aka SunOS).  Currently only i386 is known to
    # work.
    solaris*)
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VJ_OS_Solaris,)
        ;;
    # IBM RS/6000 running AIX.
    aix*)
        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VJ_OS_AIX)
        ;;
    # i386-class machine running Windows {98,NT} with Cygnus GNU-Win32.
    cygwin)
        # There is no performance testing/monitoring code for Win32 (yet).
        if test "x${_enable_perf}" != "xNONE" ; then
            AC_MSG_WARN(*** Disabling performance testing on $host ***)
            _enable_perf='NONE'
        fi

        # We have to use Win32 subsystem on Win32.
        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of WIN32 subsystem ***)
            SUBSYSTEM='WIN32'
        fi

        AC_DEFINE(VJ_OS_Win32,)
        ;;
    darwin1.*)
        if test "x$SUBSYSTEM" != "xNSPR" ; then
            AC_MSG_WARN(*** Forcing the use of NSPR subsystem ***)
            SUBSYSTEM='NSPR' 
        fi

        AC_DEFINE(VJ_OS_Darwin,)
        AC_DEFINE(_BSD_TYPES,) 
        ;;
    # Unkown operating system (to config.guess).
    unknown)
        AC_DEFINE(VJ_OS_GENERIC,)
        ;;
esac

# --------------------------------------------------------------------
# Depending on host type and the value in ${_enable_perf}, define the
# settings for the performance code.
# --------------------------------------------------------------------
if test "$PLATFORM" != "IRIX" -a "${_enable_perf}" != "NONE" ; then
    _enable_perf='POSIX'
fi

# Define unique values for each type of performance testing option.
# Only one of these may be used for the value to which VJ_PERFORMANCE is set.
AC_DEFINE(VJ_PERF_NONE, 0)
AC_DEFINE(VJ_PERF_SGI, 1)
AC_DEFINE(VJ_PERF_POSIX, 2)

# Define VJ_PERFORMANCE based on ${_enable_perf}.  Default to VJ_PERF_SGI if
# ${_enable_perf} has some unknown value.
if test "x${_enable_perf}" = "xSGI" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
elif test "x${_enable_perf}" = "xPOSIX" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_POSIX)
elif test "x${_enable_perf}" = "xNONE" ; then
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_NONE)
else
    AC_DEFINE(VJ_PERFORMANCE, VJ_PERF_SGI)
fi

# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP

# Now check to see if the compiler accepts the -pthread option.
if test "x$SUBSYSTEM" != "xSPROC" -a "x$SUBSYSTEM" != "xWIN32" -a \
        "x$NSPR_THREADS_ENABLED" != "xyes"
then
    DPP_CC_PTHREAD_ARG

    if test "x$CC_ACCEPTS_PTHREAD" = "xno" ; then
        DPP_CC_PTHREADS_ARG
    fi
fi

# Check for the JDK.
DPP_PATH_JAVA

# If there is still no value in $JAVAC, then warn that the GUI will not be
# built.
if test "x$JAVAC" = "xno" ; then
    AC_MSG_WARN(*** VjControl requires javac -- it will not be built ***)
    BUILD_GUI='N'
else
    # Check for JAXP extensions to JDK
    DPP_CHECK_JAVA_STATIC_METHOD(javax.xml.parsers.DocumentBuilderFactory,
        newInstance(), ,
        BUILD_GUI='Y',
        [ BUILD_GUI='N' ;
          AC_MSG_WARN(*** VjControl requires JAXP extensions for java -- it will not be built ***) ])
fi

# Ensure that a version of Perl greater than or equal to 5.004 is available.
DPP_PERL_VER(5.004)

AC_CHECK_PROG(MTREE_CMD, mtree, mtree, \$(PERL) \$(scriptdir)/mtree.pl)

DPP_BASIC_PROGS($PLATFORM, $OS_TYPE)

# -----------------------------------------------------------------------------
# Checks for libraries.
# -----------------------------------------------------------------------------

# Shared memory and synchronization primitives.
SEMAPHORE_SYS=''		# POSIX, SPROC, WIN32, NSPR
MUTEX_SYS=''			# POSIX, SPROC, WIN32, NSPR
SHMEM_SYS=''			# POSIX, SPROC, WIN32, NSPR
THREAD_SYS=''			# POSIX, SPROC, WIN32, NSPR

# Find the library with the pthreads symbols.
if test "x$SUBSYSTEM" = "xPOSIX" ; then
    DPP_GET_PTHREAD_LIB

    # If $PTHREAD_LIB has a value at this point, then the pthread
    # libraries needed are in $LIBS, so now we make a check for the draft
    # revision being used.  This is done by determining if pthread_kill()
    # is in the library.  If it is, Draft 10 is in use.  Otherwise, assume
    # it is Draft 4.
    if test "$xPTHREAD_LIB" != "x" ; then
        DPP_GET_PTHREAD_VER($PLATFORM, VJ_POSIX_C_SOURCE)

        # Define the default thread scope depending on the platform.  On
        # IRIX, only process scope is avaiable without special configuration
        # options.  Other systems may support system scope.
        if test "$PLATFORM" = "IRIX" ; then
            AC_DEFINE(VJ_THREAD_SCOPE, PTHREAD_SCOPE_PROCESS)
        else
            AC_DEFINE(VJ_THREAD_SCOPE, PTHREAD_SCOPE_SYSTEM)
        fi

        USE_PTHREADS='yes'
        DPP_GET_POSIX_SEMAPHORE_LIB( ,
            AC_MSG_ERROR(*** POSIX semaphores are required for POSIX subsystem ***))
    else
        AC_MSG_WARN(*** POSIX threads will not be used (no library found) ***)
    fi

    # Do not define _POSIX_C_SOURCE here because it will cause problems when
    # compiling on IRIX.  Instead, define that in the source files where
    # appropriate.
    AC_DEFINE(VJ_USE_PTHREADS,)
    AC_DEFINE(VJ_POSIX_SEMAPHORES,)
    AC_DEFINE(RWSTD_MULTI_THREAD,)
    AC_DEFINE(RW_MULTI_THREAD,)
    AC_DEFINE(_THREAD_SAFE,)

    # On Linux, defining _THREAD_SAFE is the same as defining _REENTRANT, so
    # we will not define both.
    if test "x$PLATFORM" != "xLinux" ; then
        AC_DEFINE(_REENTRANT,)
    fi

    # Use POSIX threading, mutexes and shared memory.
    MUTEX_SYS='POSIX'
    SHMEM_SYS='POSIX'
    THREAD_SYS='POSIX'
    SEMPANORE_SYS='POSIX'
# We are using WIN32 threads.
elif test "x$SUBSYSTEM" = "xWIN32" ; then
    # Set to Win32 threading, synchronization and shared memory.
    SEMPANORE_SYS='WIN32'
    THREAD_SYS='WIN32'
    MUTEX_SYS='WIN32'
    SHMEM_SYS='WIN32'
# If we are not using POSIX threads, we must be using the IRIX sproc(2) model,
# but we test $SUBSYSTEM just to be sure it is set right.
elif test "x$SUBSYSTEM" = "xSPROC" ; then
    AC_CHECK_HEADERS(sys/prctl.h, ,
        AC_MSG_ERROR(*** IRIX sproc(2) threading will not be used (no headers found) ***))

    AC_DEFINE(VJ_IRIX_SPROC,)

    # Set to IRIX sproc threading, synchronization and shared memory.
    THREAD_SYS='SPROC'
    SEMAPHORE_SYS='SPROC'
    SHMEM_SYS='SPROC'
    MUTEX_SYS='SPROC'
# NSPR subsystem.
else
    if test "x$NSPR_THREADS_ENABLED" = "xno" -a "x$OS_TYPE" = "xUNIX" ; then
        DPP_GET_PTHREAD_LIB
        DPP_GET_POSIX_SEMAPHORE_LIB( ,
            AC_MSG_ERROR(*** POSIX semaphores are required for NSPR subsystem ***))
        USE_PTHREADS='yes'
    else
        USE_PTHREADS='no'
    fi

#    DPP_HAVE_NSPR(4.0, "$USE_PTHREADS",
#        AC_MSG_ERROR(*** NSPR requried for compiling ***))

    AC_DEFINE(VJ_USE_NSPR,)

    # Set to NSPR threading, synchronization and shared memory.
    SEMPANORE_SYS='NSPR'
    THREAD_SYS='NSPR'
    MUTEX_SYS='NSPR'
    SHMEM_SYS='NSPR'
fi


# -----------
# Xerces-c
# -----------
_vjsave_CFLAGS="$CFLAGS"
_vjsave_CPPFLAGS="$CPPFLAGS"
_vjsave_INCLUDES="$INCLUDES"
_vjsave_LDFLAGS="$LDFLAGS"
_vjsave_LIBS="$LIBS"

# Ensure that /usr/include and /usr/lib are not included multiple times
# if XERCESROOT is "/usr".
if test "x$XERCESROOT" != "x/usr" ; then
    CPPFLAGS="-I$XERCESROOT/include $CPPFLAGS"
    INCLUDES="-I$XERCESROOT/include $INCLUDES"
    LDFLAGS="-L$XERCESROOT/lib$LIBBITSUF $LDFLAGS"
fi

CFLAGS="$CFLAGS $INCLUDES ${_EXTRA_FLAGS}"
LDFLAGS="$LDFLAGS $X_LDFLAGS"
LIBS="$LIBS -l$XERCES_LIB"

DPP_LANG_SAVE
DPP_LANG_CPLUSPLUS

AC_CHECK_HEADER(util/XercesDefs.hpp, ,
    AC_MSG_ERROR(*** Xerces-C headers not found ***))

# Extract the full Xerces version number and transform it into the form x.y.z.
changequote(<<, >>)
xerces_ver_str=`grep gXercesFullVersionStr $XERCESROOT/include/util/XercesDefs.hpp | sed -e 's/.*"\([1-9][0-9_]*\)".*/\1/' | sed -e 's/_/./g'`
changequote([, ])

DPP_VERSION_CHECK_MSG(Xerces C++, $xerces_ver_str, 1.5.1,
                      acp_cv_xerces_c_version_okay, ,
                      AC_MSG_ERROR(*** Xerces-C version too old ***))

# Finally, check that the library actually exists where we expect it to be.
AC_CACHE_CHECK(for XMLPlatformUtils::Initialize in $XERCES_LIB,
    ac_cv_initialize_in_xerces_c,
    AC_TRY_LINK([#include <util/PlatformUtils.hpp> ],
                [ XMLPlatformUtils::Initialize(); ],
                [ ac_cv_initialize_in_xerces_c='yes' ; rm -rf ./ii_files ],
                AC_MSG_ERROR(*** Xerces-C library not found ***)))

DPP_LANG_RESTORE

XERCES_INCLUDES="-I$XERCESROOT/include"

if test "x$OS_TYPE" = "xWin32" ; then
    XERCES_LDFLAGS="-libpath:$XERCESROOT/lib"
else
    XERCES_LDFLAGS="-L$XERCESROOT/lib$LIBBITSUF"
fi

CFLAGS="${_vjsave_CFLAGS}"
CPPFLAGS="${_vjsave_CPPFLAGS}"
INCLUDES="${_vjsave_INCLUDES}"
LDFLAGS="${_vjsave_LDFLAGS}"
LIBS="${_vjsave_LIBS}"

# -----------------------------------------------------------------------------
# Checks for header files.
# -----------------------------------------------------------------------------
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h sys/ioctl.h	\
                 sys/time.h termios.h unistd.h sys/z8530.h		\
                 sys/capability.h sys/stdsyms.h)

# -----------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
# -----------------------------------------------------------------------------
AC_TYPE_PID_T
AC_TYPE_SIZE_T

# The following checks for availability of the socklen_t type.  Since it is
# supposed to be defined in sys/socket.h, the usual AC_CHECK_TYPE method will
# not work.
AC_CACHE_CHECK(for socklen_t, ac_cv_has_socklen_t,
    AC_TRY_COMPILE([#include <sys/types.h>
                    #include<sys/socket.h> ],
                   [ socklen_t var; ],
                   ac_cv_has_socklen_t='yes',
                   ac_cv_has_socklen_t='no'))

if test "x$ac_cv_has_socklen_t" = "xno" ; then
    AC_DEFINE(socklen_t, int)
fi

DPP_CHECK_TYPE_POSIX

# -----------------------------------------------------------------------------
# Checks for library functions.
# -----------------------------------------------------------------------------
AC_CHECK_FUNCS(gettimeofday socket strcasecmp strdup strerror strtod strtok_r)

# All of the above function checks may not be necessary ...

_vjsave_LIBS="$LIBS"
AC_CHECK_FUNC(gethostbyname, SOCKET_LIB='',
    AC_CHECK_LIB(socket, gethostbyname, SOCKET_LIB='-lsocket'))
LIBS="${_vjsave_LIBS}"

# Ensure that we have sched_yield(3).  On Solaris, sched_yield(3) and its
# synchronization friends are in libposix4.
_vjsave_LIBS="$LIBS"
AC_CHECK_FUNC(sched_yield, AC_DEFINE(HAVE_SCHED_YIELD),
              AC_CHECK_LIB(posix4, sched_yield,
                  [ _sched_lib='-lposix4' ; AC_DEFINE(HAVE_SCHED_YIELD) ]))
LIBS="${_vjsave_LIBS}"

# In a Win32 environment with MS Visual C++ as the compiler, these math
# functions are not in any special library.  Test for them normally.
#if test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
#    AC_CHECK_FUNCS(sinf cosf sqrtf asinf acosf atan2f fabsf)
# Otherwise, they are in libmath if they are anywhere.
#else
#    AC_CHECK_LIB(m, sinf, AC_DEFINE(HAVE_SINF))
#    AC_CHECK_LIB(m, cosf, AC_DEFINE(HAVE_COSF))
#    AC_CHECK_LIB(m, sqrtf, AC_DEFINE(HAVE_SQRTF))
#    AC_CHECK_LIB(m, asinf, AC_DEFINE(HAVE_ASINF))
#    AC_CHECK_LIB(m, acosf, AC_DEFINE(HAVE_ACOSF))
#    AC_CHECK_LIB(m, atan2f, AC_DEFINE(HAVE_ATAN2F))
#    AC_CHECK_LIB(m, fabsf, AC_DEFINE(HAVE_FABSF))
#fi

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------

DPP_INSTALLER(vrjuggler, 0644, 0755, 0755)

# -----------------------------------------------------------------------------
# Do Makefile substitutions.
# -----------------------------------------------------------------------------
if test "x$X_INCLUDES" != "x" ; then
    INCLUDES="$INCLUDES $X_INCLUDES"
fi

if test "x$XERCES_INCLUDES" != "x" ; then
    INCLUDES="$INCLUDES $XERCES_INCLUDES"
fi

# For use in linking applications.
EXTRA_LINK_FLAGS="$STDFLAGS $EXTRA_LINK_FLAGS"

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" = "xno" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 3322 -w2"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -J4 -all"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    CXXFLAGS="$CXXFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS /nologo /incremental:no"
    DBG_FLAGS="$DBG_FLAGS /MTd"
    OPT_FLAGS="$OPT_FLAGS /MT"
fi

DPP_SYSTEM_SUBST

# If we are using pthreads, add the library containing the pthread calls to
# $LIBS.  This must be done here because the $APP_VJ_LIBS* stuff below uses
# $LIBS.
if test "x$USE_PTHREADS" = "xyes" ; then
    DPP_PTHREAD_FINISH
fi

INCLUDES="$INCLUDES $NSPR_INCLUDES"

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

# $srcdir is the root directory of the juggler source tree.  To get a value for
# $VJROOT_ABS, we cd there and save the value of running pwd.  Then return to
# the directory where configure is being run ($topdir).
cd "$srcdir"
JACKALROOT_ABS=`pwd`

cd "$JACKALROOT_ABS/../.."
JUGGLERROOT_ABS=`pwd`
cd "$topdir"

# Define the base path to the source directory using $(VJROOT_ABS) as an
# alternative to using $(srcdir).
JACKAL_SRCDIR='$(JACKALROOT_ABS)'
UNIX_JACKALROOT_ABS="$JACKALROOT_ABS"
UNIX_JUGGLERROOT_ABS="$JUGGLERROOT_ABS"

if test "x$OS_TYPE" = "xWin32" ; then
    APP_EXTRA_LIBS="$LDFLAGS $LIBS $XERCES_LDFLAGS $XERCES_LIB.lib comctl32.lib user32.lib gdi32.lib ws2_32.lib"
else
    APP_EXTRA_LIBS="$LDFLAGS $PTHREAD_ARG $XERCES_LDFLAGS -l$XERCES_LIB $LIBS $DTK_LDFLAGS $NSPR_LDFLAGS $NSPR_LIB $PTHREAD_LIB $SEM_LIB $SOCKET_LIB -lm"
fi

# Variables set in Makefiles found in the application trees.  All variables
# listed are for use only in the Makefile.in's found in that tree unless
# otherwise noted.  They are used in the following way:
#
#     * APP_VJ_LIBS_UTILS: The VR Juggler general utilities library.

# Put together the basic information needed to compile VR Juggler applications.
VJ_APP_COMPILER($CC, $CFLAGS, $CXX, $CXXFLAGS, $DBG_FLAGS, $OPT_FLAGS,
                VJ_BASE_DIR, $DEFS, $INCLUDES, ${_EXTRA_FLAGS})
VJ_APP_LINKER($CXX, $EXTRA_LINK_FLAGS, $LDOPTS_DBG, $LDOPTS_OPT, VJ_BASE_DIR,
              Juggler Juggler_utils, $APP_EXTRA_LIBS)

if test "$OS_TYPE" = "UNIX" ; then
    DYLIB_DEPS_VJ="$APP_EXTRA_LIBS"
    APP_VJ_LIBS_UTILS="-lJuggler_utils"

elif test "$OS_TYPE" = "Win32" ; then
    DYLIB_DEPS_BASIC="$APP_EXTRA_LIBS"
    DYLIB_DEPS_VJ="-libpath:\$(LIBDIR) Juggler_utils.lib $DYLIB_DEPS_BASIC"
    DYLIB_DEPS_UTILS="$DYLIB_DEPS_BASIC"

    APP_VJ_LIBS_UTILS='Juggler_utils.lib'
fi

# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    SAFE_JACKALROOT_ABS=`unix2dos -p "$JACKALROOT_ABS"`
    SAFE_JUGGLERROOT_ABS=`unix2dos -p "$JUGGLERROOT_ABS"`
    JACKAL_SRCDIR=`unix2dos "$JACKAL_SRCDIR"`

    DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    INCLUDES=`unix2dos "$INCLUDES"`
    LIBS=`unix2dos "$LIBS"`
    LN_S='cp'
    MTREE_CMD=`unix2dos "$MTREE_CMD"`

    JDK_HOME=`unix2dos -p "$JDK_HOME"`

    APP_EXTRA_LIBS=`unix2dos "$APP_EXTRA_LIBS"`
else
    SAFE_JACKALROOT_ABS="$JACKALROOT_ABS"
    SAFE_JUGGLERROOT_ABS="$JUGGLERROOT_ABS"
fi

# Set up some sed expressions that will help separate the share directory from
# the full installation prefix.
if test "x$prefix" = "xNONE" ; then
    _prefix_exp="s|^$ac_default_prefix/||"
else
    _prefix_exp="s|^$prefix/||"
fi

# Make a best-effort attempt to extract the actual share directory from the
# full installation prefix.  This is not foolproof, but it will work in almost
# all cases.  A person would have to be doing something malicious or foolish
# to make it break.
VJ_SHARE_DIR=`echo "$datadir" | sed -e 's|^${prefix}/||'`
VJ_SHARE_DIR=`echo "$VJ_SHARE_DIR" | sed -e "${_prefix_exp}"`

# Information needed to generate juggler-config.
case $SUBSYSTEM in
    SPROC)
        subsystem_cxxflags="$INCLUDES"
        subsystem_libs="$SEM_LIB $SOCKET_LIB"
        static_begin="-B static"
        static_end="-B dynamic"
        vrj_ldflags="-L\$prefix/lib$LIBBITSUF"
        vrj_libs='-lJuggler -lJuggler_utils -lJuggler_ogl'
        ;;
    POSIX)
        subsystem_cxxflags="$INCLUDES"
        subsystem_libs="$PTHREAD_LIB $SEM_LIB $SOCKET_LIB"

        if test "x$GXX" = "xyes" ; then
            static_begin="-Wl,-Bstatic"
            static_end="-Wl,-Bdynamic"
        else
            static_begin="-B static"
            static_end="-B dynamic"
        fi

        vrj_ldflags="-L\$prefix/lib$LIBBITSUF"
        vrj_libs='-lJuggler -lJuggler_utils -lJuggler_ogl'
        ;;
    NSPR)
        subsystem_cxxflags="$INCLUDES"
        subsystem_libs="$NSPR_LDFLAGS $NSPR_LIB $PTHREAD_LIB $SEM_LIB $SOCKET_LIB"

        if test "x$GXX" = "xyes" ; then
            static_begin="-Wl,-Bstatic"
            static_end="-Wl,-Bdynamic"
        else
            static_begin="-B static"
            static_end="-B dynamic"
        fi

        vrj_ldflags="-L\$prefix/lib$LIBBITSUF"
        vrj_libs='-lJuggler -lJuggler_utils -lJuggler_ogl'
        ;;
    WIN32)
        subsystem_cxxflags="$INCLUDES"
        subsystem_libs="$NSPR_LIB comctl32.lib user32.lib gdi32.lib ws2_32.lib"
        vrj_ldflags="/link /libpath:\$prefix/lib/debug $NSPR_LDFLAGS"
        vrj_libs='Juggler.lib Juggler_utils.lib Juggler_ogl.lib'
        ;;
esac

case $OS_TYPE in
    UNIX)
        Juggler_lib='-lJuggler'
        Juggler_utils_lib='-lJuggler_utils'
        Juggler_ogl_lib='-lJuggler_ogl'

        if test "x$PERFORMER_API" = "xY" ; then
            Juggler_pf_lib='-lJuggler_pf'
        fi

        ;;
    WIN32)
        Juggler_lib='Juggler.lib'
        Juggler_utils_lib='Juggler_utils.lib'
        Juggler_ogl_lib='Juggler_ogl.lib'
        ;;
esac

vrj_extra_ldflags="$APP_EXTRA_LIBS_BEGIN"
vrj_extra_libs="$APP_EXTRA_LIBS $APP_EXTRA_LIBS_GL $APP_EXTRA_LIBS_END"

DPP_SUBST


AC_SUBST(topdir)
AC_SUBST(UNIX_JACKALROOT_ABS)
AC_SUBST(UNIX_JUGGLERROOT_ABS)
AC_SUBST(SAFE_JACKALROOT_ABS)
AC_SUBST(SAFE_JUGGLERROOT_ABS)
AC_SUBST(JACKAL_SRCDIR)
AC_SUBST(VJ_SHARE_DIR)

AC_SUBST(EXTRA_LINK_FLAGS)

AC_SUBST(BUILD_GUI)

AC_SUBST(XERCESROOT)

AC_SUBST(SUBSYSTEM)
AC_SUBST(SEMAPHORE_SYS)
AC_SUBST(SHMEM_SYS)
AC_SUBST(MUTEX_SYS)
AC_SUBST(THREAD_SYS)

AC_SUBST(DYLIB_DEPS_VJ)
AC_SUBST(DYLIB_DEPS_UTILS)

AC_SUBST(APP_VJ_LIBS_UTILS)

AC_SUBST(subsystem_cxxflags)
AC_SUBST(subsystem_libs)
AC_SUBST(static_begin)
AC_SUBST(static_end)
AC_SUBST(vrj_ldflags)
AC_SUBST(vrj_libs)
AC_SUBST(Juggler_lib)
AC_SUBST(Juggler_utils_lib)
AC_SUBST(vrj_extra_ldflags)
AC_SUBST(vrj_extra_libs)

# -----------------------------------------------------------------------------
# Final file generation step.
# -----------------------------------------------------------------------------

VJ_MTREE_LIB_GEN(VJ, release/mtree, $PLATFORM, $ISA)

AC_OUTPUT(Makefile
          Makefile.inc
          common.defs.mk
          make.defs.mk
          Config/Makefile
          Environment/Makefile
          VjControl/Makefile
          Performance/Makefile
          samples/Makefile
          samples/vjcontrol/Makefile
          samples/vjcontrol/AudioPlayer/Makefile
          test/Makefile 
          test/TestSuite/Makefile
          test/CfgTest/Makefile
          VARS.pl)

cat <<BUILD_INFO

 Remember that you need to build Jackal with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the Jackal distribution.

BUILD_INFO
