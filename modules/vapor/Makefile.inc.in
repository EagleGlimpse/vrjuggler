# ***************** <VPR heading BEGIN do not edit this line> *****************
#
# VR Juggler Portable Runtime
#
# Original Authors:
#   Allen Bierbaum, Patrick Hartling, Kevin Meinert, Carolina Cruz-Neira
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# ****************** <VPR heading END do not edit this line> ******************

# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998, 1999, 2000, 2001 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Specialized include file for the top-level makefile.  Targets and variables
# needed for building the whole source tree are provided here.  This file
# should only be included by the top-level makefile.  It is written in such a
# way that no assumptions are made by this file about what the including file
# provides except that it includes make.defs.mk.
#
# Generated for use on @PLATFORM@
# -----------------------------------------------------------------------------

# Variables whose values are specific to this file.
includedir	= @includedir@/vpr
instlinks	= $(topdir)/instlinks
srcdir		= @srcdir@
top_srcdir	= @top_srcdir@
VPRROOT		= $(top_srcdir)
VJ_SRCDIR	= @VPR_SRCDIR@

# Extra compiler and linker options needed only by this file.
DBG_FLAGS	= -D_DEBUG @DBG_FLAGS@
OPT_FLAGS	= -D_OPT @OPT_FLAGS@

# =============================================================================
# Build and installation directory naming and ownership information.
# =============================================================================
DEFAULT_DIR	= $(OPT_DIR)

# If we have a name for the install group, define group-setting options for
# UNIX commands (chown(1), chgrp(1)) and for local Perl scripts
# (makefiles-gen.pl in particular).
ifdef GROUP_NAME
    _GROUP_OPT_PL	= --gname="$(GROUP_NAME)"
endif

# --------------------------------------------
# Library build information.
# --------------------------------------------

SHLIB_MAJOR	= 1
SHLIB_MINOR	= 0

STATICLIB_EXT	= @STATICLIB_EXT@
DYNAMICLIB_EXT	= @DYNAMICLIB_EXT@

# Full list of the libraries to build.
LIBS		= $(VPR_LIBRARY)
STATIC_LIBS	= $(LIBS)
DYNAMIC_LIBS	= $(LIBS)

DYLIB_DEPS	= @DYLIB_DEPS@

VPR_LIB_STATIC		= $(VPR_LIBRARY).$(STATICLIB_EXT)
VPR_LIB_DYNAMIC		= $(VPR_LIBRARY).$(DYNAMICLIB_EXT)

# Version information.
BRANCH		= HEAD
VER_ARGS	= -f $(VPRROOT_ABS)/VERSION -s @SUBSYSTEM@ -b $(BRANCH)	\
                  -i $(VPRROOT_ABS)/vpr/vprParam.h.in -o vpr/vprParam.h	\
                  -d "`date '+%b %e, %Y %H:%M:%S'`"

ifdef VERSION
    VER_ARGS	+= -v $(VERSION)
endif

# =============================================================================
# Library targets.
# =============================================================================

BEFOREBUILD	= beforebuild
AFTERBUILD	= afterbuild

# Things to do before the object files and library are built.
beforebuild:
	@$(SHELL) $(scriptdir)/make-ver.sh $(VER_ARGS)
	@$(PERL) $(scriptdir)/incvt.pl -i $(topdir)/config.status	\
            -t $(VPRROOT_ABS)/vpr-config.in -v $(VPRROT_ABS)/VERSION	\
            -o $(topdir)/vpr-config
	@chmod +x $(topdir)/vpr-config

# Things to do after the object files and library are built.
afterbuild:
	@$(MAKE) links

# -----------------------------------------------
# Construct the static version of the libraries.
# -----------------------------------------------
$(LIBDIR)/$(VPR_LIB_STATIC): $(OBJDIR)/*.$(OBJEXT)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(AR) $(AR_NAME_FLAG)$@ $(OBJDIR)/*.$(OBJEXT)
	$(RANLIB) $@
	cd $(LIBDIR_BASE) && rm -f $(notdir $@) && $(LN_S) $@ ./
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"

# ------------------------------------------------
# Construct the dynamic version of the libraries.
# ------------------------------------------------
$(LIBDIR)/$(VPR_LIB_DYNAMIC): $(OBJDIR)/*.$(OBJEXT)
	@echo "------------------------------------------------"
	@echo "Creating $@"
	@echo "------------------------------------------------"
	@$(SHELL) $(MKINSTALLDIRS) $(LIBDIR)
	$(LD) $(LDOPTS) $(DYLIB_NAME_FLAG) $(OBJDIR)/*.$(OBJEXT) $(DYLIB_DEPS)
	cd $(LIBDIR_BASE) && rm -f $(notdir $@) && $(LN_S) $@ ./
	@echo "------------------------------------------------"
	@echo "$@ done"
	@echo "------------------------------------------------"

# =============================================================================
# Make links for developer use that provide the needed functionality for
# the $VPR_BASE_DIR environment variable to be used when needed.
# $VPR_BASE_DIR should be set to $(instlinks).
# =============================================================================
links:
ifneq (@OS_TYPE@, Win32)
	@echo "------------------------------------------------"
	@echo "Setting up developer installation links"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)/include/vpr
	cd $(instlinks)/include &&					\
          for dir in $(SUBDIR) ; do					\
              rm -f ./$$dir ;						\
              ln -s $(VPRROOT_ABS)/$$dir ./$$dir ;			\
          done
	cd $(instlinks) && rm -f ./$(LIBDIR_NAME) &&			\
          ln -s $(LIBDIR_BASE) ./$(LIBDIR_NAME)
	cd $(instlinks)/include/vpr && rm -f ./*.h &&			\
          $(LN_S) $(VPRROOT_ABS)/vpr/*.h ./
	cd $(instlinks)/include/vpr && rm -f ./vprDefines.h &&		\
	  $(LN_S) $(topdir)/vpr/vprDefines.h ./vprDefines.h
	cd $(instlinks)/include/vpr && rm -f ./vprParam.h &&		\
	  $(LN_S) $(topdir)/vpr/vprParam.h ./vprParam.h
	$(SHELL) $(MKINSTALLDIRS) $(instlinks)/bin
	$(PERL) $(scriptdir)/incvt.pl -i $(topdir)/config.status	\
            -t $(VPRROOT_ABS)/vpr-config.in -p 'use_base_dir=yes'	\
            -v $(VPRROOT_ABS)/VERSION -o $(instlinks)/bin/vpr-config -x
	@echo "\n\n"
	@echo "---------------------------------------------------------------"
	@echo 'You should now set $$VPR_BASE_DIR to:'
	@cd $(instlinks) && echo "  `pwd`"
	@echo "---------------------------------------------------------------"
else
	@echo "---------------------------------------------------------------"
	@echo 'You must now install VPR and set %VPR_BASE_DIR% to:'
	@echo "  ${prefix}"
	@echo "---------------------------------------------------------------"
endif

# Remove the links in $(instlinks).
clean-links:
	@echo "------------------------------------------------"
	@echo "Removing developer installation links"
	@echo "------------------------------------------------"
	rm -rf $(instlinks)

# =============================================================================
# Installation targets.  The default (what is done by 'install') is to install
# the static debugging version of the libraries.  The steps taken for a full
# installation are:
#
#     1) Create the full installation directory hierarchy.
#     2) Install the libraries.
#     3) Install the header files.
#     4) Install the test programs.
#     5) Install the contents of the Data directory.
#     6) Install the Java-based config editor (if possible).
# =============================================================================

BEFOREINSTALL	= beforeinstall
AFTERINSTALL	= afterinstall

# Steps to take before beginning the installation process.  This target is
# independent of the current ABI.
beforeinstall:
	@$(MAKE) hier

# Make the full directory hierarchy for the installation.
hier:
	@echo "------------------------------------------------"
	@echo "Making hierarchy"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(prefix)
	$(MTREE_CMD) -Ude -f $(mtreedir)/VPR.install.dist -p $(prefix)
	$(SHELL) $(MKINSTALLDIRS) $(datadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/VPR.include.dist -p $(prefix)
	$(MTREE_CMD) -Ude -f $(mtreedir)/VPR.lib.dist -p $(prefix)
	$(MTREE_CMD) -Ude -f $(mtreedir)/VPR.test.dist -p $(datadir)

# Steps to take after the installation process is complete.  This target is
# independent of the current ABI.
afterinstall:
	@echo "==============================================================="
	@echo "VPR installation complete"
	@echo "==============================================================="

PREINSTALL	= pre-install
POSTINSTALL	= post-install

pre-install:
	$(MTREE_CMD) -Ude -f $(mtreedir)/VPR.lib.dist -p $(prefix)

# Do everything needed after installing the library binaries.
post-install:
	@$(MAKE) install-test
	$(INSTALL) -m $(EXEC_PERMS) $(GROUP_OPT_UNIX)			\
          $(topdir)/vpr-config $(bindir)

PREINSTALL_HEADERS	= pre-install-headers
POSTINSTALL_HEADERS	= post-install-headers

pre-install-headers:
	$(MTREE_CMD) -Ude -f $(mtreedir)/VPR.include.dist -p $(prefix)

post-install-headers:
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(VPRROOT_ABS)/vpr/System.h $(includedir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(VPRROOT_ABS)/vpr/SystemBase.h $(includedir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(VPRROOT_ABS)/vpr/vpr.h $(includedir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(VPRROOT_ABS)/vpr/vprConfig.h $(includedir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(VPRROOT_ABS)/vpr/vprDomain.h $(includedir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(VPRROOT_ABS)/vpr/vprTypes.h $(includedir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(topdir)/vpr/vprDefines.h $(includedir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(topdir)/vpr/vprParam.h $(includedir)

# Install the test programs.
install-test:
	@echo "------------------------------------------------"
	@echo "Installing test programs"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(datadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/VPR.test.dist -p $(datadir)
	$(PERL) $(scriptdir)/install-src.pl -i $(top_srcdir)/test	\
          -m $(FILE_PERMS) $(GROUP_OPT_UNIX) -o $(datadir)/test
	$(PERL) $(scriptdir)/makefiles-gen.pl --mode="$(FILE_PERMS)"	\
          --prefix="$(datadir)/test" --vars="$(topdir)/VARS.pl"		\
          --startdir="$(top_srcdir)/test" $(_GROUP_OPT_PL) --srcdir="."

# =============================================================================
# Clean-up targets.  '_clobber' removes the developer installation links.
# =============================================================================
_clobber:
	@$(MAKE) cleandepend
	@$(MAKE) clean-links

# Define $(_LOCAL_CLOBBER) to inform the shared 'clobber' target that there is
# a '_clobber' target to be run besides the standard targets.
_LOCAL_CLOBBER	= 1

include $(MKPATH)/dpp.libs.mk
include $(MKPATH)/dpp.clean.mk

CLEAN_DIRS	+= $(BUILDDIR_BASE) $(LIBDIR_NAME)
CLOBBER_DIRS	+= $(BUILDDIR_BASE) $(LIBDIR_NAME)
