# ***************** <VPR heading BEGIN do not edit this line> *****************
#
# VR Juggler Portable Runtime
#
# Original Authors:
#   Allen Bierbaum, Patrick Hartling, Kevin Meinert, Carolina Cruz-Neira
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# ****************** <VPR heading END do not edit this line> ******************

# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998, 1999, 2000, 2001 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Base configure.in for VR Juggler Portable Runtime.
# -----------------------------------------------------------------------------
# This file is "compiled" by GNU autoconf to generate the configure script
# that is actually run.
# -----------------------------------------------------------------------------

AC_REVISION($Revision$)
AC_INIT(vpr/vprConfig.h)
AC_CONFIG_HEADER(vpr/vprDefines.h)
DPP_PREREQ(1.4.91)
DPP_INIT

# Generate the reconfig script first so that it's easy to run configure again
# if it fails later on.
DPP_GEN_RECONFIG

# -----------------------------------------------------------------------------
# Command-line arguments (--enable-option, --with-pkg=package_name).
# -----------------------------------------------------------------------------

# ------------------------------------------------------ #
# --enable-feature[=arg] and --disable-feature arguments #
# ------------------------------------------------------ #

DPP_STD_CPP(yes)

# Define which threading model to use.  Possible values are "SPROC", "POSIX",
# or "NSPR".
# The default is "SPROC".
AC_ARG_ENABLE(subsystem,
              [  --enable-subsystem=<SPROC|POSIX|NSPR>
                          Define OS abstraction subsystem],
              SUBSYSTEM="$enableval", SUBSYSTEM='none')

# Rudimentary spell checking based on the first letter in the $SUBSYSTEM name.
case $SUBSYSTEM in
    S*)
        SUBSYSTEM='SPROC'
        ;;
    P*)
        SUBSYSTEM='POSIX'
        ;;
    N*)
        SUBSYSTEM='NSPR'
        ;;
esac

# This enables the use of so-called "NSPR threads".  By default, NSPR is not
# compiled to use NSPR threads, so we do not want to use them by default
# either.
DPP_ENABLE_NSPR_THREADS(no)

# Force the use of GCC as the compiler.
# NOTE: This is not fully implemented yet for any platform, but it is
# partially usable on Windows.
DPP_WITH_GCC(no)

# Define the binary format.
DPP_ABI_SETUP

# -----------------------------------------------------------------------------
# System-dependent stuff.
# -----------------------------------------------------------------------------
DPP_WIN32_SETUP
 
# We use AC_CANONICAL SYSTEM so that we can find out information about the
# build, target and host platforms rather than only the host.
AC_CANONICAL_SYSTEM
DPP_SYSTEM_SETUP

# These are used on all platforms.
AC_DEFINE_UNQUOTED(VPR_OS_RELEASE, "$OS_REL_STR")
AC_DEFINE_UNQUOTED(VPR_OS_RELEASE_MAJOR, $OS_REL_NUM_MAJOR)
AC_DEFINE_UNQUOTED(VPR_OS_RELEASE_MINOR, $OS_REL_NUM_MINOR)

# Depending on the target operating system, set various command options and
# such.
case $target_os in
    # IBM RS/6000 running AIX.
    aix*)
        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VPR_OS_AIX)
        ;;
    # i386-class machine running Windows {98,NT} with Cygnus GNU-Win32.
    cygwin)
        # We have to use Win32 subsystem on Win32.
        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of NSPR subsystem ***)
            SUBSYSTEM='NSPR'
        fi

        AC_DEFINE(VPR_OS_Win32,)
        ;;
    # Unkown operating system (to config.guess).
    darwin1.*)
        if test "x$SUBSYSTEM" != "xNSPR" ; then
            AC_MSG_WARN(*** Forcing the use of NSPR subsystem ***)
            SUBSYSTEM='NSPR' 
        fi

        AC_DEFINE(VPR_OS_Darwin,)
        AC_DEFINE(_BSD_TYPES,) 
        ;;
    # A machine running FreeBSD.  Currently only i386 is known to compile.
    freebsd*)
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VPR_OS_FreeBSD,)
        ;;
    # HP PA-RISC machine running HP-UX 10.20.
    hpux10.20)
        # We have to use the NSPR subsystem on HP-UX 10.20.
        if test "x$SUBSYSTEM" != "xNSPR" ; then
            AC_MSG_WARN(*** Forcing the use of NSPR subsystem ***)
            SUBSYSTEM='NSPR'
        fi

        AC_DEFINE(VPR_OS_HPUX,)
        AC_DEFINE(_INCLUDE_TERMIO,)
        AC_DEFINE(_CMA_NOWRAPPERS_,)
        ;;
    # SGI running IRIX 6.*.
    irix6*)
        DBG_FLAGS="$DBG_FLAGS -gslim"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of SPROC subsystem ***)
            SUBSYSTEM='SPROC'
        fi

        AC_DEFINE(VPR_OS_IRIX,)
        AC_DEFINE(_BSD_TYPES,)
        ;;
    # A machine running Linux.  Currently only i386 is known to work.
    linux*)
#        CXXFLAGS="-fhonor-std -Wall -Werror-implicit-function-declaration $CXXFLAGS"
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VPR_OS_Linux,)
        AC_DEFINE(_GNU_SOURCE,)
        ;;
    # DEC Alpha running Digital UNIX 4.0.
    osf4.0)
        AC_DEFINE(VPR_OS_DUX,)
        ;;
    # A machine running Solaris (aka SunOS).  Currently only i386 is known
    # to work.
    solaris*)
        CXXFLAGS="-Wall -Werror-implicit-function-declaration $CXXFLAGS"

        if test "x$SUBSYSTEM" = "xnone" ; then
            AC_MSG_WARN(*** Forcing the use of POSIX subsystem ***)
            SUBSYSTEM='POSIX'
        fi

        AC_DEFINE(VPR_OS_Solaris,)
        ;;
    unknown)
        AC_DEFINE(VPR_OS_GENERIC,)
        ;;
esac

# -----------------------------------------------------------------------------
# Checks for programs.
# -----------------------------------------------------------------------------
VJ_COMPILER_SETUP
DPP_PROG_CC_NOSTDINC

if test "x$DPP_USING_MSVCCC" = "xyes" ; then
    AR='$(CXX) /link /lib'
    LD='$(CXX) /link /dll'
fi

# Ensure that the C++ compiler we've found is capable of compiling the newer
# newer C++ features that we need.
DPP_CXX_NAMESPACE(AC_MSG_ERROR(*** The library requires C++ namesapce support ***))
DPP_CXX_HAVE_STD
DPP_CXX_INLINE(AC_MSG_ERROR(*** The library requires C++ inline support ***))
DPP_CXX_RTTI(AC_MSG_ERROR(*** The library requires C++ RTTI support ***))
DPP_CXX_STATIC_CAST(AC_MSG_ERROR(*** The library requires C++ static_cast<> ***))

# Now check to see if the compiler accepts the -pthread option.
if test "x$SUBSYSTEM" != "xSPROC" -a "x$NSPR_THREADS_ENABLED" = "xno" ; then
    DPP_CC_PTHREAD_ARG

    if test "x$CC_ACCEPTS_PTHREAD" = "xno" ; then
        DPP_CC_PTHREADS_ARG
    fi
fi

# Ensure that a version of Perl greater than or equal to 5.004 is available.
DPP_PERL_VER(5.004)

AC_CHECK_PROG(MTREE_CMD, mtree, mtree, \$(PERL) \$(scriptdir)/mtree.pl)

DPP_HAVE_GNU_MAKE(3.78, ,
    AC_MSG_ERROR(*** The build system requires GNU make 3.78 or newer ***))
DPP_BASIC_PROGS($PLATFORM, $OS_TYPE)

# -----------------------------------------------------------------------------
# Checks for libraries.
# -----------------------------------------------------------------------------

# Shared memory and synchronization primitives.
SEMAPHORE_SYS=''		# POSIX, SPROC, NSPR
MUTEX_SYS=''			# POSIX, SPROC, NSPR
SHMEM_SYS=''			# POSIX, SPROC, NSPR
THREAD_SYS=''			# POSIX, SPROC, NSPR

# Test for libpthread or for libcma if libpthread is not present.  If the
# library is found, check for pthread_kill().  If it is present, Draft 10 (the
# "final" draft) of the POSIX threads standard is in place.  If not, Draft 4
# is available.
if test "x$SUBSYSTEM" = "xPOSIX" ; then
    DPP_GET_PTHREAD_LIB

    # If $PTHREAD_LIB has a value at this point, then the pthread libraries
    # needed are in $LIBS, so now we make a check for the draft revision being
    # used.  This is done by determining if pthread_kill() is in the library.
    # If it is, Draft 10 is in use.  Otherwise, assume it is Draft 4.
    if test "$xPTHREAD_LIB" != "x" ; then
        DPP_GET_PTHREAD_VER($PLATFORM, VPR_POSIX_C_SOURCE)

        # Define the default thread scope depending on the platform.  On IRIX,
        # only process scope is avaiable without special configuration options.
        # Other systems may support system scope.
        if test "$PLATFORM" = "IRIX" ; then
            AC_DEFINE(VPR_THREAD_SCOPE, PTHREAD_SCOPE_PROCESS)
        else
            AC_DEFINE(VPR_THREAD_SCOPE, PTHREAD_SCOPE_SYSTEM)
        fi

        USE_PTHREADS='yes'
        DPP_GET_POSIX_SEMAPHORE_LIB( ,
            AC_MSG_ERROR(*** POSIX semaphores are required for POSIX subsystem ***))
    else
        AC_MSG_WARN(*** POSIX threads will not be used (no library found) ***)
    fi

    # Do not define _POSIX_C_SOURCE here because it will cause problems when
    # compiling on IRIX.  Instead, define that in the source files where
    # appropriate.
    AC_DEFINE(VPR_USE_PTHREADS,)
    AC_DEFINE(VPR_POSIX_SEMAPHORES,)
    # Use POSIX threading, mutexes and shared memory.
    MUTEX_SYS='POSIX'
    SHMEM_SYS='POSIX'
    THREAD_SYS='POSIX'
    SEMPANORE_SYS='POSIX'
    HANDLE_ABS='UNIX'
    SERIAL_PORT_ABS='TERMIOS'
    SOCKET_ABS='BSD'
# If we are not using POSIX threads, we must be using the IRIX sproc(2) model,
# but we test $SUBSYSTEM just to be sure it is set right.
elif test "x$SUBSYSTEM" = "xSPROC" ; then
    AC_CHECK_HEADERS(sys/prctl.h, ,
        AC_MSG_ERROR(*** IRIX sproc(2) threading will not be used (no headers found) ***))

    AC_DEFINE(VPR_USE_IRIX_SPROC,)

    # Set to IRIX sproc threading, synchronization and shared memory.
    THREAD_SYS='SPROC'
    SEMAPHORE_SYS='SPROC'
    SHMEM_SYS='SPROC'
    MUTEX_SYS='SPROC'
    HANDLE_ABS='UNIX'
    SERIAL_PORT_ABS='TERMIOS'
    SOCKET_ABS='BSD'
# NSPR subsystem.
else
    if test "x$NSPR_THREADS_ENABLED" = "xno" -a "x$OS_TYPE" = "xUNIX" ; then
        DPP_GET_PTHREAD_LIB
        DPP_GET_POSIX_SEMAPHORE_LIB( ,
            AC_MSG_ERROR(*** POSIX semaphores are required for NSPR subsystem ***))
        USE_PTHREADS='yes'
    else
        USE_PTHREADS='no'
    fi

    DPP_HAVE_NSPR(4.0, "$USE_PTHREADS",
        AC_MSG_ERROR(*** NSPR requried for compiling ***))

    AC_DEFINE(VPR_USE_NSPR,)

    # Set to NSPR threading, synchronization and shared memory.
    SEMPANORE_SYS='NSPR'
    THREAD_SYS='NSPR'
    MUTEX_SYS='NSPR'
    SHMEM_SYS='NSPR'

    if test "x$OS_TYPE" = "xUNIX" ; then
        SERIAL_PORT_ABS='TERMIOS'
    else
        SERIAL_PORT_ABS='WIN32'
    fi

    HANDLE_ABS='NSPR'
    SOCKET_ABS='NSPR'
fi

if test "x$USE_PTHREADS" = "xyes" ; then
    AC_DEFINE(_REENTRANT,)
    AC_DEFINE(_THREAD_SAFE,)
    AC_DEFINE(RWSTD_MULTI_THREAD,)
    AC_DEFINE(RW_MULTI_THREAD,)
fi

# -----------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
# -----------------------------------------------------------------------------
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL

# The following checks for availability of the socklen_t type.  Since it is
# is supposed to be defined in sys/socket.h, the usual AC_CHECK_TYPE method
# will not work.  On Linux, it's apparently in unistd.h.  Blah...
AC_CACHE_CHECK(for socklen_t, ac_cv_has_socklen_t,
    AC_TRY_COMPILE([#include <sys/types.h>
                    #include<unistd.h>
                    #include<sys/socket.h> ],
                   [ socklen_t var; ],
                   ac_cv_has_socklen_t='yes',
                   ac_cv_has_socklen_t='no'))

if test "x$ac_cv_has_socklen_t" = "xno" ; then
    AC_DEFINE(socklen_t, int)
fi

# The following checks for availability of the sigset_t type.  Since it is
# is included through signal.h, the usual AC_CHECK_TYPE method will not work.
AC_CACHE_CHECK(for sigset_t, ac_cv_has_sigset_t,
    AC_TRY_COMPILE([#include <signal.h> ],
                   [ sigset_t var; ],
                   ac_cv_has_sigset_t='yes',
                   ac_cv_has_sigset_t='no'))

if test "x$ac_cv_has_sigset_t" = "xno" ; then
    AC_DEFINE(sigset_t, unsigned int)
fi

# The following checks for availability of the in_addr_t type.  Since it is
# supposed to be defined in netinet/in.h, the usual AC_CHECK_TYPE method will
# not work.
if test "x$SUBSYSTEM" != "xNSPR" ; then
    AC_CACHE_CHECK(for in_addr_t, ac_cv_has_in_addr_t,
        AC_TRY_COMPILE([#include <sys/types.h>
                        #include <netinet/in.h> ],
                       [ in_addr_t var; ],
                       ac_cv_has_in_addr_t='yes',
                       ac_cv_has_in_addr_t='no'))

    if test "x$ac_cv_has_in_addr_t" = "xno" ; then
        AC_DEFINE(in_addr_t, int)
    fi
fi

# If we are not using NSPR, we make typedefs in vprTypes.h based on the results
# of the following tests.
if test "x$SUBSYSTEM" != "xNSPR" ; then
    AC_CHECK_SIZEOF(char, 8)
    AC_CHECK_SIZEOF(short, 16)
    AC_CHECK_SIZEOF(int, 32)
    AC_CHECK_SIZEOF(long, 64)
    AC_CHECK_SIZEOF(long long, 64)
fi

# -----------------------------------------------------------------------------
# Checks for header files.
# -----------------------------------------------------------------------------
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(bstring.h fcntl.h limits.h signal.h strings.h sys/file.h \
                 sys/filio.h sys/ioctl.h sys/time.h termios.h unistd.h \
                 sys/capability.h sys/stdsyms.h)

DPP_LANG_SAVE
DPP_LANG_CPLUSPLUS
AC_CHECK_HEADERS(hash_map hash_map.h)
DPP_LANG_RESTORE

# -----------------------------------------------------------------------------
# Checks for library functions.
# -----------------------------------------------------------------------------
AC_CHECK_FUNCS(gettimeofday sigaction sigemptyset sigfillset sigaddset \
               sigdelset sigismember socket strerror)

_vpr_save_LIBS="$LIBS"
AC_CHECK_FUNC(gethostbyname, SOCKET_LIB='',
    AC_CHECK_LIB(socket, gethostbyname, SOCKET_LIB='-lsocket'))
LIBS="${_vpr_save_LIBS}"

# Ensure that we have sched_yield(3).  On Solaris, sched_yield(3) and its
# synchronization friends are in libposix4.
_vpr_save_LIBS="$LIBS"
AC_CHECK_FUNC(sched_yield, AC_DEFINE(HAVE_SCHED_YIELD),
              AC_CHECK_LIB(posix4, sched_yield,
                  [ _sched_lib='-lposix4' ; AC_DEFINE(HAVE_SCHED_YIELD) ]))
LIBS="${_vpr_save_LIBS}"

# -----------------------------------------------------------------------------
# Miscellaneous checks.
# -----------------------------------------------------------------------------

DPP_INSTALLER(vrjuggler, 0644, 0755, 0755)

# For use in linking applications.
EXTRA_LINK_FLAGS=''

vpr_cxxflags="$STDFLAGS"

if test "x$PLATFORM" = "xIRIX" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS -woff 1685,515,608,658,799,803,852,1048,1233,1499"
    CXXFLAGS="$CXXFLAGS -woff 3322 -w2"
    EXTRA_LINK_FLAGS="-J4 -all"
elif test "x$OS_TYPE" = "xWin32" -a "x$USE_GCC" != "xyes" ; then
    CFLAGS="$CFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    CXXFLAGS="$CXXFLAGS /W3 /GR /GX /EHc /QIfdiv /QI0f"
    DBG_FLAGS="$DBG_FLAGS /MTd"
    OPT_FLAGS="$OPT_FLAGS /MT"
    EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS /MTd"
    UUID_DEFS='-DWININC'
    vpr_cxxflags="$CXXFLAGS"
fi

DPP_SYSTEM_SUBST

# If we are using pthreads, add the library containing the pthread calls to
# $LIBS.
if test "x$USE_PTHREADS" = "xyes" ; then
    DPP_PTHREAD_FINISH
fi

INCLUDES="$INCLUDES $NSPR_INCLUDES"

# For makedepend(1) to work properly on HP-UX with aCC, we have to include
# these extra paths.
if test "x$PLATFORM" = "xHP" ; then
    _aCC_ROOT="/opt/aCC"
    DEPEND_EXTRAS="$DEPEND_EXTRAS -I${_aCC_ROOT} -I${_aCC_ROOT}/include -I${_aCC_ROOT}/include/iostream"
elif test "x$OS_TYPE" = "xWin32" ; then
    DEPEND_EXTRAS="$DEPEND_EXTRAS -D__cplusplus"
fi

# $srcdir is the root directory of the juggler source tree.  To get a value
# for $VPRROOT_ABS, we cd there and save the value of running pwd.  Then
# return to the directory where configure is being run ($topdir).
cd "$srcdir"
VPRROOT_ABS=`pwd`

cd "$VPRROOT_ABS/../.."
JUGGLERROOT_ABS=`pwd`
cd "$topdir"

# Define the base path to the source directory using $VPRROOT_ABS as an
# alternative to using $srcdir.
VPR_SRCDIR='$(VPRROOT_ABS)'
UNIX_VPRROOT_ABS="$VPRROOT_ABS"
UNIX_JUGGLERROOT_ABS="$JUGGLERROOT_ABS"

# Variables set in Makefiles found in the application trees.  All variables
# listed are for use only in the Makefile.in's found in that tree unless
# otherwise noted.  They are used in the following way:
#
#     * APP_EXTRA_FLAGS: Extra flags for the compiler and linker.
#     * APP_VPR_LIBS_BASIC: The basic VPR library.
#     * APP_VPR_LIBS_BASIC_INST: Same as the above but is for installed
#       Makefiles.
#     * APP_LIBS_BASIC: The _most basic_ basic libraries needed for compiling
#       (e.g., -lpthread).
#     * APP_EXTRA_LIBS_BEGIN: Options used at the beginning of the list of
#       extra libraries.
#     * APP_EXTRA_LIBS_END: Options used at the end of the list of extra
#       libraries.
#     * APP_EXTRA_LIBS_BASIC: A basic set of extra libraries and linker flags
#       needed for compiling.  These are put after those listed in the previous
#       variables in the compile line.
#
APP_BASE_DIR='$(topdir)/instlinks'
APP_BASE_DIR_INST='$(VPR_BASE_DIR)'
APP_EXTRA_FLAGS="${_EXTRA_FLAGS} $X_INCLUDES"

if test "$OS_TYPE" = "UNIX" ; then
    if test "$PLATFORM" = "IRIX" ; then
        APP_VPR_LIBS_BEGIN="-B static -L\$(VPR_BASE_DIR)/lib${LIBBITSUF}"
        APP_VPR_LIBS_END=''
        APP_VPR_LIBS_BASIC='-lvpr'

        APP_VPR_LIBS_BEGIN_INST="-B dynamic -L\$(VPR_BASE_DIR)/lib${LIBBITSUF}"
        APP_VPR_LIBS_END_INST="-Wl,-rpath,\$(VPR_BASE_DIR)/lib$LIBBITSUF"
        APP_VPR_LIBS_BASIC_INST='-lvpr'

        APP_EXTRA_LIBS_BEGIN='-B dynamic'
        APP_EXTRA_LIBS_END="$NSPR_LDFLAGS $NSPR_LIB $PTHREAD_LIB $SEM_LIB $SOCKET_LIB"
    elif test "x$GXX" = "xyes" -a "x$PLATFORM" != "xDarwin" ; then
        APP_VPR_LIBS_BEGIN="-Wl,-Bstatic -L\$(VPR_BASE_DIR)/lib${LIBBITSUF}"
        APP_VPR_LIBS_END=''
        APP_VPR_LIBS_BASIC='-lvpr'

        APP_VPR_LIBS_BEGIN_INST="-Wl,-Bdynamic -L\$(VPR_BASE_DIR)/lib${LIBBITSUF}"
        APP_VPR_LIBS_END_INST="-Wl,-rpath,\$(VPR_BASE_DIR)/lib$LIBBITSUF"
        APP_VPR_LIBS_BASIC_INST="$APP_VPR_LIBS_BASIC"

        APP_EXTRA_LIBS_BEGIN='-Wl,-Bdynamic'
        APP_EXTRA_LIBS_END="$NSPR_LDFLAGS $NSPR_LIB $PTHREAD_LIB $SEM_LIB $SOCKET_LIB"
    else
        # For now, we are disabling static linking for the sample applications
        # when compiled in a developer's build tree.  This is only the csae on
        # non-IRIX platforms.
        APP_VPR_LIBS_BEGIN="-L\$(VPR_BASE_DIR)/lib${LIBBITSUF}"
        APP_VPR_LIBS_END=''
        APP_VPR_LIBS_BASIC='-lvpr'

        APP_VPR_LIBS_BEGIN_INST="$APP_VPR_LIBS_BEGIN"
        APP_VPR_LIBS_END_INST="$APP_VPR_LIBS_END"
        APP_VPR_LIBS_BASIC_INST="$APP_VPR_LIBS_BASIC"

        APP_EXTRA_LIBS_END="$NSPR_LDFLAGS $NSPR_LIB $PTHREAD_LIB $SEM_LIB $SOCKET_LIB"
    fi

    APP_EXTRA_LIBS_BASIC="$LDFLAGS $PTHREAD_ARG $LIBS"

    DYLIB_DEPS="$NSPR_LDFLAGS $NSPR_LIB"
elif test "$OS_TYPE" = "Win32" ; then
    APP_VPR_LIBS_BEGIN="/link /libpath:\$(VPR_BASE_DIR)/lib/debug $NSPR_LDFLAGS"
    APP_VPR_LIBS_END=''
    APP_VPR_LIBS_BASIC='vpr.lib'
    APP_VPR_LIBS_BEGIN_INST="$APP_VPR_LIBS_BEGIN"
    APP_VPR_LIBS_END_INST="$APP_VPR_LIBS_END"
    APP_VPR_LIBS_BASIC_INST="$APP_VPR_LIBS_BASIC"
    APP_LIBS_BASIC="$NSPR_LIB comctl32.lib user32.lib gdi32.lib ws2_32.lib"
    APP_EXTRA_LIBS_BASIC="$LDFLAGS $LIBS"

    DYLIB_DEPS="$NSPR_LDFLAGS $NSPR_LIB ws2_32.lib"
fi

# Translate paths from UNIX-style to Win32.
if test "x$OS_TYPE" = "xWin32" ; then
    SAFE_VPRROOT_ABS=`unix2dos -p "$VPRROOT_ABS"`
    SAFE_JUGGLERROOT_ABS=`unix2dos -p "$JUGGLERROOT_ABS"`
    VPR_SRCDIR=`unix2dos "$VPR_SRCDIR"`

    if test "x$DEPEND_EXTRAS" != "x" ; then
        DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    fi

    if test "x$INCLUDES" != "x" ; then
        INCLUDES=`unix2dos "$INCLUDES"`
    fi

    if test "x$LIBS" != "x" ; then
        LIBS=`unix2dos "$LIBS"`
    fi

    LN_S='cp'
    MTREE_CMD=`unix2dos "$MTREE_CMD"`

    APP_EXTRA_LIBS_BASIC=`unix2dos "$APP_EXTRA_LIBS_BASIC"`
else
    SAFE_VPRROOT_ABS="$VPRROOT_ABS"
    SAFE_JUGGLERROOT_ABS="$JUGGLERROOT_ABS"
fi

# Information needed to generate vpr-config.
case $SUBSYSTEM in
    SPROC)
        subsystem_cxxflags="$INCLUDES"
        subsystem_libs="$SEM_LIB $SOCKET_LIB"
        static_begin="-B static"
        static_end="-B dynamic"
        vpr_ldflags="-L\$prefix/lib\$LIBBITSUF"
        vpr_libs='-lvpr'
        ;;
    POSIX)
        subsystem_cxxflags="$INCLUDES"
        subsystem_libs="$PTHREAD_LIB $SEM_LIB $SOCKET_LIB"

        if test "x$PLATFORM" != "xMacOX" ; then
            if test "x$GXX" = "xyes" ; then
                static_begin="-Wl,-Bstatic"
                static_end="-Wl,-Bdynamic"
            else
                static_begin="-B static"
                static_end="-B dynamic"
            fi
        fi

        vpr_ldflags="-L\$prefix/lib\$LIBBITSUF"
        vpr_libs='-lvpr'
        ;;
    NSPR)
        if test "x$OS_TYPE" = "xWin32" ; then
            subsystem_cxxflags="$INCLUDES"
            subsystem_libs="$NSPR_LIB comctl32.lib user32.lib gdi32.lib ws2_32.lib"
            vpr_ldflags="/link /libpath:\$prefix/lib/debug $NSPR_LDFLAGS"
            vpr_libs='vpr.lib'
        else
            subsystem_cxxflags="$INCLUDES"
            subsystem_libs="$NSPR_LDFLAGS $NSPR_LIB $PTHREAD_LIB $SEM_LIB $SOCKET_LIB"
            vpr_ldflags="-L\$prefix/lib\$LIBBITSUF"
            vpr_libs='-lvpr'

            if test "x$PLATFORM" != "xDarwin" ; then
                if test "x$GXX" = "xyes" ; then
                    static_begin="-Wl,-Bstatic"
                    static_end="-Wl,-Bdynamic"
                else
                    static_begin="-B static"
                    static_end="-B dynamic"
                fi
            fi
        fi
        ;;
esac

vpr_extra_cxxflags=''
vpr_extra_include_dirs=''

if test "x$PLATFORM" = "xIRIX" ; then
    vpr_n32_flags='-n32'
    vpr_64_flags='-64'
    vpr_extra_include_dirs='boost/compatibility/cpp_c_headers'
fi

vpr_extra_ldflags="$EXTRA_LDFLAGS"

DPP_SUBST

AC_SUBST(topdir)
AC_SUBST(UNIX_VPRROOT_ABS)
AC_SUBST(UNIX_JUGGLERROOT_ABS)
AC_SUBST(SAFE_VPRROOT_ABS)
AC_SUBST(SAFE_JUGGLERROOT_ABS)
AC_SUBST(VPR_SRCDIR)
AC_SUBST(VPR_SHARE_DIR)

AC_SUBST(EXTRA_LINK_FLAGS)

AC_SUBST(SUBSYSTEM)
AC_SUBST(SEMAPHORE_SYS)
AC_SUBST(SHMEM_SYS)
AC_SUBST(MUTEX_SYS)
AC_SUBST(THREAD_SYS)
AC_SUBST(HANDLE_ABS)
AC_SUBST(SERIAL_PORT_ABS)
AC_SUBST(SOCKET_ABS)

AC_SUBST(APP_BASE_DIR)
AC_SUBST(APP_BASE_DIR_INST)
AC_SUBST(APP_EXTRA_FLAGS)
AC_SUBST(APP_VPR_LIBS_BEGIN)
AC_SUBST(APP_VPR_LIBS_END)
AC_SUBST(APP_VPR_LIBS_BASIC)
AC_SUBST(APP_VPR_LIBS_BEGIN_INST)
AC_SUBST(APP_VPR_LIBS_END_INST)
AC_SUBST(APP_VPR_LIBS_BASIC_INST)
AC_SUBST(APP_LIBS_BASIC)
AC_SUBST(APP_EXTRA_LIBS_BEGIN)
AC_SUBST(APP_EXTRA_LIBS_END)
AC_SUBST(APP_EXTRA_LIBS_BASIC)

AC_SUBST(DYLIB_DEPS)

AC_SUBST(UUID_DEFS)

AC_SUBST(subsystem_cxxflags)
AC_SUBST(subsystem_libs)
AC_SUBST(static_begin)
AC_SUBST(static_end)
AC_SUBST(vpr_cxxflags)
AC_SUBST(vpr_ldflags)
AC_SUBST(vpr_libs)
AC_SUBST(vpr_extra_cxxflags)
AC_SUBST(vpr_extra_include_dirs)
AC_SUBST(vpr_extra_ldflags)
AC_SUBST(vpr_extra_libs)
AC_SUBST(vpr_n32_flags)
AC_SUBST(vpr_64_flags)

# -----------------------------------------------------------------------------
# Final file generation step.
# -----------------------------------------------------------------------------

VJ_MTREE_LIB_GEN(VPR, mtree, $PLATFORM, $ISA)

AC_OUTPUT(Makefile
          Makefile.inc
          common.defs.mk
          make.defs.mk
          vpr/Makefile
          vpr/md/Makefile
          vpr/md/NSPR/Makefile
          vpr/md/NSPR/IO/Makefile
          vpr/md/NSPR/IO/Socket/Makefile
          vpr/md/NSPR/Sync/Makefile
          vpr/md/NSPR/Thread/Makefile
          vpr/md/POSIX/Makefile
          vpr/md/POSIX/IO/Makefile
          vpr/md/POSIX/IO/Port/Makefile
          vpr/md/POSIX/IO/Socket/Makefile
          vpr/md/POSIX/Sync/Makefile
          vpr/md/POSIX/Thread/Makefile
          vpr/md/SPROC/Makefile
          vpr/md/SPROC/SharedMem/Makefile
          vpr/md/SPROC/Sync/Makefile
          vpr/md/SPROC/Thread/Makefile
          vpr/md/WIN32/Makefile
          vpr/md/WIN32/IO/Makefile
          vpr/md/WIN32/IO/Port/Makefile
          vpr/IO/Makefile
          vpr/IO/Port/Makefile
          vpr/IO/Socket/Makefile
          vpr/IO/Stats/Makefile
          vpr/Sync/Makefile
          vpr/Thread/Makefile
          vpr/Util/Makefile
          vpr/Util/md5/Makefile
          vpr/Util/uuid/Makefile
          test/Makefile
          test/TestSuite/Makefile
          test/SerialPort/Makefile
          test/Socket/Makefile
          test/Sync/Makefile
          test/Thread/Makefile
          mtree/VPR.include.dist
          mtree/VPR.install.dist
          mtree/VPR.test.dist
          VARS.pl)

cat <<BUILD_INFO

 Remember that you need to build VPR with GNU make.
 GNU make is called 'gmake' on most systems.
 See the file README for more details on compiling the VPR distribution.

BUILD_INFO
