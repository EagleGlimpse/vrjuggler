# -----------------------------------------------------------------------------
# Makefile.in for juggler/test/ogl
# $Id$
# -----------------------------------------------------------------------------

SHELL		= /bin/sh

topdir		= @topdir@
top_srcdir	= @top_srcdir@
VJROOT		= ${top_srcdir}
VJROOT_ABS	= @VJROOT_ABS@
VJ_SRCDIR	= @VJ_SRCDIR@/test/ogl
WORKDIR		= ${topdir}/test/ogl

include @topdir@/Makefile.base

SUBDIRS		= cubes

@SET_MAKE@

# -----------------------------------------------------------------------------
# Library targets.
# -----------------------------------------------------------------------------

default: all

all-recursive install-recursive depend-recursive newdepend-recursive cubes:
	@set fnord ${MAKEFLAGS}; amf=$$2;				\
            list='${SUBDIRS}';						\
            for subdir in $$list; do					\
                target=`echo $@ | sed s/-recursive//`;			\
                echo "Making $$target in test/ogl/$$subdir";		\
                (cd $$subdir && ${MAKE} OPTIMIZER="${OPTIMIZER}"	\
                                    OBJDIR=${OBJDIR} $$target)		\
                    || case "$$amf" in					\
                         *=*) exit 1;;					\
                         *k*) fail=yes;;				\
                         *) exit 1;; esac;				\
            done && test -z "$$fail"

all: all-recursive

depend: depend-recursive

newdepend: newdepend-recursive

# -----------------------------------------------------------------------------
# Clean-up.
# -----------------------------------------------------------------------------
clean-recursive:
	@set fnord ${MAKEFLAGS}; amf=$$2;		\
            rev=''; list='${SUBDIRS}';			\
            for subdir in $$list; do			\
                rev="$$subdir $$rev";			\
            done;					\
            for subdir in $$rev; do			\
                target=`echo $@ | sed s/-recursive//`;	\
                echo "Making $$target in $$subdir";	\
                (cd $$subdir && ${MAKE} $$target)	\
                    || case "$$amf" in			\
                         *=*) exit 1;;			\
                         *k*) fail=yes;;		\
                         *) exit 1;;			\
                       esac;				\
            done && test -z "$$fail"

clean: clean-recursive
